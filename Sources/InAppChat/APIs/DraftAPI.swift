//
// DraftAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DraftAPI {

    /**
     Draft API
     
     - parameter threadId: (query) Get draft for a particular thread (optional)
     - parameter baseMsgUniqueId: (query) Get thread for a reply thread, this is base message id (optional)
     - returns: APIMessage?
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getDrafts(threadId: String? = nil, baseMsgUniqueId: String? = nil) async throws -> APIMessage? {
        return try await getDraftsWithRequestBuilder(threadId: threadId, baseMsgUniqueId: baseMsgUniqueId).execute().body
    }

    /**
     Draft API
     - GET /draft
     - Send chat over a thread
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter threadId: (query) Get draft for a particular thread (optional)
     - parameter baseMsgUniqueId: (query) Get thread for a reply thread, this is base message id (optional)
     - returns: RequestBuilder<APIMessage?> 
     */
    open class func getDraftsWithRequestBuilder(threadId: String? = nil, baseMsgUniqueId: String? = nil) -> RequestBuilder<APIMessage?> {
        let localVariablePath = "/draft"
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "threadId": (wrappedValue: threadId?.encodeToJSON(), isExplode: true),
            "baseMsgUniqueId": (wrappedValue: baseMsgUniqueId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<APIMessage?>.Type = InAppChatAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Draft API
     
     - parameter senderTimeStampMs: (form) epoch timestamp (in ms) of message creation generated on sender device 
     - parameter threadId: (form) Thread ID which represents a user or a group. eg. 5c56c9a2218aec4b4a8a976f. This is mutually exclusive with recipientAppUserId. (optional)
     - parameter recipientAppUserId: (form) App user Id of receiver. eg. abc@def.com. This is mutually exclusive with threadId. (optional)
     - parameter message: (form) message text. rg. &#39;hello&#39; (optional)
     - parameter msgType: (form)  (optional)
     - parameter file: (form) File share (optional)
     - parameter replyThreadFeatureData: (form)  (optional)
     - parameter location: (form)  (optional)
     - parameter contact: (form)  (optional)
     - parameter gif: (form) gify url (optional)
     - parameter mentions: (form)  (optional)
     - parameter forwardChatFeatureData: (form)  (optional)
     - parameter media: (form)  (optional)
     - parameter msgCorrelationId: (form) Client generated unique identifier used to trace message delivery till receiver (optional)
     - parameter encryptedChatList: (form) List of user+device wise eencrypted chat objects. (optional)
     - returns: APIMessage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func updateDraft(senderTimeStampMs: Double, threadId: String? = nil, recipientAppUserId: String? = nil, message: String? = nil, msgType: MessageType? = nil, file: URL? = nil, replyThreadFeatureData: Reply? = nil, location: Location? = nil, contact: Contact? = nil, gif: String? = nil, mentions: [Mention]? = nil, forwardChatFeatureData: Forward? = nil, media: Media? = nil, msgCorrelationId: String? = nil, encryptedChatList: [EncryptedMessage]? = nil) async throws -> APIMessage {
        return try await updateDraftWithRequestBuilder(senderTimeStampMs: senderTimeStampMs, threadId: threadId, recipientAppUserId: recipientAppUserId, message: message, msgType: msgType, file: file, replyThreadFeatureData: replyThreadFeatureData, location: location, contact: contact, gif: gif, mentions: mentions, forwardChatFeatureData: forwardChatFeatureData, media: media, msgCorrelationId: msgCorrelationId, encryptedChatList: encryptedChatList).execute().body
    }

    /**
     Draft API
     - POST /draft
     - Send chat over a thread
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter senderTimeStampMs: (form) epoch timestamp (in ms) of message creation generated on sender device 
     - parameter threadId: (form) Thread ID which represents a user or a group. eg. 5c56c9a2218aec4b4a8a976f. This is mutually exclusive with recipientAppUserId. (optional)
     - parameter recipientAppUserId: (form) App user Id of receiver. eg. abc@def.com. This is mutually exclusive with threadId. (optional)
     - parameter message: (form) message text. rg. &#39;hello&#39; (optional)
     - parameter msgType: (form)  (optional)
     - parameter file: (form) File share (optional)
     - parameter replyThreadFeatureData: (form)  (optional)
     - parameter location: (form)  (optional)
     - parameter contact: (form)  (optional)
     - parameter gif: (form) gify url (optional)
     - parameter mentions: (form)  (optional)
     - parameter forwardChatFeatureData: (form)  (optional)
     - parameter media: (form)  (optional)
     - parameter msgCorrelationId: (form) Client generated unique identifier used to trace message delivery till receiver (optional)
     - parameter encryptedChatList: (form) List of user+device wise eencrypted chat objects. (optional)
     - returns: RequestBuilder<APIMessage> 
     */
    open class func updateDraftWithRequestBuilder(senderTimeStampMs: Double, threadId: String? = nil, recipientAppUserId: String? = nil, message: String? = nil, msgType: MessageType? = nil, file: URL? = nil, replyThreadFeatureData: Reply? = nil, location: Location? = nil, contact: Contact? = nil, gif: String? = nil, mentions: [Mention]? = nil, forwardChatFeatureData: Forward? = nil, media: Media? = nil, msgCorrelationId: String? = nil, encryptedChatList: [EncryptedMessage]? = nil) -> RequestBuilder<APIMessage> {
        let localVariablePath = "/draft"
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "threadId": threadId?.encodeToJSON(),
            "recipientAppUserId": recipientAppUserId?.encodeToJSON(),
            "message": message?.encodeToJSON(),
            "msgType": msgType?.encodeToJSON(),
            "file": file?.encodeToJSON(),
            "replyThreadFeatureData": replyThreadFeatureData?.encodeToJSON(),
            "location": location?.encodeToJSON(),
            "contact": contact?.encodeToJSON(),
            "gif": gif?.encodeToJSON(),
            "mentions": mentions?.encodeToJSON(),
            "forwardChatFeatureData": forwardChatFeatureData?.encodeToJSON(),
            "media": media?.encodeToJSON(),
            "msgCorrelationId": msgCorrelationId?.encodeToJSON(),
            "senderTimeStampMs": senderTimeStampMs.encodeToJSON(),
            "encryptedChatList": encryptedChatList?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<APIMessage>.Type = InAppChatAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
