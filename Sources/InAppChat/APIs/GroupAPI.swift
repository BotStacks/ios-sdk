//
// GroupAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class GroupAPI {

    /**
     accept group invitation
     
     - parameter gid: (path) Group ID 
     - returns: APIThread
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func acceptGroupInvite(gid: String) async throws -> APIThread {
        return try await acceptGroupInviteWithRequestBuilder(gid: gid).execute().body
    }

    /**
     accept group invitation
     - POST /group/{gid}/invites/accept
     - Accept group invitation
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter gid: (path) Group ID 
     - returns: RequestBuilder<APIThread> 
     */
    open class func acceptGroupInviteWithRequestBuilder(gid: String) -> RequestBuilder<APIThread> {
        var localVariablePath = "/group/{gid}/invites/accept"
        let gidPreEscape = "\(APIHelper.mapValueToPathItem(gid))"
        let gidPostEscape = gidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{gid}", with: gidPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<APIThread>.Type = InAppChatAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Add participant to group
     
     - parameter gid: (path) Group ID 
     - parameter uid: (path) the user&#39;s id 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func addParticipant(gid: String, uid: String) async throws {
        return try await addParticipantWithRequestBuilder(gid: gid, uid: uid).execute().body
    }

    /**
     Add participant to group
     - PUT /group/{gid}/participants/{uid}
     - Add participant to group
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter gid: (path) Group ID 
     - parameter uid: (path) the user&#39;s id 
     - returns: RequestBuilder<Void> 
     */
    open class func addParticipantWithRequestBuilder(gid: String, uid: String) -> RequestBuilder<Void> {
        var localVariablePath = "/group/{gid}/participants/{uid}"
        let gidPreEscape = "\(APIHelper.mapValueToPathItem(gid))"
        let gidPostEscape = gidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{gid}", with: gidPostEscape, options: .literal, range: nil)
        let uidPreEscape = "\(APIHelper.mapValueToPathItem(uid))"
        let uidPostEscape = uidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uid}", with: uidPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = InAppChatAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter groupType
     */
    public enum GroupType_createGroup: String, CaseIterable {
        case _public = "public"
        case _private = "private"
    }

    /**
     Create or Update group
     
     - parameter name: (form) Group Name 
     - parameter participants: (form) List of participants 
     - parameter groupType: (form) Type of group. for example privte/public. only private is supported as of now. (optional)
     - parameter description: (form) Description of group. Optional. Min length 2. (optional)
     - parameter profilePic: (form) The image for the group (optional)
     - returns: APIGroup
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func createGroup(name: String, participants: [String], groupType: GroupType_createGroup? = nil, description: String? = nil, profilePic: URL? = nil) async throws -> APIGroup {
        return try await createGroupWithRequestBuilder(name: name, participants: participants, groupType: groupType, description: description, profilePic: profilePic).execute().body
    }

    /**
     Create or Update group
     - POST /groups
     - Create a group. For profilePic use multipart/formdata and in this case stringify participants list.
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter name: (form) Group Name 
     - parameter participants: (form) List of participants 
     - parameter groupType: (form) Type of group. for example privte/public. only private is supported as of now. (optional)
     - parameter description: (form) Description of group. Optional. Min length 2. (optional)
     - parameter profilePic: (form) The image for the group (optional)
     - returns: RequestBuilder<APIGroup> 
     */
    open class func createGroupWithRequestBuilder(name: String, participants: [String], groupType: GroupType_createGroup? = nil, description: String? = nil, profilePic: URL? = nil) -> RequestBuilder<APIGroup> {
        let localVariablePath = "/groups"
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "name": name.encodeToJSON(),
            "groupType": groupType?.encodeToJSON(),
            "description": description?.encodeToJSON(),
            "participants": participants.encodeToJSON(),
            "profilePic": profilePic?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<APIGroup>.Type = InAppChatAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter gid: (path) Group ID 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func deleteGroup(gid: String) async throws {
        return try await deleteGroupWithRequestBuilder(gid: gid).execute().body
    }

    /**
     - DELETE /group/{gid}
     - Delete a group
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter gid: (path) Group ID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteGroupWithRequestBuilder(gid: String) -> RequestBuilder<Void> {
        var localVariablePath = "/group/{gid}"
        let gidPreEscape = "\(APIHelper.mapValueToPathItem(gid))"
        let gidPostEscape = gidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{gid}", with: gidPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = InAppChatAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     dismiss group invitation
     
     - parameter gid: (path) Group ID 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func dismissGroupInvite(gid: String) async throws {
        return try await dismissGroupInviteWithRequestBuilder(gid: gid).execute().body
    }

    /**
     dismiss group invitation
     - POST /group/{gid}/invites/dismiss
     - Dissmiss group invitation
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter gid: (path) Group ID 
     - returns: RequestBuilder<Void> 
     */
    open class func dismissGroupInviteWithRequestBuilder(gid: String) -> RequestBuilder<Void> {
        var localVariablePath = "/group/{gid}/invites/dismiss"
        let gidPreEscape = "\(APIHelper.mapValueToPathItem(gid))"
        let gidPostEscape = gidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{gid}", with: gidPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = InAppChatAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get group by groupId
     
     - parameter gid: (path) Group ID 
     - returns: APIGroup
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getGroup(gid: String) async throws -> APIGroup {
        return try await getGroupWithRequestBuilder(gid: gid).execute().body
    }

    /**
     Get group by groupId
     - GET /group/{gid}
     - Get group by groupId
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter gid: (path) Group ID 
     - returns: RequestBuilder<APIGroup> 
     */
    open class func getGroupWithRequestBuilder(gid: String) -> RequestBuilder<APIGroup> {
        var localVariablePath = "/group/{gid}"
        let gidPreEscape = "\(APIHelper.mapValueToPathItem(gid))"
        let gidPostEscape = gidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{gid}", with: gidPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<APIGroup>.Type = InAppChatAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter groupType
     */
    public enum GroupType_getGroups: String, CaseIterable {
        case _public = "public"
        case _private = "private"
    }

    /**
     * enum for parameter joined
     */
    public enum Joined_getGroups: String, CaseIterable {
        case yes = "yes"
        case no = "no"
    }

    /**
     Get user groups
     
     - parameter limit: (query) limit value for pagination. i.e. page-size. default 10 (optional, default to 20)
     - parameter skip: (query) skip value for pagination. i.e. index. default 0 (optional, default to 0)
     - parameter groupType: (query) Filter by group type (optional)
     - parameter joined: (query) Get only joined/not joined groups (optional)
     - returns: [APIGroup]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getGroups(limit: Int? = nil, skip: Int? = nil, groupType: GroupType_getGroups? = nil, joined: Joined_getGroups? = nil) async throws -> [APIGroup] {
        return try await getGroupsWithRequestBuilder(limit: limit, skip: skip, groupType: groupType, joined: joined).execute().body
    }

    /**
     Get user groups
     - GET /groups
     - Get groups where user is participant or group is public
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter limit: (query) limit value for pagination. i.e. page-size. default 10 (optional, default to 20)
     - parameter skip: (query) skip value for pagination. i.e. index. default 0 (optional, default to 0)
     - parameter groupType: (query) Filter by group type (optional)
     - parameter joined: (query) Get only joined/not joined groups (optional)
     - returns: RequestBuilder<[APIGroup]> 
     */
    open class func getGroupsWithRequestBuilder(limit: Int? = nil, skip: Int? = nil, groupType: GroupType_getGroups? = nil, joined: Joined_getGroups? = nil) -> RequestBuilder<[APIGroup]> {
        let localVariablePath = "/groups"
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "groupType": (wrappedValue: groupType?.encodeToJSON(), isExplode: true),
            "joined": (wrappedValue: joined?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[APIGroup]>.Type = InAppChatAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     get group invitation
     
     - returns: [Invite]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getInvites() async throws -> [Invite] {
        return try await getInvitesWithRequestBuilder().execute().body
    }

    /**
     get group invitation
     - GET /group/invites
     - Get group invitations for user
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - returns: RequestBuilder<[Invite]> 
     */
    open class func getInvitesWithRequestBuilder() -> RequestBuilder<[Invite]> {
        let localVariablePath = "/group/invites"
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Invite]>.Type = InAppChatAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Make a user an admin
     
     - parameter uid: (path) the user&#39;s id 
     - parameter gid: (path) Group ID 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func groupAddAdmin(uid: String, gid: String) async throws {
        return try await groupAddAdminWithRequestBuilder(uid: uid, gid: gid).execute().body
    }

    /**
     Make a user an admin
     - PUT /group/{gid}/admin/{uid}
     - Make a user an admin
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter uid: (path) the user&#39;s id 
     - parameter gid: (path) Group ID 
     - returns: RequestBuilder<Void> 
     */
    open class func groupAddAdminWithRequestBuilder(uid: String, gid: String) -> RequestBuilder<Void> {
        var localVariablePath = "/group/{gid}/admin/{uid}"
        let uidPreEscape = "\(APIHelper.mapValueToPathItem(uid))"
        let uidPostEscape = uidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uid}", with: uidPostEscape, options: .literal, range: nil)
        let gidPreEscape = "\(APIHelper.mapValueToPathItem(gid))"
        let gidPostEscape = gidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{gid}", with: gidPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = InAppChatAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Dismiss a group admin
     
     - parameter uid: (path) the user&#39;s id 
     - parameter gid: (path) Group ID 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func groupDismissAdmin(uid: String, gid: String) async throws {
        return try await groupDismissAdminWithRequestBuilder(uid: uid, gid: gid).execute().body
    }

    /**
     Dismiss a group admin
     - DELETE /group/{gid}/admin/{uid}
     - Dismiss a group admin
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter uid: (path) the user&#39;s id 
     - parameter gid: (path) Group ID 
     - returns: RequestBuilder<Void> 
     */
    open class func groupDismissAdminWithRequestBuilder(uid: String, gid: String) -> RequestBuilder<Void> {
        var localVariablePath = "/group/{gid}/admin/{uid}"
        let uidPreEscape = "\(APIHelper.mapValueToPathItem(uid))"
        let uidPostEscape = uidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uid}", with: uidPostEscape, options: .literal, range: nil)
        let gidPreEscape = "\(APIHelper.mapValueToPathItem(gid))"
        let gidPostEscape = gidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{gid}", with: gidPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = InAppChatAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     create group invitation
     
     - parameter gid: (path) Group ID 
     - parameter requestBody: (body) array of user ids to invite 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func inviteUser(gid: String, requestBody: [String]) async throws {
        return try await inviteUserWithRequestBuilder(gid: gid, requestBody: requestBody).execute().body
    }

    /**
     create group invitation
     - POST /group/{gid}/invite
     - Invite new participant to group
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter gid: (path) Group ID 
     - parameter requestBody: (body) array of user ids to invite 
     - returns: RequestBuilder<Void> 
     */
    open class func inviteUserWithRequestBuilder(gid: String, requestBody: [String]) -> RequestBuilder<Void> {
        var localVariablePath = "/group/{gid}/invite"
        let gidPreEscape = "\(APIHelper.mapValueToPathItem(gid))"
        let gidPostEscape = gidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{gid}", with: gidPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = InAppChatAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter gid: (path) Group ID 
     - parameter moderateGroupInput: (body) Unique AppID of the user to get 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func moderateGroup(gid: String, moderateGroupInput: ModerateGroupInput) async throws {
        return try await moderateGroupWithRequestBuilder(gid: gid, moderateGroupInput: moderateGroupInput).execute().body
    }

    /**
     - POST /group/{gid}/moderate
     - Moderate a group. Ban or mute users
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter gid: (path) Group ID 
     - parameter moderateGroupInput: (body) Unique AppID of the user to get 
     - returns: RequestBuilder<Void> 
     */
    open class func moderateGroupWithRequestBuilder(gid: String, moderateGroupInput: ModerateGroupInput) -> RequestBuilder<Void> {
        var localVariablePath = "/group/{gid}/moderate"
        let gidPreEscape = "\(APIHelper.mapValueToPathItem(gid))"
        let gidPostEscape = gidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{gid}", with: gidPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: moderateGroupInput)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = InAppChatAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Remove group profile pic
     
     - parameter gid: (path) Group ID 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func removeGroupImage(gid: String) async throws {
        return try await removeGroupImageWithRequestBuilder(gid: gid).execute().body
    }

    /**
     Remove group profile pic
     - DELETE /group/{gid}/image
     - Remove group profile pic
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter gid: (path) Group ID 
     - returns: RequestBuilder<Void> 
     */
    open class func removeGroupImageWithRequestBuilder(gid: String) -> RequestBuilder<Void> {
        var localVariablePath = "/group/{gid}/image"
        let gidPreEscape = "\(APIHelper.mapValueToPathItem(gid))"
        let gidPostEscape = gidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{gid}", with: gidPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = InAppChatAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Remove participant from group
     
     - parameter gid: (path) Group ID 
     - parameter uid: (path) the user&#39;s id 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func removeParticipant(gid: String, uid: String) async throws {
        return try await removeParticipantWithRequestBuilder(gid: gid, uid: uid).execute().body
    }

    /**
     Remove participant from group
     - DELETE /group/{gid}/participants/{uid}
     - Remove participant from group
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter gid: (path) Group ID 
     - parameter uid: (path) the user&#39;s id 
     - returns: RequestBuilder<Void> 
     */
    open class func removeParticipantWithRequestBuilder(gid: String, uid: String) -> RequestBuilder<Void> {
        var localVariablePath = "/group/{gid}/participants/{uid}"
        let gidPreEscape = "\(APIHelper.mapValueToPathItem(gid))"
        let gidPostEscape = gidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{gid}", with: gidPostEscape, options: .literal, range: nil)
        let uidPreEscape = "\(APIHelper.mapValueToPathItem(uid))"
        let uidPostEscape = uidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uid}", with: uidPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = InAppChatAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter gid: (path) Group ID 
     - parameter updateGroupInput: (body)  
     - returns: APIGroup
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func updateGroup(gid: String, updateGroupInput: UpdateGroupInput) async throws -> APIGroup {
        return try await updateGroupWithRequestBuilder(gid: gid, updateGroupInput: updateGroupInput).execute().body
    }

    /**
     - PUT /group/{gid}
     - Update a group
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter gid: (path) Group ID 
     - parameter updateGroupInput: (body)  
     - returns: RequestBuilder<APIGroup> 
     */
    open class func updateGroupWithRequestBuilder(gid: String, updateGroupInput: UpdateGroupInput) -> RequestBuilder<APIGroup> {
        var localVariablePath = "/group/{gid}"
        let gidPreEscape = "\(APIHelper.mapValueToPathItem(gid))"
        let gidPostEscape = gidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{gid}", with: gidPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateGroupInput)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<APIGroup>.Type = InAppChatAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
