//
// ChatAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ChatAPI {

    /**
     Load chat history
     
     - parameter tid: (path) The Thread ID 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func deleteChatHistory(tid: String) async throws {
        return try await deleteChatHistoryWithRequestBuilder(tid: tid).execute().body
    }

    /**
     Load chat history
     - DELETE /thread/{tid}/messages
     - Clear chat history
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter tid: (path) The Thread ID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteChatHistoryWithRequestBuilder(tid: String) -> RequestBuilder<Void> {
        var localVariablePath = "/thread/{tid}/messages"
        let tidPreEscape = "\(APIHelper.mapValueToPathItem(tid))"
        let tidPostEscape = tidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{tid}", with: tidPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = InAppChatAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete Message API
     
     - parameter mid: (path) The message ID 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func deleteMessage(mid: String) async throws {
        return try await deleteMessageWithRequestBuilder(mid: mid).execute().body
    }

    /**
     Delete Message API
     - DELETE /message/{mid}
     - Delete particular message
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter mid: (path) The message ID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteMessageWithRequestBuilder(mid: String) -> RequestBuilder<Void> {
        var localVariablePath = "/message/{mid}"
        let midPreEscape = "\(APIHelper.mapValueToPathItem(mid))"
        let midPostEscape = midPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mid}", with: midPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = InAppChatAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter skip: (query) skip value for pagination. i.e. index. default 0 (optional, default to 0)
     - parameter limit: (query) limit value for pagination. i.e. page-size. default 10 (optional, default to 20)
     - returns: [APIMessage]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getFavorites(skip: Int? = nil, limit: Int? = nil) async throws -> [APIMessage] {
        return try await getFavoritesWithRequestBuilder(skip: skip, limit: limit).execute().body
    }

    /**
     - GET /favorites
     - Get users favorite messages
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter skip: (query) skip value for pagination. i.e. index. default 0 (optional, default to 0)
     - parameter limit: (query) limit value for pagination. i.e. page-size. default 10 (optional, default to 20)
     - returns: RequestBuilder<[APIMessage]> 
     */
    open class func getFavoritesWithRequestBuilder(skip: Int? = nil, limit: Int? = nil) -> RequestBuilder<[APIMessage]> {
        let localVariablePath = "/favorites"
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[APIMessage]>.Type = InAppChatAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter mid: (path) The message ID 
     - returns: APIMessage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getMessage(mid: String) async throws -> APIMessage {
        return try await getMessageWithRequestBuilder(mid: mid).execute().body
    }

    /**
     - GET /message/{mid}
     - Get a single message
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter mid: (path) The message ID 
     - returns: RequestBuilder<APIMessage> 
     */
    open class func getMessageWithRequestBuilder(mid: String) -> RequestBuilder<APIMessage> {
        var localVariablePath = "/message/{mid}"
        let midPreEscape = "\(APIHelper.mapValueToPathItem(mid))"
        let midPostEscape = midPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mid}", with: midPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<APIMessage>.Type = InAppChatAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter direction
     */
    public enum Direction_getMessages: String, CaseIterable {
        case future = "future"
        case past = "past"
    }

    /**
     Load chat history
     
     - parameter tid: (path) The Thread ID 
     - parameter msgType: (query) Msg type, stringified array Example [\&quot;text\&quot;.\&quot;gif\&quot;] (optional)
     - parameter currentMsgId: (query) THe message ID to paginate after or before (optional)
     - parameter direction: (query) future/past (optional, default to .past)
     - parameter dateFrom: (query) ISO string of start date (optional)
     - parameter dateTo: (query) ISO string of end date (optional)
     - parameter pageSize: (query) page size for pagination (optional)
     - parameter inReplyTo: (query) The ID of the message to list replies for (optional)
     - parameter deep: (query) When true it returns messages from threads and main window both (optional)
     - returns: [APIMessage]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getMessages(tid: String, msgType: String? = nil, currentMsgId: String? = nil, direction: Direction_getMessages? = nil, dateFrom: String? = nil, dateTo: String? = nil, pageSize: Int? = nil, inReplyTo: String? = nil, deep: Bool? = nil) async throws -> [APIMessage] {
        return try await getMessagesWithRequestBuilder(tid: tid, msgType: msgType, currentMsgId: currentMsgId, direction: direction, dateFrom: dateFrom, dateTo: dateTo, pageSize: pageSize, inReplyTo: inReplyTo, deep: deep).execute().body
    }

    /**
     Load chat history
     - GET /thread/{tid}/messages
     - List messages in any chat
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter tid: (path) The Thread ID 
     - parameter msgType: (query) Msg type, stringified array Example [\&quot;text\&quot;.\&quot;gif\&quot;] (optional)
     - parameter currentMsgId: (query) THe message ID to paginate after or before (optional)
     - parameter direction: (query) future/past (optional, default to .past)
     - parameter dateFrom: (query) ISO string of start date (optional)
     - parameter dateTo: (query) ISO string of end date (optional)
     - parameter pageSize: (query) page size for pagination (optional)
     - parameter inReplyTo: (query) The ID of the message to list replies for (optional)
     - parameter deep: (query) When true it returns messages from threads and main window both (optional)
     - returns: RequestBuilder<[APIMessage]> 
     */
    open class func getMessagesWithRequestBuilder(tid: String, msgType: String? = nil, currentMsgId: String? = nil, direction: Direction_getMessages? = nil, dateFrom: String? = nil, dateTo: String? = nil, pageSize: Int? = nil, inReplyTo: String? = nil, deep: Bool? = nil) -> RequestBuilder<[APIMessage]> {
        var localVariablePath = "/thread/{tid}/messages"
        let tidPreEscape = "\(APIHelper.mapValueToPathItem(tid))"
        let tidPostEscape = tidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{tid}", with: tidPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "msgType": (wrappedValue: msgType?.encodeToJSON(), isExplode: true),
            "currentMsgId": (wrappedValue: currentMsgId?.encodeToJSON(), isExplode: true),
            "direction": (wrappedValue: direction?.encodeToJSON(), isExplode: true),
            "dateFrom": (wrappedValue: dateFrom?.encodeToJSON(), isExplode: true),
            "dateTo": (wrappedValue: dateTo?.encodeToJSON(), isExplode: true),
            "pageSize": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "inReplyTo": (wrappedValue: inReplyTo?.encodeToJSON(), isExplode: true),
            "deep": (wrappedValue: deep?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[APIMessage]>.Type = InAppChatAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter mid: (path) The message ID 
     - parameter skip: (query) skip value for pagination. i.e. index. default 0 (optional, default to 0)
     - parameter limit: (query) limit value for pagination. i.e. page-size. default 10 (optional, default to 20)
     - returns: [APIMessage]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getReplies(mid: String, skip: Int? = nil, limit: Int? = nil) async throws -> [APIMessage] {
        return try await getRepliesWithRequestBuilder(mid: mid, skip: skip, limit: limit).execute().body
    }

    /**
     - GET /message/{mid}/replies
     - Get replies to a message
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter mid: (path) The message ID 
     - parameter skip: (query) skip value for pagination. i.e. index. default 0 (optional, default to 0)
     - parameter limit: (query) limit value for pagination. i.e. page-size. default 10 (optional, default to 20)
     - returns: RequestBuilder<[APIMessage]> 
     */
    open class func getRepliesWithRequestBuilder(mid: String, skip: Int? = nil, limit: Int? = nil) -> RequestBuilder<[APIMessage]> {
        var localVariablePath = "/message/{mid}/replies"
        let midPreEscape = "\(APIHelper.mapValueToPathItem(mid))"
        let midPostEscape = midPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mid}", with: midPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[APIMessage]>.Type = InAppChatAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter direction
     */
    public enum Direction_getReplyThreads: String, CaseIterable {
        case future = "future"
        case past = "past"
    }

    /**
     List reply threads
     
     - parameter threadId: (query) Thread ID (optional)
     - parameter follow: (query) To get all threads user following, just send true (optional)
     - parameter starred: (query) To get all starred messages, just send true (optional)
     - parameter limit: (query) limit value for pagination. i.e. page-size. default 10 (optional, default to 20)
     - parameter skip: (query) skip value for pagination. i.e. index. default 0 (optional, default to 0)
     - parameter direction: (query) future/past (optional, default to .past)
     - parameter deep: (query) When true it returns messages from threads and main window both (optional, default to true)
     - returns: [APIMessage]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getReplyThreads(threadId: String? = nil, follow: Bool? = nil, starred: Bool? = nil, limit: Int? = nil, skip: Int? = nil, direction: Direction_getReplyThreads? = nil, deep: Bool? = nil) async throws -> [APIMessage] {
        return try await getReplyThreadsWithRequestBuilder(threadId: threadId, follow: follow, starred: starred, limit: limit, skip: skip, direction: direction, deep: deep).execute().body
    }

    /**
     List reply threads
     - GET /reply-threads
     - List messages with reply threads
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter threadId: (query) Thread ID (optional)
     - parameter follow: (query) To get all threads user following, just send true (optional)
     - parameter starred: (query) To get all starred messages, just send true (optional)
     - parameter limit: (query) limit value for pagination. i.e. page-size. default 10 (optional, default to 20)
     - parameter skip: (query) skip value for pagination. i.e. index. default 0 (optional, default to 0)
     - parameter direction: (query) future/past (optional, default to .past)
     - parameter deep: (query) When true it returns messages from threads and main window both (optional, default to true)
     - returns: RequestBuilder<[APIMessage]> 
     */
    open class func getReplyThreadsWithRequestBuilder(threadId: String? = nil, follow: Bool? = nil, starred: Bool? = nil, limit: Int? = nil, skip: Int? = nil, direction: Direction_getReplyThreads? = nil, deep: Bool? = nil) -> RequestBuilder<[APIMessage]> {
        let localVariablePath = "/reply-threads"
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "threadId": (wrappedValue: threadId?.encodeToJSON(), isExplode: true),
            "follow": (wrappedValue: follow?.encodeToJSON(), isExplode: true),
            "starred": (wrappedValue: starred?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "direction": (wrappedValue: direction?.encodeToJSON(), isExplode: true),
            "deep": (wrappedValue: deep?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[APIMessage]>.Type = InAppChatAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Chat Reaction API
     
     - parameter mid: (path) The message ID 
     - parameter emoji: (path) The emoji to react with 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func react(mid: String, emoji: String) async throws {
        return try await reactWithRequestBuilder(mid: mid, emoji: emoji).execute().body
    }

    /**
     Chat Reaction API
     - PUT /message/{mid}/reactions/{emoji}
     - Send message reaction
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter mid: (path) The message ID 
     - parameter emoji: (path) The emoji to react with 
     - returns: RequestBuilder<Void> 
     */
    open class func reactWithRequestBuilder(mid: String, emoji: String) -> RequestBuilder<Void> {
        var localVariablePath = "/message/{mid}/reactions/{emoji}"
        let midPreEscape = "\(APIHelper.mapValueToPathItem(mid))"
        let midPostEscape = midPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mid}", with: midPostEscape, options: .literal, range: nil)
        let emojiPreEscape = "\(APIHelper.mapValueToPathItem(emoji))"
        let emojiPostEscape = emojiPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emoji}", with: emojiPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = InAppChatAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Send a chat message
     
     - parameter senderTimeStampMs: (form) epoch timestamp (in ms) of message creation generated on sender device 
     - parameter threadId: (form) Thread ID which represents a user or a group. eg. 5c56c9a2218aec4b4a8a976f. This is mutually exclusive with recipientAppUserId. (optional)
     - parameter recipientAppUserId: (form) App user Id of receiver. eg. abc@def.com. This is mutually exclusive with threadId. (optional)
     - parameter message: (form) message text. rg. &#39;hello&#39; (optional)
     - parameter msgType: (form)  (optional)
     - parameter file: (form) File share (optional)
     - parameter replyThreadFeatureData: (form)  (optional)
     - parameter location: (form)  (optional)
     - parameter contact: (form)  (optional)
     - parameter gif: (form) gify url (optional)
     - parameter mentions: (form)  (optional)
     - parameter forwardChatFeatureData: (form)  (optional)
     - parameter media: (form)  (optional)
     - parameter msgCorrelationId: (form) Client generated unique identifier used to trace message delivery till receiver (optional)
     - parameter encryptedChatList: (form) List of user+device wise eencrypted chat objects. (optional)
     - returns: MessageResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sendMessage(senderTimeStampMs: Double, threadId: String? = nil, recipientAppUserId: String? = nil, message: String? = nil, msgType: MessageType? = nil, file: URL? = nil, replyThreadFeatureData: Reply? = nil, location: Location? = nil, contact: Contact? = nil, gif: String? = nil, mentions: [Mention]? = nil, forwardChatFeatureData: Forward? = nil, media: Media? = nil, msgCorrelationId: String? = nil, encryptedChatList: [EncryptedMessage]? = nil) async throws -> MessageResponse {
        return try await sendMessageWithRequestBuilder(senderTimeStampMs: senderTimeStampMs, threadId: threadId, recipientAppUserId: recipientAppUserId, message: message, msgType: msgType, file: file, replyThreadFeatureData: replyThreadFeatureData, location: location, contact: contact, gif: gif, mentions: mentions, forwardChatFeatureData: forwardChatFeatureData, media: media, msgCorrelationId: msgCorrelationId, encryptedChatList: encryptedChatList).execute().body
    }

    /**
     Send a chat message
     - POST /message
     - Send a chat message
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter senderTimeStampMs: (form) epoch timestamp (in ms) of message creation generated on sender device 
     - parameter threadId: (form) Thread ID which represents a user or a group. eg. 5c56c9a2218aec4b4a8a976f. This is mutually exclusive with recipientAppUserId. (optional)
     - parameter recipientAppUserId: (form) App user Id of receiver. eg. abc@def.com. This is mutually exclusive with threadId. (optional)
     - parameter message: (form) message text. rg. &#39;hello&#39; (optional)
     - parameter msgType: (form)  (optional)
     - parameter file: (form) File share (optional)
     - parameter replyThreadFeatureData: (form)  (optional)
     - parameter location: (form)  (optional)
     - parameter contact: (form)  (optional)
     - parameter gif: (form) gify url (optional)
     - parameter mentions: (form)  (optional)
     - parameter forwardChatFeatureData: (form)  (optional)
     - parameter media: (form)  (optional)
     - parameter msgCorrelationId: (form) Client generated unique identifier used to trace message delivery till receiver (optional)
     - parameter encryptedChatList: (form) List of user+device wise eencrypted chat objects. (optional)
     - returns: RequestBuilder<MessageResponse> 
     */
    open class func sendMessageWithRequestBuilder(senderTimeStampMs: Double, threadId: String? = nil, recipientAppUserId: String? = nil, message: String? = nil, msgType: MessageType? = nil, file: URL? = nil, replyThreadFeatureData: Reply? = nil, location: Location? = nil, contact: Contact? = nil, gif: String? = nil, mentions: [Mention]? = nil, forwardChatFeatureData: Forward? = nil, media: Media? = nil, msgCorrelationId: String? = nil, encryptedChatList: [EncryptedMessage]? = nil) -> RequestBuilder<MessageResponse> {
        let localVariablePath = "/message"
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "threadId": threadId?.encodeToJSON(),
            "recipientAppUserId": recipientAppUserId?.encodeToJSON(),
            "message": message?.encodeToJSON(),
            "msgType": msgType?.encodeToJSON(),
            "file": file?.encodeToJSON(),
            "replyThreadFeatureData": replyThreadFeatureData?.encodeToJSON(),
            "location": location?.encodeToJSON(),
            "contact": contact?.encodeToJSON(),
            "gif": gif?.encodeToJSON(),
            "mentions": mentions?.encodeToJSON(),
            "forwardChatFeatureData": forwardChatFeatureData?.encodeToJSON(),
            "media": media?.encodeToJSON(),
            "msgCorrelationId": msgCorrelationId?.encodeToJSON(),
            "senderTimeStampMs": senderTimeStampMs.encodeToJSON(),
            "encryptedChatList": encryptedChatList?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MessageResponse>.Type = InAppChatAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter mid: (path) The message ID 
     - parameter emoji: (path) The emoji to react with 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func unreact(mid: String, emoji: String) async throws {
        return try await unreactWithRequestBuilder(mid: mid, emoji: emoji).execute().body
    }

    /**
     - DELETE /message/{mid}/reactions/{emoji}
     - Remove a message reaction
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter mid: (path) The message ID 
     - parameter emoji: (path) The emoji to react with 
     - returns: RequestBuilder<Void> 
     */
    open class func unreactWithRequestBuilder(mid: String, emoji: String) -> RequestBuilder<Void> {
        var localVariablePath = "/message/{mid}/reactions/{emoji}"
        let midPreEscape = "\(APIHelper.mapValueToPathItem(mid))"
        let midPostEscape = midPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mid}", with: midPostEscape, options: .literal, range: nil)
        let emojiPreEscape = "\(APIHelper.mapValueToPathItem(emoji))"
        let emojiPostEscape = emojiPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{emoji}", with: emojiPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = InAppChatAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Edit Message API
     
     - parameter mid: (path) The message ID 
     - parameter updateMessageInput: (body) edit chat body 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func updateMessage(mid: String, updateMessageInput: UpdateMessageInput) async throws {
        return try await updateMessageWithRequestBuilder(mid: mid, updateMessageInput: updateMessageInput).execute().body
    }

    /**
     Edit Message API
     - PUT /message/{mid}
     - Edit particular message
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter mid: (path) The message ID 
     - parameter updateMessageInput: (body) edit chat body 
     - returns: RequestBuilder<Void> 
     */
    open class func updateMessageWithRequestBuilder(mid: String, updateMessageInput: UpdateMessageInput) -> RequestBuilder<Void> {
        var localVariablePath = "/message/{mid}"
        let midPreEscape = "\(APIHelper.mapValueToPathItem(mid))"
        let midPostEscape = midPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mid}", with: midPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateMessageInput)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = InAppChatAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
