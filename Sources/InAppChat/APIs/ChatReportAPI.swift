//
// ChatReportAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ChatReportAPI {

    /**

     - parameter chatReportId: (path) chat Report ID 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func approveChatReport(chatReportId: String) async throws {
        return try await approveChatReportWithRequestBuilder(chatReportId: chatReportId).execute().body
    }

    /**
     - PUT /reports/{chatReportId}/approve
     - Approve Chat Report Action.
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter chatReportId: (path) chat Report ID 
     - returns: RequestBuilder<Void> 
     */
    open class func approveChatReportWithRequestBuilder(chatReportId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/reports/{chatReportId}/approve"
        let chatReportIdPreEscape = "\(APIHelper.mapValueToPathItem(chatReportId))"
        let chatReportIdPostEscape = chatReportIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{chatReportId}", with: chatReportIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = InAppChatAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter mid: (path) The message ID 
     - parameter createChatReport: (body)  
     - returns: Report
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func createChatReport(mid: String, createChatReport: CreateChatReport) async throws -> Report {
        return try await createChatReportWithRequestBuilder(mid: mid, createChatReport: createChatReport).execute().body
    }

    /**
     - POST /message/{mid}/report
     - Create Chat Report.
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter mid: (path) The message ID 
     - parameter createChatReport: (body)  
     - returns: RequestBuilder<Report> 
     */
    open class func createChatReportWithRequestBuilder(mid: String, createChatReport: CreateChatReport) -> RequestBuilder<Report> {
        var localVariablePath = "/message/{mid}/report"
        let midPreEscape = "\(APIHelper.mapValueToPathItem(mid))"
        let midPostEscape = midPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mid}", with: midPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createChatReport)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Report>.Type = InAppChatAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete Chat Report
     
     - parameter chatReportId: (path) chat Report ID 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func deleteChatReportDelete(chatReportId: String) async throws {
        return try await deleteChatReportDeleteWithRequestBuilder(chatReportId: chatReportId).execute().body
    }

    /**
     Delete Chat Report
     - DELETE /reports/{chatReportId}
     - Delete Chat Report.
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter chatReportId: (path) chat Report ID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteChatReportDeleteWithRequestBuilder(chatReportId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/reports/{chatReportId}"
        let chatReportIdPreEscape = "\(APIHelper.mapValueToPathItem(chatReportId))"
        let chatReportIdPostEscape = chatReportIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{chatReportId}", with: chatReportIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = InAppChatAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Chat Report Details
     
     - parameter chatReportId: (path) chat Report ID 
     - returns: Report
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getChatReport(chatReportId: String) async throws -> Report {
        return try await getChatReportWithRequestBuilder(chatReportId: chatReportId).execute().body
    }

    /**
     Get Chat Report Details
     - GET /reports/{chatReportId}
     - Get Chat Report Details.
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter chatReportId: (path) chat Report ID 
     - returns: RequestBuilder<Report> 
     */
    open class func getChatReportWithRequestBuilder(chatReportId: String) -> RequestBuilder<Report> {
        var localVariablePath = "/reports/{chatReportId}"
        let chatReportIdPreEscape = "\(APIHelper.mapValueToPathItem(chatReportId))"
        let chatReportIdPostEscape = chatReportIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{chatReportId}", with: chatReportIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Report>.Type = InAppChatAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Chat Report List
     
     - parameter uid: (path) the user&#39;s id 
     - parameter skip: (query) skip value for pagination. i.e. index. default 0 (optional, default to 0)
     - parameter limit: (query) limit value for pagination. i.e. page-size. default 10 (optional, default to 20)
     - parameter threadId: (query) thread ID to filter chat Reports (optional)
     - parameter category: (query)  (optional)
     - parameter status: (query)  (optional)
     - parameter msgType: (query) chat report msgType to filter chat Reports(Possible values : text, image, audio, video, file, gif, location, contact, sticker, gify) (optional)
     - returns: [Report]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getChatReportList(uid: String, skip: Int? = nil, limit: Int? = nil, threadId: String? = nil, category: ReportCategory? = nil, status: ReportStatus? = nil, msgType: String? = nil) async throws -> [Report] {
        return try await getChatReportListWithRequestBuilder(uid: uid, skip: skip, limit: limit, threadId: threadId, category: category, status: status, msgType: msgType).execute().body
    }

    /**
     Get Chat Report List
     - GET /reports
     - Get Chat Report List.
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter uid: (path) the user&#39;s id 
     - parameter skip: (query) skip value for pagination. i.e. index. default 0 (optional, default to 0)
     - parameter limit: (query) limit value for pagination. i.e. page-size. default 10 (optional, default to 20)
     - parameter threadId: (query) thread ID to filter chat Reports (optional)
     - parameter category: (query)  (optional)
     - parameter status: (query)  (optional)
     - parameter msgType: (query) chat report msgType to filter chat Reports(Possible values : text, image, audio, video, file, gif, location, contact, sticker, gify) (optional)
     - returns: RequestBuilder<[Report]> 
     */
    open class func getChatReportListWithRequestBuilder(uid: String, skip: Int? = nil, limit: Int? = nil, threadId: String? = nil, category: ReportCategory? = nil, status: ReportStatus? = nil, msgType: String? = nil) -> RequestBuilder<[Report]> {
        var localVariablePath = "/reports"
        let uidPreEscape = "\(APIHelper.mapValueToPathItem(uid))"
        let uidPostEscape = uidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uid}", with: uidPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "threadId": (wrappedValue: threadId?.encodeToJSON(), isExplode: true),
            "category": (wrappedValue: category?.encodeToJSON(), isExplode: true),
            "status": (wrappedValue: status?.encodeToJSON(), isExplode: true),
            "msgType": (wrappedValue: msgType?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Report]>.Type = InAppChatAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter chatReportId: (path) chat Report ID 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ignoreChatReport(chatReportId: String) async throws {
        return try await ignoreChatReportWithRequestBuilder(chatReportId: chatReportId).execute().body
    }

    /**
     - PUT /reports/{chatReportId}/ignore
     - Ignore Chat Report Action.
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter chatReportId: (path) chat Report ID 
     - returns: RequestBuilder<Void> 
     */
    open class func ignoreChatReportWithRequestBuilder(chatReportId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/reports/{chatReportId}/ignore"
        let chatReportIdPreEscape = "\(APIHelper.mapValueToPathItem(chatReportId))"
        let chatReportIdPostEscape = chatReportIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{chatReportId}", with: chatReportIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = InAppChatAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter chatReportId: (path) chat Report ID 
     - parameter createChatReport: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func updateChatReport(chatReportId: String, createChatReport: CreateChatReport) async throws {
        return try await updateChatReportWithRequestBuilder(chatReportId: chatReportId, createChatReport: createChatReport).execute().body
    }

    /**
     - PUT /reports/{chatReportId}
     - Update Chat Report.
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter chatReportId: (path) chat Report ID 
     - parameter createChatReport: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func updateChatReportWithRequestBuilder(chatReportId: String, createChatReport: CreateChatReport) -> RequestBuilder<Void> {
        var localVariablePath = "/reports/{chatReportId}"
        let chatReportIdPreEscape = "\(APIHelper.mapValueToPathItem(chatReportId))"
        let chatReportIdPostEscape = chatReportIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{chatReportId}", with: chatReportIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createChatReport)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = InAppChatAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
