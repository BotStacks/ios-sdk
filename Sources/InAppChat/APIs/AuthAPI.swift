//
// AuthAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AuthAPI {

    /**
     Verify User information
     
     - parameter auth0LoginInput: (body)  
     - returns: UserInfo
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func auth0Login(auth0LoginInput: Auth0LoginInput) async throws -> UserInfo {
        return try await auth0LoginWithRequestBuilder(auth0LoginInput: auth0LoginInput).execute().body
    }

    /**
     Verify User information
     - POST /auth/auth0/login
     - verify user information, device information
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - parameter auth0LoginInput: (body)  
     - returns: RequestBuilder<UserInfo> 
     */
    open class func auth0LoginWithRequestBuilder(auth0LoginInput: Auth0LoginInput) -> RequestBuilder<UserInfo> {
        let localVariablePath = "/auth/auth0/login"
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: auth0LoginInput)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserInfo>.Type = InAppChatAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Change Password
     
     - parameter loginPasswordInput: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func changePassword(loginPasswordInput: LoginPasswordInput) async throws {
        return try await changePasswordWithRequestBuilder(loginPasswordInput: loginPasswordInput).execute().body
    }

    /**
     Change Password
     - POST /auth/change-password
     - API to change user password
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - parameter loginPasswordInput: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func changePasswordWithRequestBuilder(loginPasswordInput: LoginPasswordInput) -> RequestBuilder<Void> {
        let localVariablePath = "/auth/change-password"
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: loginPasswordInput)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = InAppChatAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Logout
     
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func logout() async throws {
        return try await logoutWithRequestBuilder().execute().body
    }

    /**
     Logout
     - POST /logout
     - Logout
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - returns: RequestBuilder<Void> 
     */
    open class func logoutWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/logout"
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = InAppChatAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Logout
     
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func logoutOtherDevices() async throws {
        return try await logoutOtherDevicesWithRequestBuilder().execute().body
    }

    /**
     Logout
     - POST /logoutOtherDevices
     - logoutOtherDevices
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - returns: RequestBuilder<Void> 
     */
    open class func logoutOtherDevicesWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/logoutOtherDevices"
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = InAppChatAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     signup and login with NFT
     
     - parameter nFTLoginInput: (body) array of eRTCUserIds of invitees 
     - returns: Auth
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func nftLogin(nFTLoginInput: NFTLoginInput) async throws -> Auth {
        return try await nftLoginWithRequestBuilder(nFTLoginInput: nFTLoginInput).execute().body
    }

    /**
     signup and login with NFT
     - POST /auth/nft/login
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - parameter nFTLoginInput: (body) array of eRTCUserIds of invitees 
     - returns: RequestBuilder<Auth> 
     */
    open class func nftLoginWithRequestBuilder(nFTLoginInput: NFTLoginInput) -> RequestBuilder<Auth> {
        let localVariablePath = "/auth/nft/login"
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: nFTLoginInput)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Auth>.Type = InAppChatAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Forgot Password
     
     - parameter resetPasswordInput: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func resetPassword(resetPasswordInput: ResetPasswordInput) async throws {
        return try await resetPasswordWithRequestBuilder(resetPasswordInput: resetPasswordInput).execute().body
    }

    /**
     Forgot Password
     - POST /auth/reset-password
     - On calling this API, password gets reset and new password gets delivered on email
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - parameter resetPasswordInput: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func resetPasswordWithRequestBuilder(resetPasswordInput: ResetPasswordInput) -> RequestBuilder<Void> {
        let localVariablePath = "/auth/reset-password"
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: resetPasswordInput)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = InAppChatAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
