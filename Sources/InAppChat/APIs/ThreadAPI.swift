//
// ThreadAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ThreadAPI {

    /**
     Thread Creation API
     
     - parameter uid: (path) the user&#39;s id 
     - returns: APIThread
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func createThread(uid: String) async throws -> APIThread {
        return try await createThreadWithRequestBuilder(uid: uid).execute().body
    }

    /**
     Thread Creation API
     - POST /user/{uid}/thread
     - Get or Create Thread request before starting chat session with any user. This API is applicable for only one 2 one chat.
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter uid: (path) the user&#39;s id 
     - returns: RequestBuilder<APIThread> 
     */
    open class func createThreadWithRequestBuilder(uid: String) -> RequestBuilder<APIThread> {
        var localVariablePath = "/user/{uid}/thread"
        let uidPreEscape = "\(APIHelper.mapValueToPathItem(uid))"
        let uidPostEscape = uidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{uid}", with: uidPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<APIThread>.Type = InAppChatAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter gid: (path) Group ID 
     - returns: APIThread
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getGroupThread(gid: String) async throws -> APIThread {
        return try await getGroupThreadWithRequestBuilder(gid: gid).execute().body
    }

    /**
     - GET /group/{gid}/thread
     - Get a thread belonging to a group
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter gid: (path) Group ID 
     - returns: RequestBuilder<APIThread> 
     */
    open class func getGroupThreadWithRequestBuilder(gid: String) -> RequestBuilder<APIThread> {
        var localVariablePath = "/group/{gid}/thread"
        let gidPreEscape = "\(APIHelper.mapValueToPathItem(gid))"
        let gidPostEscape = gidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{gid}", with: gidPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<APIThread>.Type = InAppChatAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Thread Get API
     
     - parameter tid: (path) The Thread ID 
     - returns: APIThread
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getThread(tid: String) async throws -> APIThread {
        return try await getThreadWithRequestBuilder(tid: tid).execute().body
    }

    /**
     Thread Get API
     - GET /thread/{tid}
     - Get any existing thread
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter tid: (path) The Thread ID 
     - returns: RequestBuilder<APIThread> 
     */
    open class func getThreadWithRequestBuilder(tid: String) -> RequestBuilder<APIThread> {
        var localVariablePath = "/thread/{tid}"
        let tidPreEscape = "\(APIHelper.mapValueToPathItem(tid))"
        let tidPostEscape = tidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{tid}", with: tidPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<APIThread>.Type = InAppChatAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter threadType
     */
    public enum ThreadType_getThreads: String, CaseIterable {
        case single = "single"
        case group = "group"
    }

    /**
     Load thread history
     
     - parameter skip: (query) skip value for pagination. i.e. index. default 0 (optional, default to 0)
     - parameter limit: (query) limit value for pagination. i.e. page-size. default 10 (optional, default to 20)
     - parameter threadType: (query) threadType in-case specific type threads are needed. Don&#39;t provide this field if all threads to be returned in unified way. (optional)
     - returns: [APIThread]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getThreads(skip: Int? = nil, limit: Int? = nil, threadType: ThreadType_getThreads? = nil) async throws -> [APIThread] {
        return try await getThreadsWithRequestBuilder(skip: skip, limit: limit, threadType: threadType).execute().body
    }

    /**
     Load thread history
     - GET /threads
     - Load thread history
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter skip: (query) skip value for pagination. i.e. index. default 0 (optional, default to 0)
     - parameter limit: (query) limit value for pagination. i.e. page-size. default 10 (optional, default to 20)
     - parameter threadType: (query) threadType in-case specific type threads are needed. Don&#39;t provide this field if all threads to be returned in unified way. (optional)
     - returns: RequestBuilder<[APIThread]> 
     */
    open class func getThreadsWithRequestBuilder(skip: Int? = nil, limit: Int? = nil, threadType: ThreadType_getThreads? = nil) -> RequestBuilder<[APIThread]> {
        let localVariablePath = "/threads"
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "threadType": (wrappedValue: threadType?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[APIThread]>.Type = InAppChatAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Thread Update API
     
     - parameter tid: (path) The Thread ID 
     - parameter updateThreadInput: (body) Thread settings 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func updateThread(tid: String, updateThreadInput: UpdateThreadInput) async throws {
        return try await updateThreadWithRequestBuilder(tid: tid, updateThreadInput: updateThreadInput).execute().body
    }

    /**
     Thread Update API
     - PUT /thread/{tid}
     - Update any existing thread
     - API Key:
       - type: apiKey X-Device-ID (HEADER)
       - name: DeviceId
     - API Key:
       - type: apiKey X-API-Key (HEADER)
       - name: ApiKeyAuth
     - BASIC:
       - type: http
       - name: BearerAuth
     - parameter tid: (path) The Thread ID 
     - parameter updateThreadInput: (body) Thread settings 
     - returns: RequestBuilder<Void> 
     */
    open class func updateThreadWithRequestBuilder(tid: String, updateThreadInput: UpdateThreadInput) -> RequestBuilder<Void> {
        var localVariablePath = "/thread/{tid}"
        let tidPreEscape = "\(APIHelper.mapValueToPathItem(tid))"
        let tidPostEscape = tidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{tid}", with: tidPostEscape, options: .literal, range: nil)
        let localVariableURLString = InAppChatAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateThreadInput)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = InAppChatAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
