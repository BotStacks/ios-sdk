//
// LoginInput.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct LoginInput: Codable, JSONEncodable, Hashable {

    public enum LoginType: String, Codable, CaseIterable {
        case email = "email"
        case auth0 = "auth0"
    }
    public enum DeviceType: String, Codable, CaseIterable {
        case android = "android"
        case ios = "ios"
    }
    /** Type of login  like email/mobile/sso */
    public var loginType: LoginType
    /** User ID based on loginType */
    public var email: String
    /** A profile picture URL */
    public var picture: String?
    /** A display name */
    public var name: String?
    /** A nickname */
    public var nickname: String?
    /** Unique device id. For example, UDID for ios */
    public var deviceId: String
    /** Type of device i.e. android or ios. Allowed valies android/ios */
    public var deviceType: DeviceType?
    /** FCM regsitration token. Optional. */
    public var fcmToken: String?

    public init(loginType: LoginType, email: String, picture: String? = nil, name: String? = nil, nickname: String? = nil, deviceId: String, deviceType: DeviceType? = nil, fcmToken: String? = nil) {
        self.loginType = loginType
        self.email = email
        self.picture = picture
        self.name = name
        self.nickname = nickname
        self.deviceId = deviceId
        self.deviceType = deviceType
        self.fcmToken = fcmToken
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case loginType
        case email
        case picture
        case name
        case nickname
        case deviceId
        case deviceType
        case fcmToken
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(loginType, forKey: .loginType)
        try container.encode(email, forKey: .email)
        try container.encodeIfPresent(picture, forKey: .picture)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(nickname, forKey: .nickname)
        try container.encode(deviceId, forKey: .deviceId)
        try container.encodeIfPresent(deviceType, forKey: .deviceType)
        try container.encodeIfPresent(fcmToken, forKey: .fcmToken)
    }
}

