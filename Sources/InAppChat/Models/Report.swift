//
// Report.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Report: Codable, JSONEncodable, Hashable {

    /** Chat Report ID */
    public var chatReportId: String?
    /** Tenant Id */
    public var tenantId: String
    public var category: ReportCategory
    /** detailed reason for raising chat report */
    public var reason: String
    public var channelAdminStatus: ReportChannelAdminStatus
    public var tenantAdminStatus: ReportTenantAdminStatus
    public var reporterERTCUser: APIUser
    public var chat: APIMessage

    public init(chatReportId: String? = nil, tenantId: String, category: ReportCategory, reason: String, channelAdminStatus: ReportChannelAdminStatus, tenantAdminStatus: ReportTenantAdminStatus, reporterERTCUser: APIUser, chat: APIMessage) {
        self.chatReportId = chatReportId
        self.tenantId = tenantId
        self.category = category
        self.reason = reason
        self.channelAdminStatus = channelAdminStatus
        self.tenantAdminStatus = tenantAdminStatus
        self.reporterERTCUser = reporterERTCUser
        self.chat = chat
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case chatReportId
        case tenantId
        case category
        case reason
        case channelAdminStatus
        case tenantAdminStatus
        case reporterERTCUser
        case chat
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(chatReportId, forKey: .chatReportId)
        try container.encode(tenantId, forKey: .tenantId)
        try container.encode(category, forKey: .category)
        try container.encode(reason, forKey: .reason)
        try container.encode(channelAdminStatus, forKey: .channelAdminStatus)
        try container.encode(tenantAdminStatus, forKey: .tenantAdminStatus)
        try container.encode(reporterERTCUser, forKey: .reporterERTCUser)
        try container.encode(chat, forKey: .chat)
    }
}

