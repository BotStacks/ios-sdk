//
// APIGroup.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct APIGroup: Codable, JSONEncodable, Hashable {

    public enum GroupType: String, Codable, CaseIterable {
        case _public = "public"
        case _private = "private"
    }
    /** Group ID */
    public var groupId: String
    /** Group Name */
    public var name: String
    /** Type of group. for example privte/public. only private is supported as of now. */
    public var groupType: GroupType
    /** Description of group */
    public var description: String?
    /** Profile pic url. use chatServer URL as prefix to generate complete URL */
    public var profilePic: String?
    /** Profile pic thumbnail url. use chatServer URL as prefix to generate complete URL */
    public var profilePicThumb: String?
    /** Group creation epoch timeStamp */
    public var createdAt: Double
    /** appUserId of creator */
    public var creatorId: String?
    /** ThreadId associated with group. To be used for chat */
    public var threadId: String?
    /** List of participants */
    public var participants: [Participant]?

    public init(groupId: String, name: String, groupType: GroupType, description: String? = nil, profilePic: String? = nil, profilePicThumb: String? = nil, createdAt: Double, creatorId: String? = nil, threadId: String? = nil, participants: [Participant]? = nil) {
        self.groupId = groupId
        self.name = name
        self.groupType = groupType
        self.description = description
        self.profilePic = profilePic
        self.profilePicThumb = profilePicThumb
        self.createdAt = createdAt
        self.creatorId = creatorId
        self.threadId = threadId
        self.participants = participants
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case groupId
        case name
        case groupType
        case description
        case profilePic
        case profilePicThumb
        case createdAt
        case creatorId
        case threadId
        case participants
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(groupId, forKey: .groupId)
        try container.encode(name, forKey: .name)
        try container.encode(groupType, forKey: .groupType)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(profilePic, forKey: .profilePic)
        try container.encodeIfPresent(profilePicThumb, forKey: .profilePicThumb)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(creatorId, forKey: .creatorId)
        try container.encodeIfPresent(threadId, forKey: .threadId)
        try container.encodeIfPresent(participants, forKey: .participants)
    }
}

