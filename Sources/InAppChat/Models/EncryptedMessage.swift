//
// EncryptedMessage.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct EncryptedMessage: Codable, JSONEncodable, Hashable {

    /** Key identifier. */
    public var keyId: String
    /** Device identifier. */
    public var deviceId: String
    /** public Key of associated device */
    public var publicKey: String?
    /** user eRTCUserId. */
    public var eRTCUserId: String?
    /** encrypted message text. it can be present for any msgType value */
    public var message: String?
    /** encrypted stringified contact object. please check contactSchema for object value */
    public var contact: String?
    /** encrypted stringified location object. please check contactSchema for object value */
    public var location: String?
    /** gify URL */
    public var gify: String?
    /** encrypted media path URL */
    public var path: String?
    /** encrypted media thumbnail URL */
    public var thumbnail: String?

    public init(keyId: String, deviceId: String, publicKey: String? = nil, eRTCUserId: String? = nil, message: String? = nil, contact: String? = nil, location: String? = nil, gify: String? = nil, path: String? = nil, thumbnail: String? = nil) {
        self.keyId = keyId
        self.deviceId = deviceId
        self.publicKey = publicKey
        self.eRTCUserId = eRTCUserId
        self.message = message
        self.contact = contact
        self.location = location
        self.gify = gify
        self.path = path
        self.thumbnail = thumbnail
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case keyId
        case deviceId
        case publicKey
        case eRTCUserId
        case message
        case contact
        case location
        case gify
        case path
        case thumbnail
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(keyId, forKey: .keyId)
        try container.encode(deviceId, forKey: .deviceId)
        try container.encodeIfPresent(publicKey, forKey: .publicKey)
        try container.encodeIfPresent(eRTCUserId, forKey: .eRTCUserId)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(contact, forKey: .contact)
        try container.encodeIfPresent(location, forKey: .location)
        try container.encodeIfPresent(gify, forKey: .gify)
        try container.encodeIfPresent(path, forKey: .path)
        try container.encodeIfPresent(thumbnail, forKey: .thumbnail)
    }
}

