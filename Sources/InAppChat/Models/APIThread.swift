//
// APIThread.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct APIThread: Codable, JSONEncodable, Hashable {

    public enum ThreadType: String, Codable, CaseIterable {
        case string = "string"
        case group = "group"
    }
    /** Thread ID */
    public var threadId: String
    /** Type of thread - single/group */
    public var threadType: ThreadType
    /** Therad object creation time */
    public var createdAt: Double
    /** array of read timestamps */
    public var participants: [APIUser]
    public var user: APIUser?
    public var group: APIGroup?
    public var lastMessage: APIMessage?
    public var e2eEncryptionKeys: [EncryptionKey]?

    public init(threadId: String, threadType: ThreadType, createdAt: Double, participants: [APIUser], user: APIUser? = nil, group: APIGroup? = nil, lastMessage: APIMessage? = nil, e2eEncryptionKeys: [EncryptionKey]? = nil) {
        self.threadId = threadId
        self.threadType = threadType
        self.createdAt = createdAt
        self.participants = participants
        self.user = user
        self.group = group
        self.lastMessage = lastMessage
        self.e2eEncryptionKeys = e2eEncryptionKeys
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case threadId
        case threadType
        case createdAt
        case participants
        case user
        case group
        case lastMessage
        case e2eEncryptionKeys
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(threadId, forKey: .threadId)
        try container.encode(threadType, forKey: .threadType)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(participants, forKey: .participants)
        try container.encodeIfPresent(user, forKey: .user)
        try container.encodeIfPresent(group, forKey: .group)
        try container.encodeIfPresent(lastMessage, forKey: .lastMessage)
        try container.encodeIfPresent(e2eEncryptionKeys, forKey: .e2eEncryptionKeys)
    }
}

