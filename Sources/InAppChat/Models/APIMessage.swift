//
// APIMessage.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct APIMessage: Codable, JSONEncodable, Hashable {

    public enum ChatReportStatus: String, Codable, CaseIterable {
        case new = "new"
        case reportconsidered = "reportConsidered"
        case reportignored = "reportIgnored"
    }
    /** Unique identified of chat object generated by server */
    public var msgUniqueId: String
    /** message text. it can be present for any msgType value */
    public var message: String?
    public var msgType: MessageType?
    public var contact: Contact?
    public var location: Location?
    public var media: Media?
    /** gify URL */
    public var gify: String?
    /** sender eRTCUserId */
    public var sendereRTCUserId: String
    /** Chat object creation epoch time in miliseconds */
    public var createdAt: String
    public var replyThreadFeatureData: Reply?
    public var forwardChatFeatureData: Forward?
    /** list of reactions */
    public var reactions: [Reaction]?
    /** If chat message is starred */
    public var isEdited: Bool?
    /** If chat is starred */
    public var isStarred: Bool?
    /** Only present on base message when user is following thread */
    public var follow: Bool?
    /** If message is reported then it will contain chat report id */
    public var chatReportId: String?
    /** Tell status of chat report, possible values are new, reportConsidered and reportIgnored */
    public var chatReportStatus: ChatReportStatus?
    public var mentions: [Mention]?
    /** JSON object which can be used for customer specific data which is not supported in InAppChat chat model. eg. { \"abc\" : \"def\" } */
    public var customData: [String: AnyCodable]?
    /** When the message will automatically be deleted if it was send when disappearing message option was on */
    public var deleteScheduleAt: String?
    /** The number of replies to this message */
    public var replyMsgCount: Int?
    /** The ID of the thread this message belongs to */
    public var threadId: String
    public var replies: [APIMessage]?
    public var encryptedChatList: [EncryptedMessage]?
    public var status: MessageStatus?

    public init(msgUniqueId: String, message: String? = nil, msgType: MessageType? = nil, contact: Contact? = nil, location: Location? = nil, media: Media? = nil, gify: String? = nil, sendereRTCUserId: String, createdAt: String, replyThreadFeatureData: Reply? = nil, forwardChatFeatureData: Forward? = nil, reactions: [Reaction]? = nil, isEdited: Bool? = nil, isStarred: Bool? = nil, follow: Bool? = nil, chatReportId: String? = nil, chatReportStatus: ChatReportStatus? = nil, mentions: [Mention]? = nil, customData: [String: AnyCodable]? = nil, deleteScheduleAt: String? = nil, replyMsgCount: Int? = nil, threadId: String, replies: [APIMessage]? = nil, encryptedChatList: [EncryptedMessage]? = nil, status: MessageStatus? = nil) {
        self.msgUniqueId = msgUniqueId
        self.message = message
        self.msgType = msgType
        self.contact = contact
        self.location = location
        self.media = media
        self.gify = gify
        self.sendereRTCUserId = sendereRTCUserId
        self.createdAt = createdAt
        self.replyThreadFeatureData = replyThreadFeatureData
        self.forwardChatFeatureData = forwardChatFeatureData
        self.reactions = reactions
        self.isEdited = isEdited
        self.isStarred = isStarred
        self.follow = follow
        self.chatReportId = chatReportId
        self.chatReportStatus = chatReportStatus
        self.mentions = mentions
        self.customData = customData
        self.deleteScheduleAt = deleteScheduleAt
        self.replyMsgCount = replyMsgCount
        self.threadId = threadId
        self.replies = replies
        self.encryptedChatList = encryptedChatList
        self.status = status
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case msgUniqueId
        case message
        case msgType
        case contact
        case location
        case media
        case gify
        case sendereRTCUserId
        case createdAt
        case replyThreadFeatureData
        case forwardChatFeatureData
        case reactions
        case isEdited
        case isStarred
        case follow
        case chatReportId
        case chatReportStatus
        case mentions
        case customData
        case deleteScheduleAt
        case replyMsgCount
        case threadId
        case replies
        case encryptedChatList
        case status
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(msgUniqueId, forKey: .msgUniqueId)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(msgType, forKey: .msgType)
        try container.encodeIfPresent(contact, forKey: .contact)
        try container.encodeIfPresent(location, forKey: .location)
        try container.encodeIfPresent(media, forKey: .media)
        try container.encodeIfPresent(gify, forKey: .gify)
        try container.encode(sendereRTCUserId, forKey: .sendereRTCUserId)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(replyThreadFeatureData, forKey: .replyThreadFeatureData)
        try container.encodeIfPresent(forwardChatFeatureData, forKey: .forwardChatFeatureData)
        try container.encodeIfPresent(reactions, forKey: .reactions)
        try container.encodeIfPresent(isEdited, forKey: .isEdited)
        try container.encodeIfPresent(isStarred, forKey: .isStarred)
        try container.encodeIfPresent(follow, forKey: .follow)
        try container.encodeIfPresent(chatReportId, forKey: .chatReportId)
        try container.encodeIfPresent(chatReportStatus, forKey: .chatReportStatus)
        try container.encodeIfPresent(mentions, forKey: .mentions)
        try container.encodeIfPresent(customData, forKey: .customData)
        try container.encodeIfPresent(deleteScheduleAt, forKey: .deleteScheduleAt)
        try container.encodeIfPresent(replyMsgCount, forKey: .replyMsgCount)
        try container.encode(threadId, forKey: .threadId)
        try container.encodeIfPresent(replies, forKey: .replies)
        try container.encodeIfPresent(encryptedChatList, forKey: .encryptedChatList)
        try container.encodeIfPresent(status, forKey: .status)
    }
}

