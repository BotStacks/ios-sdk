//
// UserSelfUpdateEventData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UserSelfUpdateEventData: Codable, JSONEncodable, Hashable {

    public enum BlockedStatus: String, Codable, CaseIterable {
        case blocked = "blocked"
        case unblocked = "unblocked"
    }
    /** Optional. Thread id only applicable for notificationSettingsChangedThread */
    public var threadId: String?
    public var notificationSettings: NotificationSettings?
    public var availabilityStatus: AvailabilityStatus?
    /** Optional. Only applicable for userBlockedStatusChanged. Blocked status i.e. blocked/unblocked */
    public var blockedStatus: BlockedStatus?
    public var targetUser: APIUser?

    public init(threadId: String? = nil, notificationSettings: NotificationSettings? = nil, availabilityStatus: AvailabilityStatus? = nil, blockedStatus: BlockedStatus? = nil, targetUser: APIUser? = nil) {
        self.threadId = threadId
        self.notificationSettings = notificationSettings
        self.availabilityStatus = availabilityStatus
        self.blockedStatus = blockedStatus
        self.targetUser = targetUser
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case threadId
        case notificationSettings
        case availabilityStatus
        case blockedStatus
        case targetUser
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(threadId, forKey: .threadId)
        try container.encodeIfPresent(notificationSettings, forKey: .notificationSettings)
        try container.encodeIfPresent(availabilityStatus, forKey: .availabilityStatus)
        try container.encodeIfPresent(blockedStatus, forKey: .blockedStatus)
        try container.encodeIfPresent(targetUser, forKey: .targetUser)
    }
}

