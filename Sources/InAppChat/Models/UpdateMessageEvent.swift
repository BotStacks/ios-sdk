//
// UpdateMessageEvent.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Chat update notification. It can be used for delete, edit etc. FCM event name - chatUpdate, MQTT Topic - chatUpdate:&lt;clientId&gt; */
public struct UpdateMessageEvent: Codable, JSONEncodable, Hashable {

    public enum UpdateType: String, Codable, CaseIterable {
        case delete = "delete"
        case edit = "edit"
    }
    public enum DeleteType: String, Codable, CaseIterable {
        case _self = "self"
        case everyone = "everyone"
    }
    /** User unique Identifier */
    public var eRTCUserId: String
    /** Chat unique Identifier */
    public var msgUniqueId: String
    /** Type of update.  */
    public var updateType: UpdateType
    /** in case of delete updateType, it specifies sub-type of delete such as self/everyone */
    public var deleteType: DeleteType

    public init(eRTCUserId: String, msgUniqueId: String, updateType: UpdateType, deleteType: DeleteType) {
        self.eRTCUserId = eRTCUserId
        self.msgUniqueId = msgUniqueId
        self.updateType = updateType
        self.deleteType = deleteType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case eRTCUserId
        case msgUniqueId
        case updateType
        case deleteType
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(eRTCUserId, forKey: .eRTCUserId)
        try container.encode(msgUniqueId, forKey: .msgUniqueId)
        try container.encode(updateType, forKey: .updateType)
        try container.encode(deleteType, forKey: .deleteType)
    }
}

