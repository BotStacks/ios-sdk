//
// UpdateUserInput.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UpdateUserInput: Codable, JSONEncodable, Hashable {

    /** FCM regsitration token. Optional. */
    public var fcmToken: String?
    /** FCM Version. Optional. default value is f1 */
    public var fcmVersion: String?
    /** The APN push token */
    public var apnsToken: String?
    public var availabilityStatus: AvailabilityStatus?
    public var notificationSettings: NotificationSettings?
    /** Display name for user */
    public var displayName: String?
    /** username. min length of 5 char */
    public var username: String?
    /** e164 format phone number */
    public var phoneNumber: String?

    public init(fcmToken: String? = nil, fcmVersion: String? = nil, apnsToken: String? = nil, availabilityStatus: AvailabilityStatus? = nil, notificationSettings: NotificationSettings? = nil, displayName: String? = nil, username: String? = nil, phoneNumber: String? = nil) {
        self.fcmToken = fcmToken
        self.fcmVersion = fcmVersion
        self.apnsToken = apnsToken
        self.availabilityStatus = availabilityStatus
        self.notificationSettings = notificationSettings
        self.displayName = displayName
        self.username = username
        self.phoneNumber = phoneNumber
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fcmToken
        case fcmVersion
        case apnsToken
        case availabilityStatus
        case notificationSettings
        case displayName
        case username
        case phoneNumber
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(fcmToken, forKey: .fcmToken)
        try container.encodeIfPresent(fcmVersion, forKey: .fcmVersion)
        try container.encodeIfPresent(apnsToken, forKey: .apnsToken)
        try container.encodeIfPresent(availabilityStatus, forKey: .availabilityStatus)
        try container.encodeIfPresent(notificationSettings, forKey: .notificationSettings)
        try container.encodeIfPresent(displayName, forKey: .displayName)
        try container.encodeIfPresent(username, forKey: .username)
        try container.encodeIfPresent(phoneNumber, forKey: .phoneNumber)
    }
}

