openapi: '3.0.0'
info:
  version: '3.0.0'
  title: InAppChat
  description: APIs for InAppChat
servers:
  - url: https://chat.inappchat.io/v3
    description: Production
  - url: https://chat-qa.inappchat.io/v3
    description: QA
  - url: https://chat-dev.inappchat.io/v3
    description: Dev
  - url: https://socket-dev.inappchat.io/v3
    description: Dev-socket
security:
  - ApiKeyAuth: []
  - BearerAuth: []
  - DeviceId: []
paths:
  /auth/nft/login:
    post:
      operationId: nftLogin
      tags:
        - Auth
      summary: 'signup and login with NFT'
      security:
        - ApiKeyAuth: []
        - DeviceId: []
      requestBody:
        required: true
        description: 'array of eRTCUserIds of invitees'
        content:
          application/json:
            schema:
              type: object
              title: NFTLoginInput
              properties:
                address:
                  type: string
                  description: wallet address of user
                contract:
                  type: string
                  description: contract address of NFT
                signature:
                  type: string
                  description: user wallet signature
                tokenID:
                  type: string
                  description: token ID of NFT
                username:
                  type: string
                profilePicture:
                  type: string
                  description: The image to use as the user's profile picture
              required:
                - address
                - contract
                - signature
                - tokenID
      responses:
        200:
          $ref: '#/components/responses/auth'
  /group/{gid}/invite:
    post:
      operationId: inviteUser
      tags:
        - Group
      summary: create group invitation
      description: 'Invite new participant to group'
      parameters:
        - $ref: '#/components/parameters/gidPath'
      requestBody:
        required: true
        description: 'array of user ids to invite'
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
              example: ['63c98d7dc728e2c6121d1a6d', '63d1ad3660a3a634efe40731']
      responses:
        204:
          description: 'no content'
  /group/{gid}/invites/dismiss:
    post:
      operationId: dismissGroupInvite
      tags:
        - Group
      summary: dismiss group invitation
      description: 'Dissmiss group invitation'
      parameters:
        - $ref: '#/components/parameters/gidPath'
      responses:
        204:
          description: 'no content'
  /group/{gid}/invites/accept:
    post:
      operationId: acceptGroupInvite
      tags:
        - Group
      summary: accept group invitation
      description: 'Accept group invitation'
      parameters:
        - $ref: '#/components/parameters/gidPath'
      responses:
        200:
          description: the thread the user has joined
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIThread'
  /group/invites:
    get:
      operationId: getInvites
      tags:
        - Group
      summary: get group invitation
      description: 'Get group invitations for user'
      responses:
        200:
          description: 'Group invitation data'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Invite'
  /user/{uid}:
    parameters:
      - $ref: '#/components/parameters/uidPath'
    get:
      operationId: getUser
      description: Get a user
      tags:
        - User
      responses:
        200:
          description: The user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIUser'
  /me:
    get:
      description: Get current user
      operationId: me
      tags:
        - User
      responses:
        '200':
          description: The user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIUser'
    post:
      tags:
        - User
      description: Update current user
      operationId: updateMe
      requestBody:
        description: User properties to update with
        required: true
        content:
          application/json:
            schema:
              title: UpdateUserInput
              type: object
              properties:
                fcmToken:
                  description: FCM regsitration token. Optional.
                  type: string
                  example: bk3RNwTe3H0:CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1
                fcmVersion:
                  description: FCM Version. Optional. default value is f1
                  type: string
                  example: 'f2'
                apnsToken:
                  description: The APN push token
                  type: string
                availabilityStatus:
                  $ref: '#/components/schemas/AvailabilityStatus'
                notificationSettings:
                  $ref: '#/components/schemas/NotificationSettings'
                displayName:
                  type: string
                  description: 'Display name for user'
                username:
                  type: string
                  description: 'username. min length of 5 char'
                phoneNumber:
                  type: string
                  description: e164 format phone number
      responses:
        200:
          description: 'The User'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIUser'
  /user/{uid}/messages:
    parameters:
      - $ref: '#/components/parameters/uidPath'
    get:
      operationId: getUserMessages
      parameters:
        - $ref: '#/components/parameters/skipQuery'
        - $ref: '#/components/parameters/limitQuery'
        - in: query
          name: msgType
          schema:
            $ref: '#/components/schemas/MessageType'
          required: false
          description: Filters message by
        - $ref: '#/components/parameters/directionQuery'
      responses:
        '200':
          description: The users recent messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/APIMessage'
  /logout:
    post:
      tags:
        - Auth
      summary: Logout
      description: Logout
      operationId: logout
      responses:
        204:
          description: Logout successful
  /logoutOtherDevices:
    post:
      tags:
        - Auth
      summary: Logout
      description: 'logoutOtherDevices'
      operationId: logoutOtherDevices
      responses:
        204:
          description: logout successful
  /token/refresh:
    get:
      tags:
        - User
      summary: Refresh auth token
      description: 'Refresh auth token'
      operationId: RefreshAuthToken
      parameters:
        - $ref: '#/components/parameters/uidPath'
      responses:
        200:
          description: 'Refreshed token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
  /blocks/{uid}:
    parameters:
      - $ref: '#/components/parameters/uidPath'
    put:
      operationId: blockUser
      summary: Block a user
      description: Block a user
      tags:
        - User
      responses:
        204:
          description: Operation completed successfully
    delete:
      operationId: unblockUser
      tags:
        - User
      summary: Unblock a user
      description: Unblock a user
      responses:
        204:
          description: Operation completed successfully
  /blocks:
    get:
      tags:
        - User
      summary: Get blocked users
      description: Get blocked users
      operationId: getBlockedUsers
      responses:
        200:
          description: 'Blocked user list'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/APIUser'
  /events:
    get:
      tags:
        - User
      description: Get pending events for particular device
      operationId: getPendingEvents
      responses:
        200:
          description: 'Pending event list'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
  /resetBadgeCount:
    get:
      tags:
        - User
      summary: reset notification badge count
      description: reset badge count
      operationId: resetBadgeCount
      responses:
        204:
          description: Operation completed successfully
  /draft:
    post:
      tags:
        - Draft
      summary: Draft API
      description: 'Send chat over a thread'
      operationId: updateDraft
      requestBody:
        required: true
        content:
          multipart/form-data:
            encoding:
              mentions:
                contentType: application/json
              forwardChatFeatureData:
                contentType: application/json
              replyThreadFeatureData:
                contentType: application/json
              location:
                contentType: application/json
              contact:
                contentType: application/json
              encryptedChatList:
                contentType: application/json
              customData:
                contentType: application/json
              metadata:
                contentType: application/json
              senderKeyDetails:
                contentType: application/json
              media:
                contentType: application/json
            schema:
              $ref: '#/components/schemas/MessageInput'
      responses:
        200:
          description: 'The message'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIMessage'
    get:
      tags:
        - Draft
      summary: Draft API
      description: 'Send chat over a thread'
      operationId: GetDrafts
      parameters:
        - name: threadId
          in: query
          description: 'Get draft for a particular thread'
          required: false
          schema:
            type: string
        - name: baseMsgUniqueId
          in: query
          description: 'Get thread for a reply thread, this is base message id'
          required: false
          schema:
            type: string
      responses:
        200:
          description: The draft
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIMessage'
        204:
          description: No draft
  /message:
    post:
      tags:
        - Chat
      summary: Send a chat message
      description: Send a chat message
      operationId: sendMessage
      requestBody:
        required: true
        content:
          multipart/form-data:
            encoding:
              mentions:
                contentType: application/json
              forwardChatFeatureData:
                contentType: application/json
              replyThreadFeatureData:
                contentType: application/json
              location:
                contentType: application/json
              contact:
                contentType: application/json
              encryptedChatList:
                contentType: application/json
              customData:
                contentType: application/json
              metadata:
                contentType: application/json
              senderKeyDetails:
                contentType: application/json
              media:
                contentType: application/json
            schema:
              $ref: '#/components/schemas/MessageInput'
      responses:
        200:
          description: 'The message'
          content:
            application/json:
              schema:
                type: object
                title: MessageResponse
                properties:
                  message:
                    $ref: '#/components/schemas/APIMessage'
                  status:
                    type: object
                    title: ChatStatus
                    properties:
                      returnCode:
                        $ref: '#/components/schemas/SenderReturnCode'
                      retryRequired:
                        type: boolean
                      keyList:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/EncryptionKey'
                            - type: object
                              title: ReturnCode
                              properties:
                                returnCode:
                                  $ref: '#/components/schemas/ReceiverReturnCode'
                    required:
                      - returnCode
                      - retryRequired
                      - keyList
                required:
                  - status
  /message/{mid}:
    parameters:
      - $ref: '#/components/parameters/midPath'
    get:
      operationId: getMessage
      description: Get a single message
      tags:
        - Chat
      responses:
        '200':
          description: The message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIMessage'
    delete:
      tags:
        - Chat
      summary: Delete Message API
      description: Delete particular message
      operationId: deleteMessage
      responses:
        204:
          description: Operation completed successfully
    put:
      tags:
        - Chat
      summary: Edit Message API
      description: 'Edit particular message'
      operationId: updateMessage
      requestBody:
        description: edit chat body
        required: true
        content:
          application/json:
            schema:
              type: object
              title: UpdateMessageInput
              properties:
                message:
                  description: 'message text. it can be present for any msgType value'
                  type: string
                  example: 'hello123'
                isStarred:
                  description: 'If message is starred'
                  type: boolean
                  example: true
                follow:
                  description: 'Follow/unfollow thread'
                  type: boolean
                  example: true
                status:
                  $ref: '#/components/schemas/MessageStatus'
      responses:
        204:
          description: Operation completed successfully
  /message/{mid}/reactions/{emoji}:
    parameters:
      - $ref: '#/components/parameters/midPath'
      - in: path
        name: emoji
        required: true
        description: The emoji to react with
        schema:
          type: string
    put:
      operationId: react
      tags:
        - Chat
      summary: Chat Reaction API
      description: Send message reaction
      responses:
        204:
          description: Operation completed successfully
    delete:
      operationId: unreact
      tags:
        - Chat
      description: Remove a message reaction
      responses:
        204:
          description: Operation completed successfully
  /thread/{tid}/messages:
    parameters:
      - $ref: '#/components/parameters/tidPath'
    get:
      operationId: getMessages
      description: List messages in any chat
      summary: Load chat history
      tags:
        - Chat
      parameters:
        - name: msgType
          in: query
          schema:
            type: string
          description: 'Msg type, stringified array Example ["text"."gif"]'
        - name: currentMsgId
          in: query
          schema:
            type: string
          description: THe message ID to paginate after or before
        - $ref: '#/components/parameters/directionQuery'
        - name: dateFrom
          in: query
          schema:
            type: string
          description: 'ISO string of start date'
        - name: dateTo
          in: query
          schema:
            type: string
          description: 'ISO string of end date'
        - name: pageSize
          in: query
          schema:
            type: integer
          description: 'page size for pagination'
        - name: inReplyTo
          in: query
          schema:
            type: string
          description: The ID of the message to list replies for
        - name: deep
          in: query
          schema:
            type: boolean
          description: 'When true it returns messages from threads and main window both'
      responses:
        '200':
          description: 'Thread history response'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/APIMessage'
    delete:
      operationId: deleteChatHistory
      description: 'Clear chat history'
      summary: Load chat history
      tags:
        - Chat
      responses:
        '204':
          description: Operation completed successfully
  '/reply-threads':
    get:
      description: List messages with reply threads
      summary: List reply threads
      tags:
        - Chat
      operationId: getReplyThreads
      parameters:
        - name: threadId
          in: query
          required: false
          schema:
            type: string
          description: 'Thread ID'
        - name: follow
          in: query
          required: false
          schema:
            type: boolean
          description: 'To get all threads user following, just send true'
        - name: starred
          in: query
          required: false
          schema:
            type: boolean
          description: 'To get all starred messages, just send true'
        - $ref: '#/components/parameters/limitQuery'
        - $ref: '#/components/parameters/skipQuery'
        - $ref: '#/components/parameters/directionQuery'
        - name: deep
          in: query
          schema:
            type: boolean
            default: true
          description: 'When true it returns messages from threads and main window both'
      responses:
        '200':
          description: 'Reply thread history response'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/APIMessage'
  /search:
    post:
      tags:
        - Search
      summary: Unified search API
      description: One stop for all search APIs, can be used to search files, messages or groups.
      operationId: search
      parameters:
        - $ref: '#/components/parameters/skipQuery'
        - $ref: '#/components/parameters/limitQuery'
      requestBody:
        description: Chat multiple request
        required: true
        content:
          application/json:
            schema:
              title: SearchInput
              type: object
              properties:
                searchQuery:
                  type: object
                  title: SearchQuery
                  properties:
                    text:
                      description: Query string
                      type: string
                      example: 'abc'
                    threadId:
                      description: 'Thread Id if search target is particular thread. optional.'
                      type: string
                      example: '5ede69893c2954edcfa0b5f7'
                    channelQuery:
                      type: object
                      title: ChannelQuery
                      properties:
                        joined:
                          description: 'Get groups user have joined'
                          type: boolean
                          example: true
                        groupType:
                          description: 'Public or private group'
                          type: string
                          example: 'private'
                          enum: ['public', 'private']
                resultCategories:
                  description: 'Result category list'
                  type: array
                  items:
                    description: 'Result category string'
                    type: string
                    example: 'messages, files'
                    enum: ['messages', 'files', 'channels']
                  required:
                    - text
              required:
                - searchQuery
      responses:
        200:
          description: The search results
          content:
            application/json:
              schema:
                type: object
                title: SearchResults
                properties:
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/APIMessage'
                  files:
                    type: array
                    items:
                      $ref: '#/components/schemas/APIMessage'
                  channels:
                    type: array
                    items:
                      $ref: '#/components/schemas/APIGroup'
  /user/{uid}/thread:
    parameters:
      - $ref: '#/components/parameters/uidPath'
    post:
      operationId: createThread
      tags:
        - Thread
      summary: Thread Creation API
      description: 'Get or Create Thread request before starting chat session with any user. This API is applicable for only one 2 one chat.'
      responses:
        200:
          description: 'Thread data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIThread'
  /thread/{tid}:
    parameters:
      - $ref: '#/components/parameters/tidPath'
    put:
      operationId: updateThread
      tags:
        - Thread
      summary: Thread Update API
      description: Update any existing thread
      requestBody:
        description: Thread settings
        required: true
        content:
          application/json:
            schema:
              title: UpdateThreadInput
              type: object
              properties:
                notificationSettings:
                  $ref: '#/components/schemas/NotificationSettings'
                autoDeleteSetting:
                  $ref: '#/components/schemas/AutoDeleteSettings'
      responses:
        204:
          description: Operation completed successfully
    get:
      tags:
        - Thread
      summary: Thread Get API
      description: 'Get any existing thread'
      operationId: getThread
      parameters:
        - $ref: '#/components/parameters/tidPath'
      responses:
        200:
          description: 'Thread data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIThread'
  /threads:
    get:
      operationId: getThreads
      description: 'Load thread history'
      summary: Load thread history
      tags:
        - Thread
      parameters:
        - $ref: '#/components/parameters/skipQuery'
        - $ref: '#/components/parameters/limitQuery'
        - name: threadType
          in: query
          schema:
            type: string
            enum: [single, group]
          description: threadType in-case specific type threads are needed. Don't provide this field if all threads to be returned in unified way.
      responses:
        200:
          description: 'Thread history response'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/APIThread'
  /groups:
    post:
      operationId: createGroup
      description: Create a group. For profilePic use multipart/formdata and in this case stringify participants list.
      summary: Create or Update group
      tags:
        - Group
      requestBody:
        required: true
        content:
          multipart/form-data:
            encoding:
              participants:
                contentType: application/json
            schema:
              type: object
              title: CreateGroupInput
              properties:
                name:
                  description: 'Group Name'
                  type: string
                  example: 'ABC'
                groupType:
                  description: 'Type of group. for example privte/public. only private is supported as of now.'
                  type: string
                  enum: [public, private]
                  example: 'private'
                description:
                  description: 'Description of group. Optional. Min length 2.'
                  type: string
                  example: 'This is ABC'
                participants:
                  description: 'List of participants'
                  type: array
                  items:
                    type: string
                    example: 'abc@ertc.com'
                profilePic:
                  type: string
                  format: binary
                  description: The image for the group
              required:
                - name
                - participants
      responses:
        '200':
          description: 'The Group'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIGroup'
    get:
      description: 'Get groups where user is participant or group is public'
      summary: Get user groups
      tags:
        - Group
      operationId: getGroups
      parameters:
        - $ref: '#/components/parameters/limitQuery'
        - $ref: '#/components/parameters/skipQuery'
        - name: groupType
          in: query
          required: false
          schema:
            type: string
            enum: ['public', 'private']
          description: 'Filter by group type'
        - name: joined
          in: query
          schema:
            type: string
            enum: ['yes', 'no']
          required: false
          description: 'Get only joined/not joined groups'
      responses:
        '200':
          description: 'Get group response'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/APIGroup'
  /group/{gid}/participants/{uid}:
    parameters:
      - $ref: '#/components/parameters/gidPath'
      - $ref: '#/components/parameters/uidPath'
    put:
      operationId: addParticipant
      description: 'Add participant to group'
      summary: Add participant to group
      tags:
        - Group
      responses:
        '204':
          description: The operation completed successfully
    delete:
      operationId: removeParticipant
      description: Remove participant from group
      summary: Remove participant from group
      tags:
        - Group
      responses:
        '204':
          description: The operation completed successfully
  /group/{gid}/image:
    delete:
      operationId: removeGroupImage
      description: Remove group profile pic
      summary: Remove group profile pic
      tags:
        - Group
      parameters:
        - $ref: '#/components/parameters/gidPath'
      responses:
        204:
          description: Operation completed successfully
  /group/{gid}:
    parameters:
      - $ref: '#/components/parameters/gidPath'
    get:
      operationId: getGroup
      description: 'Get group by groupId'
      summary: Get group by groupId
      tags:
        - Group
      responses:
        200:
          description: The Group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIGroup'
    delete:
      operationId: deleteGroup
      description: Delete a group
      tags:
        - Group
      responses:
        204:
          description: The operation completed successfully
    put:
      operationId: updateGroup
      description: Update a group
      tags:
        - Group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: UpdateGroupInput
              properties:
                name:
                  description: 'Group Name'
                  type: string
                  example: 'ABC'
                groupType:
                  description: 'Type of group. for example privte/public. only private is supported as of now.'
                  type: string
                  enum: [public, private]
                  example: 'private'
                description:
                  description: 'Description of group. Optional. Min length 2.'
                  type: string
                  example: 'This is ABC'
                profilePic:
                  type: string
                  format: binary
                  description: The image for the group
      responses:
        '200':
          description: The Group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIGroup'
  /group/{gid}/admin/{uid}:
    parameters:
      - $ref: '#/components/parameters/uidPath'
      - $ref: '#/components/parameters/gidPath'
    put:
      operationId: groupAddAdmin
      description: Make a user an admin
      summary: Make a user an admin
      tags:
        - Group
      responses:
        204:
          description: The operation completed successfully
    delete:
      operationId: groupDismissAdmin
      description: Dismiss a group admin
      summary: Dismiss a group admin
      tags:
        - Group
      responses:
        204:
          description: The oepration completed successfully
  /group/{gid}/thread:
    parameters:
      - $ref: '#/components/parameters/gidPath'
    get:
      operationId: getGroupThread
      description: Get a thread belonging to a group
      tags:
        - Thread
      responses:
        '200':
          description: The thread
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIThread'
  /group/{gid}/moderate:
    post:
      tags:
        - Group
      description: Moderate a group. Ban or mute users
      operationId: moderateGroup
      parameters:
        - $ref: '#/components/parameters/gidPath'
      requestBody:
        description: Unique AppID of the user to get
        required: true
        content:
          application/json:
            schema:
              title: ModerateGroupInput
              type: object
              properties:
                participants:
                  type: array
                  items:
                    type: string
                    example: 'iacu2@yopmail.com'
                type:
                  type: string
                  enum: ['ban', 'mute', 'unmute', 'unban']
                  example: 'ban'
                till:
                  type: string
                  example: '2021-06-14T14:02:03.527Z'
              required:
                - participants
                - type
      responses:
        204:
          description: The operation completed successfully
  /fcmValidation:
    post:
      tags:
        - FCM
      summary: FCM Validation
      description: 'Endpoint to just validate FCM notification by App teams'
      operationId: FCMValidationPost
      requestBody:
        description: Unique AppID of the user to get
        required: true
        content:
          application/json:
            schema:
              title: FCMValidationInput
              type: object
              properties:
                fcmToken:
                  description: 'FCM Token'
                  type: string
                  example: 'cBh9QAuXhDI:APA91bEo7bXbiSoNmCzhm6rF_sLnReJkSbIt0PR_NWtaG0PNWI_mPZyFnIfWZP-sx-_7HNbgnrTIlIGV4fsC8xEqkLijFmTYKrJSpSHYK_Gnr5CLx5Rmwz9X7CciL7v7B8IO5Yu3Cn9O'
                payload:
                  description: 'Refer https://firebase.google.com/docs/reference/admin/node/admin.messaging.Messaging#sendToDevice for possible values'
                  type: object
                options:
                  description: 'Refer https://firebase.google.com/docs/reference/admin/node/admin.messaging.Messaging#sendToDevice for possible values'
                  type: object
              required:
                - fcmToken
                - payload
      responses:
        200:
          description: 'Thread data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIThread'
  /message/{mid}/replies:
    parameters:
      - $ref: '#/components/parameters/midPath'
    get:
      operationId: getReplies
      description: Get replies to a message
      tags:
        - Chat
      parameters:
        - $ref: '#/components/parameters/skipQuery'
        - $ref: '#/components/parameters/limitQuery'
      responses:
        '200':
          description: The replies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/APIMessage'
  /message/{mid}/report:
    parameters:
      - $ref: '#/components/parameters/midPath'
    post:
      operationId: createChatReport
      description: Create Chat Report.
      tags:
        - Chat Report
      requestBody:
        $ref: '#/components/requestBodies/ChatReport'
      responses:
        '200':
          description: The report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
  /reports:
    get:
      operationId: getChatReportList
      description: 'Get Chat Report List.'
      summary: Get Chat Report List
      tags:
        - Chat Report
      parameters:
        - $ref: '#/components/parameters/uidPath'
        - $ref: '#/components/parameters/skipQuery'
        - $ref: '#/components/parameters/limitQuery'
        - name: threadId
          in: query
          required: false
          schema:
            type: string
          description: 'thread ID to filter chat Reports'
        - name: category
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ReportCategory'
        - name: status
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ReportStatus'
        - name: msgType
          in: query
          required: false
          schema:
            type: string
          description: 'chat report msgType to filter chat Reports(Possible values : text, image, audio, video, file, gif, location, contact, sticker, gify)'
      responses:
        '200':
          description: 'Get Chat Report List Response'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'
  /reports/{chatReportId}:
    parameters:
      - $ref: '#/components/parameters/chatReportIdPath'
    put:
      operationId: updateChatReport
      description: 'Update Chat Report.'
      tags:
        - Chat Report
      requestBody:
        $ref: '#/components/requestBodies/ChatReport'
      responses:
        204:
          description: Operation comlpeted successfully
    get:
      operationId: getChatReport
      description: 'Get Chat Report Details.'
      summary: Get Chat Report Details
      tags:
        - Chat Report
      responses:
        '200':
          description: 'Update Chat Report Response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
    delete:
      operationId: deleteChatReportDelete
      description: 'Delete Chat Report.'
      summary: Delete Chat Report
      tags:
        - Chat Report
      responses:
        204:
          description: Operation completed successfully
  /reports/{chatReportId}/approve:
    parameters:
      - $ref: '#/components/parameters/chatReportIdPath'
    put:
      operationId: approveChatReport
      description: Approve Chat Report Action.
      tags:
        - Chat Report
      responses:
        204:
          description: Operation completed successfully
  /reports/{chatReportId}/ignore:
    parameters:
      - $ref: '#/components/parameters/chatReportIdPath'
    put:
      operationId: ignoreChatReport
      description: Ignore Chat Report Action.
      tags:
        - Chat Report
      responses:
        204:
          description: Operation completed successfully
  /settings:
    get:
      operationId: getSettings
      description: 'Get profanity and domain filter.'
      summary: Get chat settings that contains profanity and domain filters
      tags:
        - Chat Setting
      responses:
        '200':
          description: 'Get chatSettings response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatSettings'
  /contacts/sync:
    post:
      operationId: syncContacts
      description: 'Sync contacts'
      summary: Sync Contacts
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              title: SyncContactsInput
              type: object
              properties:
                contacts:
                  type: array
                  items:
                    type: string
              required:
                - contacts
      responses:
        200:
          description: Contact users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/APIUser'
  /auth/auth0/login:
    post:
      operationId: auth0Login
      description: 'verify user information, device information'
      summary: Verify User information
      tags:
        - Auth
      security:
        - ApiKeyAuth: []
        - DeviceId: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth0LoginInput'
      responses:
        '200':
          description: The User info
          content:
            application/json:
              schema:
                title: UserInfo
                properties:
                  user:
                    $ref: '#/components/schemas/APIUser'
                  notificationSettings:
                    $ref: '#/components/schemas/NotificationSettings'
                required:
                  - user
  /users/{uid}/avatar:
    parameters:
      - $ref: '#/components/parameters/uidPath'
    delete:
      operationId: deleteUserAvatar
      description: Remove user profile pic
      tags:
        - User
      responses:
        204:
          description: Operation completed successfully
  /users:
    get:
      description: List users
      tags:
        - User
      operationId: getUsers
      parameters:
        - name: lastId
          in: query
          description: 'To be used for Pagination'
          required: false
          schema:
            type: string
        - name: lastCallTime
          in: query
          description: 'epoch time value for time based sunc. Do not pass this param itself for retrieving all data.'
          required: false
          schema:
            type: integer
        - name: updateType
          in: query
          description: 'type of sync i.e. addUpdated/inactive/deleted. Default value is addUpdated'
          required: false
          schema:
            type: string
      responses:
        '200':
          description: 'List of Users'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/APIUser'
  /auth/reset-password:
    post:
      operationId: resetPassword
      description: 'On calling this API, password gets reset and new password gets delivered on email'
      summary: Forgot Password
      security:
        - ApiKeyAuth: []
        - DeviceId: []
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: ResetPasswordInput
              properties:
                loginType:
                  description: Type of login like email/mobile/sso
                  type: string
                  example: email
                appUserId:
                  description: User ID based on loginType
                  type: string
                  example: abc@ertc.com
              required:
                - loginType
                - appUserId
      responses:
        204:
          description: Operation completed successfully
  /auth/change-password:
    post:
      operationId: changePassword
      description: 'API to change user password'
      summary: Change Password
      security:
        - ApiKeyAuth: []
        - DeviceId: []
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: LoginPasswordInput
              properties:
                loginType:
                  description: 'Type of login  like email/mobile/sso'
                  type: string
                  example: 'email'
                appUserId:
                  description: 'User ID based on loginType'
                  type: string
                  example: 'abc@ertc.com'
                currentPassword:
                  description: 'Current password'
                  type: string
                  example: 'password123'
                newPassword:
                  description: 'New password'
                  type: string
              required:
                - loginType
                - appUserId
                - currentPassword
                - newPassword
      responses:
        204:
          description: Operation completed successfully
  /favorites:
    get:
      tags:
        - Chat
      operationId: getFavorites
      description: Get users favorite messages
      parameters:
        - $ref: '#/components/parameters/skipQuery'
        - $ref: '#/components/parameters/limitQuery'
      responses:
        '200':
          description: The messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/APIMessage'
  /stub:
    get:
      operationId: stub
      description: This api does not exist. This is only to generate types that wouldnt have otherwise been generated
      responses:
        200:
          description: Stub API
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stub'
components:
  parameters:
    uidPath:
      name: uid
      in: path
      required: true
      schema:
        type: string
      description: the user's id
    chatReportIdPath:
      name: chatReportId
      in: path
      required: true
      schema:
        type: string
      description: 'chat Report ID'
    gidPath:
      name: gid
      in: path
      required: true
      schema:
        type: string
      description: Group ID
    tidPath:
      name: tid
      in: path
      required: true
      schema:
        type: string
      description: The Thread ID
    midPath:
      in: path
      name: mid
      required: true
      description: The message ID
      schema:
        type: string
    limitQuery:
      name: limit
      in: query
      schema:
        type: integer
        default: 20
      description: 'limit value for pagination. i.e. page-size. default 10'
    skipQuery:
      name: skip
      in: query
      schema:
        type: integer
        default: 0
      description: 'skip value for pagination. i.e. index. default 0'
    directionQuery:
      name: direction
      in: query
      schema:
        type: string
        enum: [future, past]
        default: past
      description: 'future/past'
  requestBodies:
    ChatReport:
      required: true
      content:
        application/json:
          schema:
            title: CreateChatReport
            type: object
            properties:
              'category':
                description: 'Catgory of Chat Report possible values : other, abuse, spam, inappropriate'
                type: string
                example: 'spam'
              'reason':
                description: 'detailed reason for raising chat report'
                type: string
                example: 'Bad words used in message text'
  schemas:
    APIThread:
      title: Thread
      type: object
      properties:
        threadId:
          description: 'Thread ID'
          type: string
          example: '5c56c9a2218aec4b4a8a976e'
        threadType:
          description: 'Type of thread - single/group'
          type: string
          title: ThreadType
          enum: [string, group]
          example: 'single'
        createdAt:
          description: 'Therad object creation time'
          type: number
          example: 1550852154
        participants:
          description: 'array of read timestamps'
          type: array
          items:
            $ref: '#/components/schemas/APIUser'
        user:
          $ref: '#/components/schemas/APIUser'
        group:
          $ref: '#/components/schemas/APIGroup'
        lastMessage:
          $ref: '#/components/schemas/APIMessage'
        e2eEncryptionKeys:
          type: array
          items:
            $ref: '#/components/schemas/EncryptionKey'
      required:
        - threadId
        - threadType
        - participants
        - createdAt
    APIGroup:
      title: Group
      type: object
      properties:
        groupId:
          description: Group ID
          type: string
          example: '5d39f5990e7b2ea2a09592c6'
        name:
          description: Group Name
          type: string
          example: ABC
        groupType:
          description: 'Type of group. for example privte/public. only private is supported as of now.'
          type: string
          title: GroupType
          enum: [public, private]
          example: private
        description:
          description: Description of group
          type: string
          example: This is ABC
        profilePic:
          description: Profile pic url. use chatServer URL as prefix to generate complete URL
          type: string
          example: file/group/5d173fe444ead81c2aeb63635d3bebccafbd87f2ac80ff22_1564208076389.jpg
        profilePicThumb:
          description: Profile pic thumbnail url. use chatServer URL as prefix to generate complete URL
          type: string
          example: file/imageThumbnail/group/5d173fe444ead81c2aeb63635d3bebccafbd87f2ac80ff22_1564208076389.jpg
        createdAt:
          description: Group creation epoch timeStamp
          type: number
          example: 1564079514
        creatorId:
          description: 'appUserId of creator'
          type: string
          example: abc@ertc.com
        threadId:
          description: ThreadId associated with group. To be used for chat
          type: string
          example: 5d3bebccafbd87f2ac80ff24
        participants:
          description: List of participants
          type: array
          items:
            $ref: '#/components/schemas/Participant'
      required:
        - groupId
        - name
        - groupType
        - createdAt
    Participant:
      title: Participant
      type: object
      properties:
        appUserId:
          description: 'appUserId of user'
          type: string
          example: 'abc@ertc.com'
        eRTCUserId:
          description: 'eRTC user ID of user'
          type: string
          example: '5d344196b9801e6d0b110486'
        role:
          description: 'Role of participant. For example user/admin'
          type: string
          enum: [user, admin]
          example: 'user'
        joinedAtDate:
          description: 'Time when user joined'
          type: string
          format: date-time
          example: '2019-07-25T18:31:53.813Z'
      required:
        - appUserId
        - eRTCUserId
        - role
        - joinedAtDate
    AvailabilityStatus:
      description: 'availability status of user. i.e. online/away/invisible/dnd'
      type: string
      title: AvailabilityStatus
      enum: [online, away, invisible, dnd, offline]
      example: 'online'
    MessageStatus:
      description: A messages read state, can only be marked as such by recipients in a one to one
      type: string
      enum: [delivered, seen]
    APIUser:
      title: User
      type: object
      properties:
        eRTCUserId:
          description: Unique ID of the user
          type: string
          example: '5c26b3c98d4443ed1eeeed96'
        appUserId:
          description: Email address
          type: string
          example: 'abc@ertc.com'
        name:
          description: 'Name of user'
          type: string
          example: 'John'
        profilePic:
          description: 'User Profile Picture. Prepond base userServer URL to generate complete path. eg. http://global.ripbullertc.com/v1/'
          type: string
          example: 'file/profilePic/57964c1a2014c4544afb8efe5c3ccef895caf654c444020c_1550418609751.jpeg'
        profilePicThumb:
          description: 'User Profile Picture Thumb Image'
          type: string
          example: 'file/profilePic/57964c1a2014c4544afb8efe5c3ccef895caf654c444020c_1550418609751.jpeg'
        profileStatus:
          description: 'User Profile Status'
          type: string
          example: 'I am using eRTC'
        phoneNumber:
          description: 'User phone number'
          type: string
          example: '+10001234589'
        loginTimeStamp:
          description: 'Epoch Time Stamp of last Login'
          type: integer
          example: 1543654908
        availabilityStatus:
          $ref: '#/components/schemas/AvailabilityStatus'
      required:
        - appUserId
        - eRTCUserId
    Mention:
      title: Mention
      type: object
      properties:
        type:
          title: 'Mention type. eg. user/generic'
          type: string
          example: user
        value:
          title: 'Mention value based on type. for user type, eRTCUserId. for generic type, here/channel'
          type: string
          example: '5e3841dea49618da0b379480'
    NotificationSettings:
      title: NotificationSettings
      type: object
      properties:
        allowFrom:
          description: 'Allow from values. It can be all/mentions/none. When it is include in thread response, can have value just for requesting used.'
          type: string
          enum: [all, mentions, none]
          example: 'none'
        validTill:
          description: 'When setting should reset'
          type: string
          example: '2021-11-11T12:22:53.325Z'
        validTillDisplayValue:
          description: 'To help frontend preselect value'
          type: string
          example: '12 Days'
          pattern: /^[0-9]{1,3} (Day|Week|Month|Year)[s]{0,1}$/
      required:
        - allowFrom
    AutoDeleteSettings:
      title: AutoDeleteSettings
      type: object
      properties:
        'enabled':
          description: 'Enabled or not'
          type: boolean
          example: true
        'deleteAfterMiliSeconds':
          description: 'SHould be deleted after this many miliseconds'
          type: number
          example: 1000000
    MessageType:
      type: string
      enum: [text, image, audio, video, gif, file, contact, location]
      description: A message content type
    APIMessage:
      title: Message
      type: object
      properties:
        msgUniqueId:
          description: 'Unique identified of chat object generated by server'
          type: string
          example: '5c56c9a2218aec4b4a8a976f'
        message:
          description: 'message text. it can be present for any msgType value'
          type: string
          example: 'hello'
        msgType:
          $ref: '#/components/schemas/MessageType'
        contact:
          $ref: '#/components/schemas/Contact'
        location:
          $ref: '#/components/schemas/Location'
        media:
          $ref: '#/components/schemas/Media'
        gify:
          description: 'gify URL'
          type: string
          example: 'https://gify.com/test.gif'
        sendereRTCUserId:
          description: sender eRTCUserId
          type: string
          example: '5eef97669c612ed1ca595314'
        createdAt:
          description: Chat object creation epoch time in miliseconds
          type: string
          example: '1550852154000'
        replyThreadFeatureData:
          $ref: '#/components/schemas/Reply'
        forwardChatFeatureData:
          $ref: '#/components/schemas/Forward'
        reactions:
          description: 'list of reactions'
          type: array
          items:
            $ref: '#/components/schemas/Reaction'
        isEdited:
          description: 'If chat message is starred'
          type: boolean
          example: true
        isStarred:
          description: 'If chat is starred'
          type: boolean
          example: true
        follow:
          description: 'Only present on base message when user is following thread'
          type: boolean
          example: true
        chatReportId:
          description: 'If message is reported then it will contain chat report id'
          type: string
          example: '60caeb30107058635fcf293d'
        chatReportStatus:
          description: Tell status of chat report, possible values are new, reportConsidered and reportIgnored
          type: string
          enum: [new, reportConsidered, reportIgnored]
          example: 'new'
        mentions:
          type: array
          items:
            $ref: '#/components/schemas/Mention'
        customData:
          description: 'JSON object which can be used for customer specific data which is not supported in InAppChat chat model. eg. { "abc" : "def" }'
          type: object
          additionalProperties: true
          example: { 'abc': 'def' }
        deleteScheduleAt:
          description: 'When the message will automatically be deleted if it was send when disappearing message option was on'
          type: string
          example: '2021-12-18T12:22:53.325Z'
        replyMsgCount:
          type: integer
          description: The number of replies to this message
        threadId:
          type: string
          description: The ID of the thread this message belongs to
        replies:
          type: array
          items:
            $ref: '#/components/schemas/APIMessage'
        encryptedChatList:
          type: array
          items:
            $ref: '#/components/schemas/EncryptedMessage'
        status:
          $ref: '#/components/schemas/MessageStatus'
      required:
        - sendereRTCUserId
        - createdAt
        - msgUniqueId
        - threadId
    Reply:
      description: Reply thread feature details in received chat
      type: object
      properties:
        'baseMsgUniqueId':
          description: 'msgUniqueId of base chat'
          type: string
          example: '5e3841dea49618da0b379480'
        'replyMsgConfig':
          description: 'Reply config which applies to reply chat. For example, bit 0 is used to decide whether to show reply on window or not.'
          type: number
          example: 1
    Forward:
      title: Forward
      type: object
      properties:
        originalMsgUniqueId:
          description: msgUniqueId of original chat
          type: string
          example: '5e3841dea49618da0b379480'
        isForwarded:
          description: to indicate if message is forwarded one or not.
          type: boolean
          example: true
    EncryptionKey:
      type: object
      properties:
        keyId:
          description: 'Key identifier.'
          type: string
          example: '5dd1732e27eda6253f15629b'
        deviceId:
          description: 'Device identifier.'
          type: string
          example: '2b6f0cc904d137be2e1730235f5664094b831186'
        publicKey:
          description: 'public Key of associated device'
          type: string
          example: 'CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1'
        eRTCUserId:
          description: 'user eRTCUserId.'
          type: string
          example: '5d344196b9801e6d0b110486'
      required:
        - keyId
        - deviceId
        - publicKey
        - eRTCUserId
    EncryptedMessage:
      type: object
      properties:
        keyId:
          description: 'Key identifier.'
          type: string
          example: '5dd1732e27eda6253f15629b'
        deviceId:
          description: 'Device identifier.'
          type: string
          example: '2b6f0cc904d137be2e1730235f5664094b831186'
        publicKey:
          description: 'public Key of associated device'
          type: string
          example: 'CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1'
        eRTCUserId:
          description: 'user eRTCUserId.'
          type: string
          example: '5d344196b9801e6d0b110486'
        message:
          description: 'encrypted message text. it can be present for any msgType value'
          type: string
          example: 'djk%342#@4'
        contact:
          description: 'encrypted stringified contact object. please check contactSchema for object value'
          type: string
          example: 'djk%342#@4'
        location:
          description: 'encrypted stringified location object. please check contactSchema for object value'
          type: string
          example: 'djk%342#@4'
        gify:
          description: 'gify URL'
          type: string
          example: 'https://gify.com/test.gif'
        path:
          description: 'encrypted media path URL'
          type: string
          example: 'djk%342#@4'
        thumbnail:
          description: 'encrypted media thumbnail URL'
          type: string
          example: 'djk%342#@4'
      required:
        - keyId
        - deviceId
    Contact:
      title: Contact
      type: object
      properties:
        name:
          description: 'Name of contact'
          type: string
          example: 'Rakesh'
        numbers:
          description: 'Contact Number'
          type: array
          items:
            title: PhoneNumber
            type: object
            properties:
              'type':
                description: 'Type of Number contact. For example Home/Work'
                type: string
                example: 'Home'
              'number':
                description: 'Contact Number'
                type: string
                example: '+911234567890'
            required:
              - number
        emails:
          description: 'Contact Email'
          type: array
          items:
            title: Email
            type: object
            properties:
              'type':
                description: 'Type of Email contact. For example Home/Work'
                type: string
                example: 'Home'
              'email':
                description: 'Email'
                type: string
                example: 'abc@def.com'
            required:
              - email
      required:
        - name
    Location:
      title: Location
      type: object
      properties:
        longitude:
          description: 'Longitude'
          type: number
          example: 1.234
        latitude:
          description: 'Latitude'
          type: number
          example: 2.34567
        address:
          description: 'Address of location'
          type: string
          example: '1, ABC road, US'
    Media:
      title: Media
      type: object
      properties:
        'path':
          description: 'media URL. use chatServer URL as prefix to generate complete URL'
          type: string
          example: 'file/chat/57964c1a2014c4544afb8efeundefined_1550946919027.png'
        'thumbnail':
          description: "media thumbnail URL. It can be present for only media with msgType as 'image'. use chatServer URL as prefix to generate complete URL"
          type: string
          example: 'file/chat/57964c1a2014c4544afb8efeundefined_1550946919027.png'
        'name':
          description: 'original name of file uploaded'
          type: string
          example: 'abc.jpg'
    ReportCategory:
      type: string
      enum: [abuse, spam, other, inappropriate]
    ReportStatus:
      type: string
      enum: [new, reportConsidered, reportIgnored]
    Report:
      type: object
      properties:
        chatReportId:
          description: 'Chat Report ID'
          type: string
          example: '5d39f5990e7b2ea2a09592c6'
        tenantId:
          description: 'Tenant Id'
          type: string
          example: '5d39f5990e7b2ea2a09592c6'
        category:
          $ref: '#/components/schemas/ReportCategory'
        reason:
          description: 'detailed reason for raising chat report'
          type: string
          example: 'Bad words used in message text'
        channelAdminStatus:
          description: 'channel Admin Status'
          type: object
          properties:
            status:
              $ref: '#/components/schemas/ReportStatus'
            category:
              $ref: '#/components/schemas/ReportCategory'
            createdAt:
              description: 'Chat Report Status creation epoch timeStamp'
              type: number
              example: 1564079514
        tenantAdminStatus:
          description: 'tenant Admin Status'
          type: object
          properties:
            status:
              $ref: '#/components/schemas/ReportStatus'
            category:
              $ref: '#/components/schemas/ReportCategory'
            'createdAt':
              description: 'Chat Report Status creation epoch timeStamp'
              type: number
              example: 1564079514
        reporterERTCUser:
          $ref: '#/components/schemas/APIUser'
        chat:
          $ref: '#/components/schemas/APIMessage'
      required:
        - createdAt
        - tenantId
        - category
        - reason
        - channelAdminStatus
        - tenantAdminStatus
        - reporterERTCUser
        - chat
    ChatSettings:
      type: object
      properties:
        'tenantId':
          description: 'Tenant id'
          type: string
          example: 'ChatSetting-60a4fc8103a6f047ca02a1df'
        'profanityFilter':
          description: 'List of profanity filters'
          type: array
          items:
            type: object
            properties:
              'keywords':
                description: 'List of keywords'
                type: array
                items:
                  type: string
                  example: 'a'
              'regexes':
                description: 'List of regular expression'
                type: array
                items:
                  type: string
                  example: 's/hello/hi/g'
              'actionType':
                description: 'Type of action on match'
                type: string
                example: 'block'
        'domainFilter':
          description: 'List of domain filters'
          type: array
          items:
            type: object
            properties:
              'keywords':
                description: 'List of keywords'
                type: array
                items:
                  type: string
                  example: 'google.com'
              'actionType':
                description: 'Type of action on match'
                type: string
                example: 'allow'
    Invite:
      properties:
        groupId:
          type: string
          example: '6166d74594f04450bd4ecd0d'
        by:
          type: string
          example: '63dad74a74ef82813702c756'
        to:
          type: string
          example: '63dad74a74ef82813702c756'
        date:
          type: string
          example: '2023-02-02T19:44:56.355Z'
      required:
        - groupId
        - by
        - to
        - date
    Reaction:
      type: object
      properties:
        emojiCode:
          type: string
        count:
          type: integer
        users:
          type: array
          items:
            type: string
      required:
        - emojiCode
        - count
        - users
    Event:
      type: object
      properties:
        eventType:
          type: string
          enum:
            [
              userSelfUpdate,
              groupUpdated,
              chatReportUpdated,
              chatReaction,
              updateMessage,
              typingStatus,
              chat,
              msgReadStatus,
              availabilityStatus,
            ]
        message:
          oneOf:
            - $ref: '#/components/schemas/UserSelfUpdateEvent'
            - $ref: '#/components/schemas/GroupUpdateEvent'
            - $ref: '#/components/schemas/ChatReportEvent'
            - $ref: '#/components/schemas/ReactionEvent'
            - $ref: '#/components/schemas/UpdateMessageEvent'
            - $ref: '#/components/schemas/TypingEvent'
            - $ref: '#/components/schemas/MsgReadEvent'
            - $ref: '#/components/schemas/AvailabilityEvent'
            - $ref: '#/components/schemas/NewMessageEvent'
            - $ref: '#/components/schemas/TenantUpdateEvent'
    UserSelfUpdateEvent:
      title: UserSelfUpdate
      type: object
      properties:
        'eRTCUserId':
          description: "User's eRTCUserId"
          type: string
          example: '5c7ec917b7d471377ee66e4f'
        'eventList':
          type: array
          items:
            type: object
            title: SelfUpdateItem
            properties:
              eventType:
                description: 'Type of the event.'
                type: string
                enum:
                  [
                    availabilityStatusChanged,
                    notificationSettingChangedGlobal,
                    notificationSettingsChangedThread,
                    userBlockedStatusChanged,
                  ]
                example: 'notificationSettingsChangedGlobal'
              eventData:
                title: 'User self-update event data.'
                type: object
                properties:
                  threadId:
                    description: 'Optional. Thread id only applicable for notificationSettingsChangedThread'
                    type: string
                    example: '5c7ec917b7d471377ee66e4f'
                  notificationSettings:
                    $ref: '#/components/schemas/NotificationSettings'
                  availabilityStatus:
                    $ref: '#/components/schemas/AvailabilityStatus'
                  blockedStatus:
                    description: 'Optional. Only applicable for userBlockedStatusChanged. Blocked status i.e. blocked/unblocked'
                    type: string
                    enum: [blocked, unblocked]
                    example: 'blocked'
                  targetUser:
                    $ref: '#/components/schemas/APIUser'
            required:
              - eventType
              - eventData
      required:
        - eRTCUserId
        - eventList
    GroupUpdateEvent:
      title: GroupUpdateEvent
      type: object
      properties:
        eventTriggeredByUser:
          $ref: '#/components/schemas/APIUser'
        groupId:
          description: 'Group ID with which event is related'
          type: string
          example: '5c7ec917b7d471377ee66e4f'
        threadId:
          description: 'Thread ID of associated group'
          type: string
          example: '5c7ec917b7d471377ee66e4f'
        eventList:
          type: array
          items:
            $ref: '#/components/schemas/GroupUpdateEventItem'
      required:
        - eventList
        - threadId
        - groupId
        - eventTriggeredByUser
    ReactionEvent:
      title: ReactionEvent
      type: object
      properties:
        eRTCUserId:
          description: 'User unique Identifier'
          type: string
          example: '5ede69893c2954edcfa0b5f7'
        msgUniqueId:
          description: 'Chat unique Identifier'
          type: string
          example: '5ede69893c2954edcfa0b5f7'
        emojiCode:
          description: 'Emoje code string'
          type: string
          example: 'abc'
        action:
          description: 'Reaction actionType. It can be set/clear'
          type: string
          example: 'set'
        totalCount:
          description: 'Total count of particular reaction with emojiCode'
          type: number
          example: 5
      required:
        - eRTCUserId
        - msgUniqueId
        - emojiCode
        - action
        - totalCount
    UpdateMessageEvent:
      description: 'Chat update notification. It can be used for delete, edit etc. FCM event name - chatUpdate, MQTT Topic - chatUpdate:<clientId>'
      type: object
      properties:
        eRTCUserId:
          description: 'User unique Identifier'
          type: string
          example: '5ede69893c2954edcfa0b5f7'
        msgUniqueId:
          description: 'Chat unique Identifier'
          type: string
          example: '5ede69893c2954edcfa0b5f7'
        updateType:
          description: 'Type of update. '
          enum: [delete, edit]
          type: string
          example: 'abc'
        deleteType:
          description: 'in case of delete updateType, it specifies sub-type of delete such as self/everyone'
          type: string
          enum: [self, everyone]
      required:
        - eRTCUserId
        - msgUniqueId
        - updateType
        - deleteType
    GroupUpdateEventItem:
      description: 'Group update FCM event item'
      type: object
      properties:
        eventType:
          description: Type of the group event.
          type: string
          enum:
            [
              created,
              participantsAdded,
              participantsRemoved,
              nameChange,
              profilePicChanged,
              descriptionChanged,
              groupTypeChanged,
              profilePicRemoved,
              adminMade,
              adminDismissed,
            ]
          example: 'notificationSettingsChangedGlobal'
        eventData:
          title: 'Group update event data.'
          type: object
          properties:
            eventTriggeredOnUserList:
              description: 'Optional. Applicable for participantsAdded/participantsRemoved/adminMade/adminDismissed'
              type: array
              items:
                $ref: '#/components/schemas/APIUser'
            changeData:
              title: GroupUpdatEventChangeData
              type: object
              properties:
                groupId:
                  description: the groups id
                  properties:
                    'previous':
                      description: 'Previous value. Applicable only for nameChanged'
                      type: string
                      example: 'Group ABC'
                    'new':
                      description: 'new value'
                      type: string
                      example: 'Group XYZ'
                  required:
                    - new
                'name':
                  description: 'Applicable for created/nameChanged/profilePicChanged/descriptionChanged eventTypes'
                  type: object
                  properties:
                    'previous':
                      description: 'Previous value. Applicable only for nameChanged'
                      type: string
                      example: 'Group ABC'
                    'new':
                      description: 'new value'
                      type: string
                      example: 'Group XYZ'
                  required:
                    - new
                description:
                  description: 'Applicable for created/nameChanged/profilePicChanged/descriptionChanged eventTypes'
                  type: object
                  properties:
                    'previous':
                      description: 'Previous value. Applicable only for nameChanged'
                      type: string
                      example: 'Group ABC'
                    'new':
                      description: 'new value'
                      type: string
                      example: 'Group XYZ'
                  required:
                    - new
                profilePic:
                  description: 'Applicable for created/nameChanged/profilePicChanged/descriptionChanged eventTypes'
                  type: object
                  properties:
                    'previous':
                      description: 'Previous value. Applicable only for nameChanged'
                      type: string
                      example: 'Group ABC'
                    'new':
                      description: 'new value'
                      type: string
                      example: 'Group XYZ'
                  required:
                    - new
                groupType:
                  description: 'Applicable for created/nameChanged/profilePicChanged/descriptionChanged eventTypes'
                  type: object
                  properties:
                    'previous':
                      description: 'Previous value. Applicable only for nameChanged'
                      type: string
                      enum: [public, private]
                      example: 'Group ABC'
                    'new':
                      description: 'new value'
                      type: string
                      enum: [public, private]
                      example: 'Group XYZ'
                  required:
                    - new
      required:
        - eventData
        - eventType
    ChatReportEvent:
      type: object
      description: Chat report updated event
      properties:
        chatReportId:
          type: 'string'
          example: '619ba10b67b75cda5345ea67'
        event:
          required:
            - 'eventType'
            - 'eventData'
          properties:
            eventType:
              type: 'string'
              example: 'actionUpdated'
            eventData:
              required:
                - 'chatReport'
              properties:
                chatReport:
                  $ref: '#/components/schemas/Report'
    Token:
      type: object
      properties:
        accessToken:
          description: Access token to be provided in all API calls
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1ZDI3OGU2ZTAyNTQ1NmY4Nzg0ODA4OWIiLCJzY29wZXMiOlsiY2hhdCJdLCJyb2xlcyI6WyJ1c2VyIl0sImlhdCI6MTU2Mjg3NDA0OSwiZXhwIjoxNTYyODc0OTQ5fQ.rWEDuvy-Ghsk-8jWJsegDgKLw7hAwQE820rC1MTSsAw'
        refreshToken:
          description: Refresh token
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1ZDI3OGU2ZTAyNTQ1NmY4Nzg0ODA4OWIiLCJzY29wZXMiOlsiY2hhdCJdLCJyb2xlcyI6WyJ1c2VyIl0sImlhdCI6MTU2Mjg3NDA0OSwiZXhwIjoxNTY0MTcwMDQ5fQ.Mr-NrWiZFno9489PQcm2s3KwvycPewgdb4pLB4WLbhQ'
        expiresIn:
          description: The interval in seconds over which token is valid
          type: number
          example: 900
      required:
        - accessToken
        - expiresIn
        - refreshToken
    Auth0LoginInput:
      type: object
      properties:
        accessToken:
          type: string
          description: The auth0 access token
        'email':
          description: 'User ID based on loginType'
          type: string
          example: 'abc@ertc.com'
        picture:
          description: 'A profile picture URL'
          type: string
        name:
          description: A display name
          type: string
        nickname:
          description: A nickname
          type: string
        'deviceId':
          description: 'Unique device id. For example, UDID for ios'
          type: string
          example: '2b6f0cc904d137be2e1730235f5664094b831186'
        'deviceType':
          description: 'Type of device i.e. android or ios. Allowed valies android/ios'
          type: string
          enum: [android, ios]
          example: 'android'
        'fcmToken':
          description: 'FCM regsitration token. Optional.'
          type: string
          example: 'bk3RNwTe3H0:CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1'
        apnsToken:
          description: the device APNS token
          type: string
      required:
        - email
        - accessToken
        - deviceId
    SenderKeyDetails:
      title: SenderKeyDetails
      description: 'Sender key details used for this chat.'
      type: object
      properties:
        keyId:
          description: 'Key identifier. This is optional. If it is not provided, means this publice key needs to be registerd.'
          type: string
          example: '5dd1732e27eda6253f15629b'
        deviceId:
          description: 'Device identifier.'
          type: string
          example: '2b6f0cc904d137be2e1730235f5664094b831186'
        publicKey:
          description: public Key of associated device
          type: string
          example: 'CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1'
      required:
        - keyId
        - deviceId
        - publicKey
    MessageInput:
      type: object
      title: MessageInput
      properties:
        threadId:
          type: string
          description: 'Thread ID which represents a user or a group. eg. 5c56c9a2218aec4b4a8a976f. This is mutually exclusive with recipientAppUserId.'
        recipientAppUserId:
          type: string
          description: 'App user Id of receiver. eg. abc@def.com. This is mutually exclusive with threadId.'
        message:
          type: string
          description: "message text. rg. 'hello'"
        msgType:
          $ref: '#/components/schemas/MessageType'
        file:
          type: string
          format: binary
          description: File share
        replyThreadFeatureData:
          $ref: '#/components/schemas/Reply'
        metadata:
          description: 'JSON object which can be used for client reference in request/response context. Server will not do any processing on this object. eg. { "abc" : "def" }'
          type: object
          additionalProperties: true
        location:
          $ref: '#/components/schemas/Location'
        contact:
          $ref: '#/components/schemas/Contact'
        gif:
          description: 'gify url'
          type: string
        mentions:
          type: array
          items:
            $ref: '#/components/schemas/Mention'
        forwardChatFeatureData:
          $ref: '#/components/schemas/Forward'
        media:
          $ref: '#/components/schemas/Media'
        msgCorrelationId:
          type: string
          description: 'Client generated unique identifier used to trace message delivery till receiver'
        senderTimeStampMs:
          description: 'epoch timestamp (in ms) of message creation generated on sender device'
          type: number
        customData:
          description: 'JSON object which can be used for customer specific data which is not supported in InAppChat chat model. eg. { "abc" : "def" }'
          type: object
          additionalProperties: true
        encryptedChatList:
          description: 'List of user+device wise eencrypted chat objects.'
          type: array
          items:
            $ref: '#/components/schemas/EncryptedMessage'
      required:
        - senderTimeStampMs
    Stub:
      description: This does not exist
      properties:
        senderKeyDetails:
          $ref: '#/components/schemas/SenderKeyDetails'
    TypingEvent:
      description: A user's typing status change in a chat
      properties:
        appUserId:
          type: string
          description: The user receiving the typing status
        eRTCUserId:
          type: string
          description: The user sending the typing status
        groupId:
          type: string
          description: The group receiving the typing status
        typingStatusEvent:
          type: string
          enum: ['on', 'off']
          description: Whether or not the user is typing
      required:
        - eRTCUserId
        - typingStatusEvent
    MsgReadEvent:
      description: A user updating a message read state
      properties:
        msgUniqueId:
          type: string
          description: The ID of the message
        eRTCUserId:
          type: string
          description: The ID of the user marking the message read
        msgReadStatus:
          type: string
          enum: [delivered, seen]
          description: The status of the message
      required:
        - msgUniqueId
        - eRTCUserId
        - msgReadStatus
    AvailabilityEvent:
      description: A user's availability changed
      properties:
        eRTCUserId:
          type: string
          description: The user ID
        availabilityStatus:
          $ref: '#/components/schemas/AvailabilityStatus'
      required:
        - eRTCUserId
        - availabilityStatus
    NewMessageEvent:
      description: A new message
      properties:
        message:
          $ref: '#/components/schemas/APIMessage'
      required:
        - message
    TenantUpdateEvent:
      description: The updated tenant
      properties:
        tenantId:
          type: string
      required:
        - tenantId
    Auth:
      type: object
      description: An auth response
      properties:
        token:
          $ref: '#/components/schemas/Token'
        user:
          $ref: '#/components/schemas/APIUser'
        notificationSettings:
          $ref: '#/components/schemas/NotificationSettings'
      required:
        - user
        - token
    SenderReturnCode:
      type: string
      enum:
        - senderKeyValidityExpired,
        - receiverKeyValidationError
        - senderNewDeviceKeyAvailable
        - success
      description: >
        return code for e2e encrypted chat request. 
        It can be senderKeyValidityExpired (new key to be provided in keyList, also new device key if there) 
        / receiverKeyValidationError / senderNewDeviceKeyAvailable (new device key to be provided in keyList, 
        also same device key if validity expired) / success
    ReceiverReturnCode:
      type: string
      description: Return code associated with individual key object.
      enum:
        - receiverKeyNotActive
        - receiverKeyInvalid
        - receiverNewDeviceKeyAvailable
  responses:
    auth:
      description: User token and profile
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Auth'
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: Your API key
    DeviceId:
      type: apiKey
      in: header
      name: X-Device-ID
      description: The device's unique identifier
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
