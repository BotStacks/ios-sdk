// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name InAppChat
// swift-module-flags-ignorable: -enable-bare-slash-regex
import ActivityIndicatorView
import Alamofire
import AnyCodable
import CocoaMQTT
import Combine
import Contacts
import ContactsUI
import CoreData
import CoreLocation
import CryptoKit
import DynamicColor
import Fakery
import Foundation
import Gifu
import GiphyUISDK
import Introspect
import MobileCoreServices
import NukeUI
import Photos
import PhotosUI
import RollbarNotifier
import RollbarPLCrashReporter
import Speech
import Swift
import SwiftDate
import SwiftUI
import SwiftyJSON
import UIKit
import _AVKit_SwiftUI
import _Concurrency
import _PhotosUI_SwiftUI
import _StringProcessing
import os.log
import os
public struct EmojiSection<T> : SwiftUI.View where T : Swift.Hashable {
  public init(title: Swift.String? = nil, items: [T], contentKeyPath: Swift.KeyPath<T, Swift.String>, completionHandler: @escaping (T) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat12EmojiSectionV4bodyQrvp", 0) __<T>
}
public struct ChatReportEvent : Swift.Codable, Swift.Hashable {
  public var chatReportId: Swift.String?
  public var event: InAppChat.ChatReportEventEvent?
  public init(chatReportId: Swift.String? = nil, event: InAppChat.ChatReportEventEvent? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case chatReportId
    case event
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.ChatReportEvent.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.ChatReportEvent.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.ChatReportEvent, b: InAppChat.ChatReportEvent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct ChatSettingsDomainFilterInner : Swift.Codable, Swift.Hashable {
  public var keywords: [Swift.String]?
  public var actionType: Swift.String?
  public init(keywords: [Swift.String]? = nil, actionType: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case keywords
    case actionType
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.ChatSettingsDomainFilterInner.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.ChatSettingsDomainFilterInner.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.ChatSettingsDomainFilterInner, b: InAppChat.ChatSettingsDomainFilterInner) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct PhoneNumber : Swift.Codable, Swift.Hashable {
  public var type: Swift.String?
  public var number: Swift.String
  public init(type: Swift.String? = nil, number: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case type
    case number
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.PhoneNumber.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.PhoneNumber.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.PhoneNumber, b: InAppChat.PhoneNumber) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public enum ReceiverReturnCode : Swift.String, Swift.Codable, Swift.CaseIterable {
  case receiverkeynotactive
  case receiverkeyinvalid
  case receivernewdevicekeyavailable
  public init?(rawValue: Swift.String)
  public typealias AllCases = [InAppChat.ReceiverReturnCode]
  public typealias RawValue = Swift.String
  public static var allCases: [InAppChat.ReceiverReturnCode] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct ActionItem : SwiftUI.View {
  public init(image: SwiftUI.Image? = nil, text: Swift.String, divider: Swift.Bool = true, action: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat10ActionItemV4bodyQrvp", 0) __
}
public struct ActionSheet<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(@SwiftUI.ViewBuilder items: @escaping () -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat11ActionSheetV4bodyQrvp", 0) __<Content>
}
@_hasMissingDesignatedInitializers open class SearchAPI {
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func search(deviceid: Swift.String, searchInput: InAppChat.SearchInput, skip: Swift.Int? = nil, limit: Swift.Int? = nil) async throws -> InAppChat.SearchResults
  #endif
  open class func searchWithRequestBuilder(deviceid: Swift.String, searchInput: InAppChat.SearchInput, skip: Swift.Int? = nil, limit: Swift.Int? = nil) -> InAppChat.RequestBuilder<InAppChat.SearchResults>
  @objc deinit
}
public struct GroupUpdatEventChangeData : Swift.Codable, Swift.Hashable {
  public var groupId: InAppChat.GroupUpdatEventChangeDataGroupId?
  public var name: InAppChat.GroupUpdatEventChangeDataName?
  public var description: InAppChat.GroupUpdatEventChangeDataName?
  public var profilePic: InAppChat.GroupUpdatEventChangeDataName?
  public var groupType: InAppChat.GroupUpdatEventChangeDataGroupType?
  public init(groupId: InAppChat.GroupUpdatEventChangeDataGroupId? = nil, name: InAppChat.GroupUpdatEventChangeDataName? = nil, description: InAppChat.GroupUpdatEventChangeDataName? = nil, profilePic: InAppChat.GroupUpdatEventChangeDataName? = nil, groupType: InAppChat.GroupUpdatEventChangeDataGroupType? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case groupId
    case name
    case description
    case profilePic
    case groupType
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.GroupUpdatEventChangeData.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.GroupUpdatEventChangeData.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.GroupUpdatEventChangeData, b: InAppChat.GroupUpdatEventChangeData) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct ChatTabView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat0C7TabViewV4bodyQrvp", 0) __
}
public struct UpdateGroupInput : Swift.Codable, Swift.Hashable {
  public enum GroupType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case _public
    case _private
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.UpdateGroupInput.GroupType]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.UpdateGroupInput.GroupType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var name: Swift.String?
  public var groupType: InAppChat.UpdateGroupInput.GroupType?
  public var description: Swift.String?
  public var profilePic: Foundation.URL?
  public init(name: Swift.String? = nil, groupType: InAppChat.UpdateGroupInput.GroupType? = nil, description: Swift.String? = nil, profilePic: Foundation.URL? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case name
    case groupType
    case description
    case profilePic
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.UpdateGroupInput.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.UpdateGroupInput.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.UpdateGroupInput, b: InAppChat.UpdateGroupInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct CameraPicker : SwiftUI.UIViewControllerRepresentable {
  public init(video: Swift.Bool = false, onFile: @escaping (Foundation.URL) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func makeUIViewController(context: SwiftUI.UIViewControllerRepresentableContext<InAppChat.CameraPicker>) -> UIKit.UIImagePickerController
  @_Concurrency.MainActor(unsafe) public func updateUIViewController(_ uiViewController: UIKit.UIImagePickerController, context: SwiftUI.UIViewControllerRepresentableContext<InAppChat.CameraPicker>)
  @_Concurrency.MainActor(unsafe) public func makeCoordinator() -> InAppChat.CameraPicker.Coordinator
  @objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class Coordinator : ObjectiveC.NSObject, UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
    @_Concurrency.MainActor(unsafe) @objc final public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
    @objc deinit
  }
  public typealias Body = Swift.Never
  public typealias UIViewControllerType = UIKit.UIImagePickerController
}
public struct Row : SwiftUI.View {
  public init(icon: Swift.String, text: Swift.String, iconPrimary: Swift.Bool = false, destructive: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat3RowV4bodyQrvp", 0) __
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ThreadsPager : InAppChat.Pager<InAppChat.Message> {
  #if compiler(>=5.3) && $AsyncAwait
  override public func load(_ isRefresh: Swift.Bool) async throws -> [InAppChat.Message]
  #endif
  @objc deinit
}
@_Concurrency.MainActor(unsafe) public struct SectionIndexPicker : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(sections: [Swift.String])
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat18SectionIndexPickerV4bodyQrvp", 0) __
}
public struct EmojiBar : SwiftUI.View {
  public init(currentEmoji: Swift.String? = nil, onEmoji: @escaping (Swift.String) -> Swift.Void, onEmojiKeyboard: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat8EmojiBarV4bodyQrvp", 0) __
}
public struct StringRule {
  public var minLength: Swift.Int?
  public var maxLength: Swift.Int?
  public var pattern: Swift.String?
}
public struct NumericRule<T> where T : Swift.Comparable, T : Swift.Numeric {
  public var minimum: T?
  public var exclusiveMinimum: Swift.Bool
  public var maximum: T?
  public var exclusiveMaximum: Swift.Bool
  public var multipleOf: T?
}
public enum StringValidationErrorKind : Swift.Error {
  case minLength, maxLength, pattern
  public static func == (a: InAppChat.StringValidationErrorKind, b: InAppChat.StringValidationErrorKind) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum NumericValidationErrorKind : Swift.Error {
  case minimum, maximum, multipleOf
  public static func == (a: InAppChat.NumericValidationErrorKind, b: InAppChat.NumericValidationErrorKind) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ValidationError<T> : Swift.Error where T : Swift.Error, T : Swift.Hashable {
  public var kinds: Swift.Set<T> {
    get
  }
}
public struct Validator {
  public static func validate(_ string: Swift.String, against rule: InAppChat.StringRule) throws -> Swift.String
  public static func validate<T>(_ numeric: T, against rule: InAppChat.NumericRule<T>) throws -> T where T : Swift.BinaryInteger
  public static func validate<T>(_ numeric: T, against rule: InAppChat.NumericRule<T>) throws -> T where T : Swift.FloatingPoint
}
@_Concurrency.MainActor(unsafe) public struct Header<Content> : SwiftUI.View where Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public static var height: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public let title: Swift.String
  @_Concurrency.MainActor(unsafe) public let showStartMessage: Swift.Bool
  @_Concurrency.MainActor(unsafe) public let showSearch: Swift.Bool
  @_Concurrency.MainActor(unsafe) public let onBack: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public let onMenu: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) public let icon: (() -> Content)?
  @_Concurrency.MainActor(unsafe) public let addPath: Swift.String?
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String, showStartMessage: Swift.Bool = false, showSearch: Swift.Bool = false, onBack: (() -> Swift.Void)? = nil, background: SwiftUI.Color? = nil, onMenu: (() -> Swift.Void)? = nil, addPath: Swift.String? = nil, icon: (() -> Content)?)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat6HeaderV4bodyQrvp", 0) __<Content>
}
extension InAppChat.Header where Content == SwiftUI.Image {
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String, showStartMessage: Swift.Bool = false, showSearch: Swift.Bool = false, onBack: (() -> Swift.Void)? = nil, onMenu: (() -> Swift.Void)? = nil, addPath: Swift.String? = nil, background: SwiftUI.Color? = nil)
}
final public class Message : Foundation.ObservableObject, Swift.Identifiable {
  public struct Attachment {
    public let url: Swift.String
    public let kind: InAppChat.Message.Attachment.Kind
    public let type: Swift.String?
    public enum Kind : Swift.String {
      case image
      case video
      case audio
      case file
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
  }
  public enum Status : Swift.String {
    case delivered
    case seen
    case sent
    case sending
    case failed
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  final public let id: Swift.String
  final public let createdAt: Foundation.Date
  final public let userID: Swift.String
  final public let parentID: Swift.String?
  @Combine.Published @_projectedValueProperty($parent) final public var parent: InAppChat.Message? {
    get
    set
    _modify
  }
  final public var $parent: Combine.Published<InAppChat.Message?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  final public let threadID: Swift.String
  final public var text: Swift.String {
    get
    set
  }
  @Combine.Published @_projectedValueProperty($markdownText) final public var markdownText: Swift.String {
    get
    set
    _modify
  }
  final public var $markdownText: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  final public var attachments: [InAppChat.Message.Attachment]
  final public var location: InAppChat.Location?
  final public var contact: InAppChat.Contact?
  @Combine.Published @_projectedValueProperty($messages) final public var messages: [InAppChat.Message] {
    get
    set
    _modify
  }
  final public var $messages: Combine.Published<[InAppChat.Message]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($reactions) final public var reactions: [InAppChat.Reaction]? {
    get
    set
    _modify
  }
  final public var $reactions: Combine.Published<[InAppChat.Reaction]?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($currentReaction) final public var currentReaction: Swift.String? {
    get
    set
    _modify
  }
  final public var $currentReaction: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($replyCount) final public var replyCount: Swift.Int {
    get
    set
    _modify
  }
  final public var $replyCount: Combine.Published<Swift.Int>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($status) final public var status: InAppChat.Message.Status? {
    get
    set
    _modify
  }
  final public var $status: Combine.Published<InAppChat.Message.Status?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($favorite) final public var favorite: Swift.Bool {
    get
    set
    _modify
  }
  final public var $favorite: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(id: Swift.String, createdAt: Foundation.Date, userID: Swift.String, threadID: Swift.String, parent: InAppChat.Message? = nil, text: Swift.String = "", attachments: [InAppChat.Message.Attachment]? = nil, location: InAppChat.Location? = nil, contact: InAppChat.Contact? = nil, reactions: [InAppChat.Reaction]?, replyCount: Swift.Int = 0, status: InAppChat.Message.Status? = nil, favorite: Swift.Bool = false, currentReaction: Swift.String? = nil)
  public init(_ msg: InAppChat.APIMessage)
  public typealias ID = Swift.String
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension InAppChat.Location {
  public var link: Swift.String {
    get
  }
  public var markdownLink: Swift.String {
    get
  }
}
public struct Avatar : SwiftUI.View {
  public let url: Swift.String?
  public let size: CoreFoundation.CGFloat
  public let group: Swift.Bool
  public init(url: Swift.String?, size: CoreFoundation.CGFloat = 35.0, group: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat6AvatarV4bodyQrvp", 0) __
}
public struct FCMValidationInput : Swift.Codable, Swift.Hashable {
  public var fcmToken: Swift.String
  public var payload: AnyCodable.AnyCodable
  public var options: AnyCodable.AnyCodable?
  public init(fcmToken: Swift.String, payload: AnyCodable.AnyCodable, options: AnyCodable.AnyCodable? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case fcmToken
    case payload
    case options
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.FCMValidationInput.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.FCMValidationInput.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.FCMValidationInput, b: InAppChat.FCMValidationInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class Chats : Foundation.ObservableObject {
  public static var current: InAppChat.Chats
  public func load()
  #if compiler(>=5.3) && $AsyncAwait
  public func loadAsync() async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func loadGroupInvites() async throws
  #endif
  public enum List : Swift.String {
    case groups
    case users
    case threads
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ChannelsPager : InAppChat.Pager<InAppChat.Group> {
  #if compiler(>=5.3) && $AsyncAwait
  override public func load(_ isRefresh: Swift.Bool) async throws -> [InAppChat.Group]
  #endif
  @objc deinit
}
@_Concurrency.MainActor(unsafe) public struct Route<ValidatedData, Content> : SwiftUI.View where Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat5RouteV4bodyQrvp", 0) __<ValidatedData, Content>
}
extension InAppChat.Route where ValidatedData == InAppChat.RouteInformation {
  @_Concurrency.MainActor(unsafe) public init(_ path: Swift.String = "*", @SwiftUI.ViewBuilder content: @escaping (InAppChat.RouteInformation) -> Content)
  @_Concurrency.MainActor(unsafe) public init(_ path: Swift.String = "*", @SwiftUI.ViewBuilder content: @escaping () -> Content)
  @_Concurrency.MainActor(unsafe) public init(_ path: Swift.String = "*", content: @autoclosure @escaping () -> Content)
}
@_hasMissingDesignatedInitializers final public class RouteInformation : Foundation.ObservableObject {
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class PathMatcher : Foundation.ObservableObject {
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct ReactionEvent : Swift.Codable, Swift.Hashable {
  public var eRTCUserId: Swift.String
  public var msgUniqueId: Swift.String
  public var emojiCode: Swift.String
  public var action: Swift.String
  public var totalCount: Swift.Double
  public init(eRTCUserId: Swift.String, msgUniqueId: Swift.String, emojiCode: Swift.String, action: Swift.String, totalCount: Swift.Double)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case eRTCUserId
    case msgUniqueId
    case emojiCode
    case action
    case totalCount
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.ReactionEvent.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.ReactionEvent.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.ReactionEvent, b: InAppChat.ReactionEvent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct APIHelper {
  public static func rejectNil(_ source: [Swift.String : Any?]) -> [Swift.String : Any]?
  public static func rejectNilHeaders(_ source: [Swift.String : Any?]) -> [Swift.String : Swift.String]
  public static func convertBoolToString(_ source: [Swift.String : Any]?) -> [Swift.String : Any]?
  public static func convertAnyToString(_ value: Any?) -> Swift.String?
  public static func mapValueToPathItem(_ source: Any) -> Any
  public static func mapValuesToQueryItems(_ source: [Swift.String : (wrappedValue: Any?, isExplode: Swift.Bool)]) -> [Foundation.URLQueryItem]?
  public static func mapValuesToQueryItems(_ source: [Swift.String : Any?]) -> [Foundation.URLQueryItem]?
}
public struct Spinner : SwiftUI.View {
  public init()
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat7SpinnerV4bodyQrvp", 0) __
}
public struct SpinnerList : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat11SpinnerListV4bodyQrvp", 0) __
}
extension InAppChat.Thread {
  public static func gen(user: InAppChat.User? = nil, group: InAppChat.Group? = nil, latest: InAppChat.Message? = nil, items: [InAppChat.Message]? = nil, unreadCount: Swift.Int? = nil) -> InAppChat.Thread
}
public struct GroupUpdatEventChangeDataGroupId : Swift.Codable, Swift.Hashable {
  public var previous: Swift.String?
  public var new: Swift.String
  public init(previous: Swift.String? = nil, new: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case previous
    case new
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.GroupUpdatEventChangeDataGroupId.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.GroupUpdatEventChangeDataGroupId.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.GroupUpdatEventChangeDataGroupId, b: InAppChat.GroupUpdatEventChangeDataGroupId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct Geometry {
  public let size: CoreFoundation.CGSize
  public let insets: SwiftUI.EdgeInsets
  public var safeWidth: CoreFoundation.CGFloat {
    get
  }
  public var safeHeight: CoreFoundation.CGFloat {
    get
  }
  public var height: CoreFoundation.CGFloat {
    get
  }
  public var width: CoreFoundation.CGFloat {
    get
  }
}
extension CoreFoundation.CGFloat {
  public var minusHeader: CoreFoundation.CGFloat {
    get
  }
  public var minusTabs: CoreFoundation.CGFloat {
    get
  }
  public var tabScreen: CoreFoundation.CGFloat {
    get
  }
}
extension SwiftUI.View {
  public func safeEqual(_ proxy: InAppChat.Geometry) -> some SwiftUI.View
  
  public func equal(_ proxy: InAppChat.Geometry) -> some SwiftUI.View
  
}
public struct GeometryKey : SwiftUI.EnvironmentKey {
  public static let defaultValue: InAppChat.Geometry
  public typealias Value = InAppChat.Geometry
}
public struct IACThemeKey : SwiftUI.EnvironmentKey {
  public static let defaultValue: InAppChat.Theme
  public typealias Value = InAppChat.Theme
}
extension SwiftUI.EnvironmentValues {
  public var geometry: InAppChat.Geometry {
    get
    set
  }
  public var iacTheme: InAppChat.Theme {
    get
    set
  }
}
@_Concurrency.MainActor(unsafe) public struct SwitchRoutes<Content> : SwiftUI.View where Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(@SwiftUI.ViewBuilder contents: @escaping () -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat12SwitchRoutesV4bodyQrvp", 0) __<Content>
}
public struct UserSelfUpdateEventData : Swift.Codable, Swift.Hashable {
  public enum BlockedStatus : Swift.String, Swift.Codable, Swift.CaseIterable {
    case blocked
    case unblocked
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.UserSelfUpdateEventData.BlockedStatus]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.UserSelfUpdateEventData.BlockedStatus] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var threadId: Swift.String?
  public var notificationSettings: InAppChat.NotificationSettings?
  public var availabilityStatus: InAppChat.AvailabilityStatus?
  public var blockedStatus: InAppChat.UserSelfUpdateEventData.BlockedStatus?
  public var targetUser: InAppChat.APIUser?
  public init(threadId: Swift.String? = nil, notificationSettings: InAppChat.NotificationSettings? = nil, availabilityStatus: InAppChat.AvailabilityStatus? = nil, blockedStatus: InAppChat.UserSelfUpdateEventData.BlockedStatus? = nil, targetUser: InAppChat.APIUser? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case threadId
    case notificationSettings
    case availabilityStatus
    case blockedStatus
    case targetUser
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.UserSelfUpdateEventData.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.UserSelfUpdateEventData.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.UserSelfUpdateEventData, b: InAppChat.UserSelfUpdateEventData) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UserThreads : InAppChat.Pager<InAppChat.Thread> {
  #if compiler(>=5.3) && $AsyncAwait
  override public func load(_ isRefresh: Swift.Bool) async throws -> [InAppChat.Thread]
  #endif
  @objc deinit
}
public enum EventMessage : Swift.Codable, Swift.Hashable {
  case typeAvailabilityEvent(InAppChat.AvailabilityEvent)
  case typeChatReportEvent(InAppChat.ChatReportEvent)
  case typeGroupUpdateEvent(InAppChat.GroupUpdateEvent)
  case typeMsgReadEvent(InAppChat.MsgReadEvent)
  case typeNewMessageEvent(InAppChat.NewMessageEvent)
  case typeReactionEvent(InAppChat.ReactionEvent)
  case typeTenantUpdateEvent(InAppChat.TenantUpdateEvent)
  case typeTypingEvent(InAppChat.TypingEvent)
  case typeUpdateMessageEvent(InAppChat.UpdateMessageEvent)
  case typeUserSelfUpdateEvent(InAppChat.UserSelfUpdateEvent)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.EventMessage, b: InAppChat.EventMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor(unsafe) public struct InviteUsers : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(groupID: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat11InviteUsersV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct GroupDrawer : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(_ group: InAppChat.Group)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat11GroupDrawerV4bodyQrvp", 0) __
}
public func publish(_ cl: @escaping () -> Swift.Void)
extension SwiftUI.Color {
  public func new() -> SwiftUI.Color
}
public struct APIGroup : Swift.Codable, Swift.Hashable {
  public enum GroupType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case _public
    case _private
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.APIGroup.GroupType]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.APIGroup.GroupType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var groupId: Swift.String
  public var name: Swift.String
  public var groupType: InAppChat.APIGroup.GroupType
  public var description: Swift.String?
  public var profilePic: Swift.String?
  public var profilePicThumb: Swift.String?
  public var createdAt: Swift.Double
  public var creatorId: Swift.String?
  public var threadId: Swift.String?
  public var participants: [InAppChat.Participant]?
  public init(groupId: Swift.String, name: Swift.String, groupType: InAppChat.APIGroup.GroupType, description: Swift.String? = nil, profilePic: Swift.String? = nil, profilePicThumb: Swift.String? = nil, createdAt: Swift.Double, creatorId: Swift.String? = nil, threadId: Swift.String? = nil, participants: [InAppChat.Participant]? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case groupId
    case name
    case groupType
    case description
    case profilePic
    case profilePicThumb
    case createdAt
    case creatorId
    case threadId
    case participants
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.APIGroup.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.APIGroup.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.APIGroup, b: InAppChat.APIGroup) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class ChatReportAPI {
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func approveChatReport(chatReportId: Swift.String) async throws
  #endif
  open class func approveChatReportWithRequestBuilder(chatReportId: Swift.String) -> InAppChat.RequestBuilder<Swift.Void>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func createChatReport(mid: Swift.String, createChatReport: InAppChat.CreateChatReport) async throws -> InAppChat.Report
  #endif
  open class func createChatReportWithRequestBuilder(mid: Swift.String, createChatReport: InAppChat.CreateChatReport) -> InAppChat.RequestBuilder<InAppChat.Report>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func deleteChatReportDelete(chatReportId: Swift.String) async throws
  #endif
  open class func deleteChatReportDeleteWithRequestBuilder(chatReportId: Swift.String) -> InAppChat.RequestBuilder<Swift.Void>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getChatReport(chatReportId: Swift.String) async throws -> InAppChat.Report
  #endif
  open class func getChatReportWithRequestBuilder(chatReportId: Swift.String) -> InAppChat.RequestBuilder<InAppChat.Report>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getChatReportList(uid: Swift.String, skip: Swift.Int? = nil, limit: Swift.Int? = nil, threadId: Swift.String? = nil, category: InAppChat.ReportCategory? = nil, status: InAppChat.ReportStatus? = nil, msgType: Swift.String? = nil) async throws -> [InAppChat.Report]
  #endif
  open class func getChatReportListWithRequestBuilder(uid: Swift.String, skip: Swift.Int? = nil, limit: Swift.Int? = nil, threadId: Swift.String? = nil, category: InAppChat.ReportCategory? = nil, status: InAppChat.ReportStatus? = nil, msgType: Swift.String? = nil) -> InAppChat.RequestBuilder<[InAppChat.Report]>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func ignoreChatReport(chatReportId: Swift.String) async throws
  #endif
  open class func ignoreChatReportWithRequestBuilder(chatReportId: Swift.String) -> InAppChat.RequestBuilder<Swift.Void>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func updateChatReport(chatReportId: Swift.String, createChatReport: InAppChat.CreateChatReport) async throws
  #endif
  open class func updateChatReportWithRequestBuilder(chatReportId: Swift.String, createChatReport: InAppChat.CreateChatReport) -> InAppChat.RequestBuilder<Swift.Void>
  @objc deinit
}
final public class Group : Foundation.ObservableObject, Swift.Identifiable {
  final public let id: Swift.String
  @Combine.Published @_projectedValueProperty($name) final public var name: Swift.String {
    get
    set
    _modify
  }
  final public var $name: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($description) final public var description: Swift.String? {
    get
    set
    _modify
  }
  final public var $description: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($image) final public var image: Swift.String? {
    get
    set
    _modify
  }
  final public var $image: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($participants) final public var participants: [InAppChat.Participant] {
    get
    set
    _modify
  }
  final public var $participants: Combine.Published<[InAppChat.Participant]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  final public var admins: [InAppChat.User] {
    get
  }
  final public var onlineNotAdminUsers: [InAppChat.User] {
    get
  }
  final public var offlineUsers: [InAppChat.User] {
    get
  }
  @Combine.Published @_projectedValueProperty($_private) final public var _private: Swift.Bool {
    get
    set
    _modify
  }
  final public var $_private: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(id: Swift.String, name: Swift.String, description: Swift.String? = nil, image: Swift.String? = nil, participants: [InAppChat.Participant] = [], _private: Swift.Bool = false, invites: [InAppChat.User] = [])
  public init(_ group: InAppChat.APIGroup)
  public typealias ID = Swift.String
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct GroupUpdatEventChangeDataName : Swift.Codable, Swift.Hashable {
  public var previous: Swift.String?
  public var new: Swift.String
  public init(previous: Swift.String? = nil, new: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case previous
    case new
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.GroupUpdatEventChangeDataName.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.GroupUpdatEventChangeDataName.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.GroupUpdatEventChangeDataName, b: InAppChat.GroupUpdatEventChangeDataName) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct ContactRow : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat10ContactRowV4bodyQrvp", 0) __
}
public struct GreyOutOfFocusView : SwiftUI.View {
  public init(opacity: CoreFoundation.CGFloat = 0.7, callback: (() -> ())? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat18GreyOutOfFocusViewV4bodyQrvp", 0) __
}
extension SwiftUI.Binding where Value == Swift.Bool {
  public init<Wrapped>(mappedTo bindingToOptional: SwiftUI.Binding<Wrapped?>)
}
extension SwiftUI.Binding {
  public func mappedToBool<Wrapped>() -> SwiftUI.Binding<Swift.Bool> where Value == Wrapped?
}
@_hasMissingDesignatedInitializers open class GroupAPI {
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func acceptGroupInvite(gid: Swift.String) async throws -> InAppChat.APIThread
  #endif
  open class func acceptGroupInviteWithRequestBuilder(gid: Swift.String) -> InAppChat.RequestBuilder<InAppChat.APIThread>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func addParticipant(gid: Swift.String, uid: Swift.String) async throws
  #endif
  open class func addParticipantWithRequestBuilder(gid: Swift.String, uid: Swift.String) -> InAppChat.RequestBuilder<Swift.Void>
  public enum GroupType_createGroup : Swift.String, Swift.CaseIterable {
    case _public
    case _private
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.GroupAPI.GroupType_createGroup]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.GroupAPI.GroupType_createGroup] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func createGroup(name: Swift.String, participants: [Swift.String], groupType: InAppChat.GroupAPI.GroupType_createGroup? = nil, description: Swift.String? = nil, profilePic: Foundation.URL? = nil) async throws -> InAppChat.APIGroup
  #endif
  open class func createGroupWithRequestBuilder(name: Swift.String, participants: [Swift.String], groupType: InAppChat.GroupAPI.GroupType_createGroup? = nil, description: Swift.String? = nil, profilePic: Foundation.URL? = nil) -> InAppChat.RequestBuilder<InAppChat.APIGroup>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func deleteGroup(gid: Swift.String) async throws
  #endif
  open class func deleteGroupWithRequestBuilder(gid: Swift.String) -> InAppChat.RequestBuilder<Swift.Void>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func dismissGroupInvite(gid: Swift.String) async throws
  #endif
  open class func dismissGroupInviteWithRequestBuilder(gid: Swift.String) -> InAppChat.RequestBuilder<Swift.Void>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getGroup(gid: Swift.String) async throws -> InAppChat.APIGroup
  #endif
  open class func getGroupWithRequestBuilder(gid: Swift.String) -> InAppChat.RequestBuilder<InAppChat.APIGroup>
  public enum GroupType_getGroups : Swift.String, Swift.CaseIterable {
    case _public
    case _private
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.GroupAPI.GroupType_getGroups]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.GroupAPI.GroupType_getGroups] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Joined_getGroups : Swift.String, Swift.CaseIterable {
    case yes
    case no
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.GroupAPI.Joined_getGroups]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.GroupAPI.Joined_getGroups] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getGroups(limit: Swift.Int? = nil, skip: Swift.Int? = nil, groupType: InAppChat.GroupAPI.GroupType_getGroups? = nil, joined: InAppChat.GroupAPI.Joined_getGroups? = nil) async throws -> [InAppChat.APIGroup]
  #endif
  open class func getGroupsWithRequestBuilder(limit: Swift.Int? = nil, skip: Swift.Int? = nil, groupType: InAppChat.GroupAPI.GroupType_getGroups? = nil, joined: InAppChat.GroupAPI.Joined_getGroups? = nil) -> InAppChat.RequestBuilder<[InAppChat.APIGroup]>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getInvites() async throws -> [InAppChat.Invite]
  #endif
  open class func getInvitesWithRequestBuilder() -> InAppChat.RequestBuilder<[InAppChat.Invite]>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func groupAddAdmin(uid: Swift.String, gid: Swift.String) async throws
  #endif
  open class func groupAddAdminWithRequestBuilder(uid: Swift.String, gid: Swift.String) -> InAppChat.RequestBuilder<Swift.Void>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func groupDismissAdmin(uid: Swift.String, gid: Swift.String) async throws
  #endif
  open class func groupDismissAdminWithRequestBuilder(uid: Swift.String, gid: Swift.String) -> InAppChat.RequestBuilder<Swift.Void>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func inviteUser(gid: Swift.String, requestBody: [Swift.String]) async throws
  #endif
  open class func inviteUserWithRequestBuilder(gid: Swift.String, requestBody: [Swift.String]) -> InAppChat.RequestBuilder<Swift.Void>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func moderateGroup(gid: Swift.String, moderateGroupInput: InAppChat.ModerateGroupInput) async throws
  #endif
  open class func moderateGroupWithRequestBuilder(gid: Swift.String, moderateGroupInput: InAppChat.ModerateGroupInput) -> InAppChat.RequestBuilder<Swift.Void>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func removeGroupImage(gid: Swift.String) async throws
  #endif
  open class func removeGroupImageWithRequestBuilder(gid: Swift.String) -> InAppChat.RequestBuilder<Swift.Void>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func removeParticipant(gid: Swift.String, uid: Swift.String) async throws
  #endif
  open class func removeParticipantWithRequestBuilder(gid: Swift.String, uid: Swift.String) -> InAppChat.RequestBuilder<Swift.Void>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func updateGroup(gid: Swift.String, updateGroupInput: InAppChat.UpdateGroupInput) async throws -> InAppChat.APIGroup
  #endif
  open class func updateGroupWithRequestBuilder(gid: Swift.String, updateGroupInput: InAppChat.UpdateGroupInput) -> InAppChat.RequestBuilder<InAppChat.APIGroup>
  @objc deinit
}
public struct GroupUpdatEventChangeDataGroupType : Swift.Codable, Swift.Hashable {
  public enum Previous : Swift.String, Swift.Codable, Swift.CaseIterable {
    case _public
    case _private
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.GroupUpdatEventChangeDataGroupType.Previous]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.GroupUpdatEventChangeDataGroupType.Previous] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public enum New : Swift.String, Swift.Codable, Swift.CaseIterable {
    case _public
    case _private
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.GroupUpdatEventChangeDataGroupType.New]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.GroupUpdatEventChangeDataGroupType.New] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var previous: InAppChat.GroupUpdatEventChangeDataGroupType.Previous?
  public var new: InAppChat.GroupUpdatEventChangeDataGroupType.New
  public init(previous: InAppChat.GroupUpdatEventChangeDataGroupType.Previous? = nil, new: InAppChat.GroupUpdatEventChangeDataGroupType.New)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case previous
    case new
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.GroupUpdatEventChangeDataGroupType.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.GroupUpdatEventChangeDataGroupType.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.GroupUpdatEventChangeDataGroupType, b: InAppChat.GroupUpdatEventChangeDataGroupType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct GroupUpdateEventItem : Swift.Codable, Swift.Hashable {
  public enum EventType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case created
    case participantsadded
    case participantsremoved
    case namechange
    case profilepicchanged
    case descriptionchanged
    case grouptypechanged
    case profilepicremoved
    case adminmade
    case admindismissed
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.GroupUpdateEventItem.EventType]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.GroupUpdateEventItem.EventType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var eventType: InAppChat.GroupUpdateEventItem.EventType
  public var eventData: InAppChat.GroupUpdateEventData
  public init(eventType: InAppChat.GroupUpdateEventItem.EventType, eventData: InAppChat.GroupUpdateEventData)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case eventType
    case eventData
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.GroupUpdateEventItem.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.GroupUpdateEventItem.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.GroupUpdateEventItem, b: InAppChat.GroupUpdateEventItem) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public protocol URLSessionProtocol {
  #if compiler(>=5.3) && $Sendable
  func dataTask(with request: Foundation.URLRequest, completionHandler: @escaping @Sendable (Foundation.Data?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void) -> Foundation.URLSessionDataTask
  #endif
}
extension Foundation.URLSession : InAppChat.URLSessionProtocol {
}
public typealias InAppChatAPIChallengeHandler = ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLAuthenticationChallenge) -> (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?))
@_inheritsConvenienceInitializers open class URLSessionRequestBuilder<T> : InAppChat.RequestBuilder<T> {
  public var taskDidReceiveChallenge: InAppChat.InAppChatAPIChallengeHandler?
  @available(*, deprecated, message: "Please override execute() method to intercept and handle errors like authorization or retry the request. Check the Wiki for more info. https://github.com/OpenAPITools/openapi-generator/wiki/FAQ#how-do-i-implement-bearer-token-authentication-with-urlsession-on-the-swift-api-client")
  public var taskCompletionShouldRetry: ((Foundation.Data?, Foundation.URLResponse?, Swift.Error?, @escaping (Swift.Bool) -> Swift.Void) -> Swift.Void)?
  required public init(method: Swift.String, URLString: Swift.String, parameters: [Swift.String : Any]?, headers: [Swift.String : Swift.String] = [:], requiresAuthentication: Swift.Bool)
  open func createURLSession() -> InAppChat.URLSessionProtocol
  open func contentTypeForFormPart(fileURL: Foundation.URL) -> Swift.String?
  open func createURLRequest(urlSession: InAppChat.URLSessionProtocol, method: InAppChat.HTTPMethod, encoding: InAppChat.ParameterEncoding, headers: [Swift.String : Swift.String]) throws -> Foundation.URLRequest
  @discardableResult
  override open func execute(_ apiResponseQueue: Dispatch.DispatchQueue = InAppChatAPI.apiResponseQueue, _ completion: @escaping (_ result: Swift.Result<InAppChat.Response<T>, InAppChat.ErrorResponse>) -> Swift.Void) -> InAppChat.RequestTask
  open func buildHeaders() -> [Swift.String : Swift.String]
  @objc deinit
}
@_inheritsConvenienceInitializers open class URLSessionDecodableRequestBuilder<T> : InAppChat.URLSessionRequestBuilder<T> where T : Swift.Decodable {
  required public init(method: Swift.String, URLString: Swift.String, parameters: [Swift.String : Any]?, headers: [Swift.String : Swift.String] = super, requiresAuthentication: Swift.Bool)
  @objc deinit
}
public enum HTTPMethod : Swift.String {
  case options
  case get
  case head
  case post
  case put
  case patch
  case delete
  case trace
  case connect
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol ParameterEncoding {
  func encode(_ urlRequest: Foundation.URLRequest, with parameters: [Swift.String : Any]?) throws -> Foundation.URLRequest
}
extension InAppChat.JSONDataEncoding : InAppChat.ParameterEncoding {
}
public struct GroupUpdateEvent : Swift.Codable, Swift.Hashable {
  public var eventTriggeredByUser: InAppChat.APIUser
  public var groupId: Swift.String
  public var threadId: Swift.String
  public var eventList: [InAppChat.GroupUpdateEventItem]
  public init(eventTriggeredByUser: InAppChat.APIUser, groupId: Swift.String, threadId: Swift.String, eventList: [InAppChat.GroupUpdateEventItem])
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case eventTriggeredByUser
    case groupId
    case threadId
    case eventList
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.GroupUpdateEvent.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.GroupUpdateEvent.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.GroupUpdateEvent, b: InAppChat.GroupUpdateEvent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct Profile : SwiftUI.View {
  public init(id: Swift.String)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat7ProfileV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct UserProfile : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat11UserProfileV4bodyQrvp", 0) __
}
public struct Auth : Swift.Codable, Swift.Hashable {
  public var token: InAppChat.Token
  public var user: InAppChat.APIUser
  public var notificationSettings: InAppChat.NotificationSettings?
  public init(token: InAppChat.Token, user: InAppChat.APIUser, notificationSettings: InAppChat.NotificationSettings? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case token
    case user
    case notificationSettings
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.Auth.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.Auth.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.Auth, b: InAppChat.Auth) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct ChannelQuery : Swift.Codable, Swift.Hashable {
  public enum GroupType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case _public
    case _private
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.ChannelQuery.GroupType]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.ChannelQuery.GroupType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var joined: Swift.Bool?
  public var groupType: InAppChat.ChannelQuery.GroupType?
  public init(joined: Swift.Bool? = nil, groupType: InAppChat.ChannelQuery.GroupType? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case joined
    case groupType
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.ChannelQuery.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.ChannelQuery.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.ChannelQuery, b: InAppChat.ChannelQuery) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class Settings : Foundation.ObservableObject {
  public func setNotification(_ setting: InAppChat.NotificationSettings.AllowFrom, isSync: Swift.Bool = false)
  public func setAvailability(_ availability: InAppChat.AvailabilityStatus, isSync: Swift.Bool = false)
  public func setBlock(_ uid: Swift.String, _ blocked: Swift.Bool)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GroupsPager : InAppChat.Pager<InAppChat.Thread> {
  #if compiler(>=5.3) && $AsyncAwait
  override public func load(_ isRefresh: Swift.Bool) async throws -> [InAppChat.Thread]
  #endif
  @objc deinit
}
public struct InAppChatUI<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(theme: InAppChat.Theme = Theme.default, @SwiftUI.ViewBuilder content: @escaping () -> Content = { IACMainRoutes() })
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat0abC2UIV4bodyQrvp", 0) __<Content>
}
public struct GifImageView : SwiftUI.View {
  public init(url: Swift.String)
  public init(url: Foundation.URL)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat12GifImageViewV4bodyQrvp", 0) __
}
public struct ChatRoute : SwiftUI.View {
  public init(uid: Swift.String? = nil, gid: Swift.String? = nil, mid: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat0C5RouteV4bodyQrvp", 0) __
}
public struct APIMessage : Swift.Codable, Swift.Hashable {
  public enum ChatReportStatus : Swift.String, Swift.Codable, Swift.CaseIterable {
    case new
    case reportconsidered
    case reportignored
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.APIMessage.ChatReportStatus]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.APIMessage.ChatReportStatus] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var msgUniqueId: Swift.String
  public var message: Swift.String?
  public var msgType: InAppChat.MessageType?
  public var contact: InAppChat.Contact?
  public var location: InAppChat.Location?
  public var media: InAppChat.Media?
  public var gify: Swift.String?
  public var sendereRTCUserId: Swift.String
  public var createdAt: Swift.String
  public var replyThreadFeatureData: InAppChat.Reply?
  public var forwardChatFeatureData: InAppChat.Forward?
  public var reactions: [InAppChat.Reaction]?
  public var isEdited: Swift.Bool?
  public var isStarred: Swift.Bool?
  public var follow: Swift.Bool?
  public var chatReportId: Swift.String?
  public var chatReportStatus: InAppChat.APIMessage.ChatReportStatus?
  public var mentions: [InAppChat.Mention]?
  public var customData: [Swift.String : AnyCodable.AnyCodable]?
  public var deleteScheduleAt: Swift.String?
  public var replyMsgCount: Swift.Int?
  public var threadId: Swift.String
  public var replies: [InAppChat.APIMessage]?
  public var encryptedChatList: [InAppChat.EncryptedMessage]?
  public init(msgUniqueId: Swift.String, message: Swift.String? = nil, msgType: InAppChat.MessageType? = nil, contact: InAppChat.Contact? = nil, location: InAppChat.Location? = nil, media: InAppChat.Media? = nil, gify: Swift.String? = nil, sendereRTCUserId: Swift.String, createdAt: Swift.String, replyThreadFeatureData: InAppChat.Reply? = nil, forwardChatFeatureData: InAppChat.Forward? = nil, reactions: [InAppChat.Reaction]? = nil, isEdited: Swift.Bool? = nil, isStarred: Swift.Bool? = nil, follow: Swift.Bool? = nil, chatReportId: Swift.String? = nil, chatReportStatus: InAppChat.APIMessage.ChatReportStatus? = nil, mentions: [InAppChat.Mention]? = nil, customData: [Swift.String : AnyCodable.AnyCodable]? = nil, deleteScheduleAt: Swift.String? = nil, replyMsgCount: Swift.Int? = nil, threadId: Swift.String, replies: [InAppChat.APIMessage]? = nil, encryptedChatList: [InAppChat.EncryptedMessage]? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case msgUniqueId
    case message
    case msgType
    case contact
    case location
    case media
    case gify
    case sendereRTCUserId
    case createdAt
    case replyThreadFeatureData
    case forwardChatFeatureData
    case reactions
    case isEdited
    case isStarred
    case follow
    case chatReportId
    case chatReportStatus
    case mentions
    case customData
    case deleteScheduleAt
    case replyMsgCount
    case threadId
    case replies
    case encryptedChatList
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.APIMessage.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.APIMessage.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.APIMessage, b: InAppChat.APIMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
final public class SharedState : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($selectedEmoji) final public var selectedEmoji: InAppChat.Emoji? {
    get
    set
    _modify
  }
  final public var $selectedEmoji: Combine.Published<InAppChat.Emoji?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isSearching) final public var isSearching: Swift.Bool {
    get
    set
    _modify
  }
  final public var $isSearching: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($keyword) final public var keyword: Swift.String {
    get
    set
    _modify
  }
  final public var $keyword: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($currentCategory) final public var currentCategory: Swift.String {
    get
    set
    _modify
  }
  final public var $currentCategory: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init()
  final public func resetState()
  public static var defaultCategory: Swift.String {
    get
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct AudioView : SwiftUI.View {
  public init(_ url: Swift.String)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat9AudioViewV4bodyQrvp", 0) __
}
public struct RepliesView : SwiftUI.View {
  public init(message: InAppChat.Message)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat11RepliesViewV4bodyQrvp", 0) __
}
public struct Mention : Swift.Codable, Swift.Hashable {
  public var type: Swift.String?
  public var value: Swift.String?
  public init(type: Swift.String? = nil, value: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case type
    case value
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.Mention.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.Mention.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.Mention, b: InAppChat.Mention) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct Participant : Swift.Codable, Swift.Hashable {
  public enum Role : Swift.String, Swift.Codable, Swift.CaseIterable {
    case user
    case admin
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.Participant.Role]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.Participant.Role] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var appUserId: Swift.String
  public var eRTCUserId: Swift.String
  public var role: InAppChat.Participant.Role
  public var joinedAtDate: Foundation.Date
  public init(appUserId: Swift.String, eRTCUserId: Swift.String, role: InAppChat.Participant.Role, joinedAtDate: Foundation.Date)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case appUserId
    case eRTCUserId
    case role
    case joinedAtDate
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.Participant.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.Participant.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.Participant, b: InAppChat.Participant) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct IACRadio : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat8IACRadioV4bodyQrvp", 0) __
}
public struct Location : Swift.Codable, Swift.Hashable {
  public var longitude: Swift.Double?
  public var latitude: Swift.Double?
  public var address: Swift.String?
  public init(longitude: Swift.Double? = nil, latitude: Swift.Double? = nil, address: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case longitude
    case latitude
    case address
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.Location.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.Location.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.Location, b: InAppChat.Location) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct SenderKeyDetails : Swift.Codable, Swift.Hashable {
  public var keyId: Swift.String
  public var deviceId: Swift.String
  public var publicKey: Swift.String
  public init(keyId: Swift.String, deviceId: Swift.String, publicKey: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case keyId
    case deviceId
    case publicKey
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.SenderKeyDetails.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.SenderKeyDetails.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.SenderKeyDetails, b: InAppChat.SenderKeyDetails) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
extension UIKit.UIScrollView {
  public typealias ValueChangedAction = ((_ refreshControl: UIKit.UIRefreshControl) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func onRefresh(_ onValueChanged: @escaping UIKit.UIScrollView.ValueChangedAction)
}
extension SwiftUI.View {
  public func onRefresh(onValueChanged: @escaping UIKit.UIScrollView.ValueChangedAction) -> some SwiftUI.View
  
}
extension SwiftUI.View {
  #if compiler(>=5.3) && $AsyncAwait && $Sendable
  @available(iOS, obsoleted: 15)
  public func refreshable(action: @escaping @Sendable () async -> Swift.Void) -> some SwiftUI.View
  
  #endif
}
public struct GroupPlaceholder : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat16GroupPlaceholderV4bodyQrvp", 0) __
}
public struct UserSelfUpdateEvent : Swift.Codable, Swift.Hashable {
  public var eRTCUserId: Swift.String
  public var eventList: [InAppChat.SelfUpdateItem]
  public init(eRTCUserId: Swift.String, eventList: [InAppChat.SelfUpdateItem])
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case eRTCUserId
    case eventList
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.UserSelfUpdateEvent.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.UserSelfUpdateEvent.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.UserSelfUpdateEvent, b: InAppChat.UserSelfUpdateEvent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public enum MessageType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case text
  case image
  case audio
  case video
  case gif
  case file
  case contact
  case location
  public init?(rawValue: Swift.String)
  public typealias AllCases = [InAppChat.MessageType]
  public typealias RawValue = Swift.String
  public static var allCases: [InAppChat.MessageType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@_Concurrency.MainActor(unsafe) public struct MessageList : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat11MessageListV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct RepliesList : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(_ thread: InAppChat.Thread, message: InAppChat.Message, onLongPress: @escaping (InAppChat.Message) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat11RepliesListV4bodyQrvp", 0) __
}
@_hasMissingDesignatedInitializers final public class Thread : InAppChat.Pager<InAppChat.Message>, Swift.Identifiable {
  public static let id: Swift.String
  final public let id: Swift.String
  final public let user: InAppChat.User?
  final public let group: InAppChat.Group?
  @Combine.Published @_projectedValueProperty($unreadCount) final public var unreadCount: Swift.Int {
    get
    set
    _modify
  }
  final public var $unreadCount: Combine.Published<Swift.Int>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($typingUsers) final public var typingUsers: [Swift.String] {
    get
    set
    _modify
  }
  final public var $typingUsers: Combine.Published<[Swift.String]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($sending) final public var sending: [InAppChat.Message] {
    get
    set
    _modify
  }
  final public var $sending: Combine.Published<[InAppChat.Message]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($failed) final public var failed: [InAppChat.Message] {
    get
    set
    _modify
  }
  final public var $failed: Combine.Published<[InAppChat.Message]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($notifications) final public var notifications: InAppChat.NotificationSettings.AllowFrom {
    get
    set
    _modify
  }
  final public var $notifications: Combine.Published<InAppChat.NotificationSettings.AllowFrom>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($latest) final public var latest: InAppChat.Message? {
    get
    set
    _modify
  }
  final public var $latest: Combine.Published<InAppChat.Message?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(id: Swift.String, user: InAppChat.User?, group: InAppChat.Group?, latest: InAppChat.Message?, items: [InAppChat.Message] = [], unreadCount: Swift.Int = 0)
  #if compiler(>=5.3) && $AsyncAwait
  override final public func load(_ isRefresh: Swift.Bool) async -> [InAppChat.Message]
  #endif
  public typealias ID = Swift.String
  @objc deinit
}
extension Swift.String : Swift.CodingKey {
  public var stringValue: Swift.String {
    get
  }
  public init?(stringValue: Swift.String)
  public var intValue: Swift.Int? {
    get
  }
  public init?(intValue: Swift.Int)
}
extension Swift.KeyedEncodingContainerProtocol {
  public mutating func encodeArray<T>(_ values: [T], forKey key: Self.Key) throws where T : Swift.Encodable
  public mutating func encodeArrayIfPresent<T>(_ values: [T]?, forKey key: Self.Key) throws where T : Swift.Encodable
  public mutating func encodeMap<T>(_ pairs: [Self.Key : T]) throws where T : Swift.Encodable, Self.Key : Swift.Hashable
  public mutating func encodeMapIfPresent<T>(_ pairs: [Self.Key : T]?) throws where T : Swift.Encodable, Self.Key : Swift.Hashable
  public mutating func encode(_ value: Foundation.Decimal, forKey key: Self.Key) throws
  public mutating func encodeIfPresent(_ value: Foundation.Decimal?, forKey key: Self.Key) throws
}
extension Swift.KeyedDecodingContainerProtocol {
  public func decodeArray<T>(_ type: T.Type, forKey key: Self.Key) throws -> [T] where T : Swift.Decodable
  public func decodeArrayIfPresent<T>(_ type: T.Type, forKey key: Self.Key) throws -> [T]? where T : Swift.Decodable
  public func decodeMap<T>(_ type: T.Type, excludedKeys: Swift.Set<Self.Key>) throws -> [Self.Key : T] where T : Swift.Decodable, Self.Key : Swift.Hashable
  public func decode(_ type: Foundation.Decimal.Type, forKey key: Self.Key) throws -> Foundation.Decimal
  public func decodeIfPresent(_ type: Foundation.Decimal.Type, forKey key: Self.Key) throws -> Foundation.Decimal?
}
extension InAppChat.Message {
  public static var sample: InAppChat.Message {
    get
  }
  public static var sampleImage: InAppChat.Message {
    get
  }
  public static var sampleGif: InAppChat.Message {
    get
  }
  public static func gen(user: InAppChat.User = User.sample, threadID: Swift.String? = nil, text: Swift.String? = nil, parent: InAppChat.Message? = nil, attachments: [InAppChat.Message.Attachment]? = nil, location: InAppChat.Location? = nil, contact: InAppChat.Contact? = nil, replies: Swift.Int = 2, reactions: [InAppChat.Reaction]? = nil, createdAt: Foundation.Date = Date(), favorite: Swift.Bool? = nil, currentReaction: Swift.String? = nil) -> InAppChat.Message
}
@_inheritsConvenienceInitializers public class Favorites : InAppChat.Pager<InAppChat.Message> {
  public init()
  #if compiler(>=5.3) && $AsyncAwait
  override public func load(_ isRefresh: Swift.Bool) async -> [InAppChat.Message]
  #endif
  @objc deinit
}
extension InAppChat.User {
  public static var sample: InAppChat.User {
    get
  }
  public static var sampleCurrent: InAppChat.User {
    get
  }
  public static func gen() -> InAppChat.User
}
@_Concurrency.MainActor(unsafe) public struct CreateGroup : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(_ groupID: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat11CreateGroupV4bodyQrvp", 0) __
}
@objc @_inheritsConvenienceInitializers public class LocationUtil : ObjectiveC.NSObject, CoreLocation.CLLocationManagerDelegate {
  @objc override dynamic public init()
  @objc public func locationManagerDidChangeAuthorization(_ manager: CoreLocation.CLLocationManager)
  #if compiler(>=5.3) && $AsyncAwait
  public static func requestPermission(inApp: Swift.Bool = true) async throws -> Swift.Bool
  #endif
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: Swift.Error)
  #if compiler(>=5.3) && $AsyncAwait
  public static func fetch() async throws -> (latitude: Swift.Double, longitude: Swift.Double)
  #endif
  @objc deinit
}
public struct ModerateGroupInput : Swift.Codable, Swift.Hashable {
  public enum ModelType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case ban
    case mute
    case unmute
    case unban
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.ModerateGroupInput.ModelType]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.ModerateGroupInput.ModelType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var participants: [Swift.String]
  public var type: InAppChat.ModerateGroupInput.ModelType
  public var till: Swift.String?
  public init(participants: [Swift.String], type: InAppChat.ModerateGroupInput.ModelType, till: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case participants
    case type
    case till
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.ModerateGroupInput.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.ModerateGroupInput.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.ModerateGroupInput, b: InAppChat.ModerateGroupInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct AZVideoPlayer : SwiftUI.UIViewControllerRepresentable {
  public typealias TransitionCompletion = (AVKit.AVPlayerViewController, UIKit.UIViewControllerTransitionCoordinator) -> Swift.Void
  public init(player: AVFoundation.AVPlayer?, willBeginFullScreenPresentationWithAnimationCoordinator: InAppChat.AZVideoPlayer.TransitionCompletion? = nil, willEndFullScreenPresentationWithAnimationCoordinator: InAppChat.AZVideoPlayer.TransitionCompletion? = nil, showsPlaybackControls: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public func makeUIViewController(context: InAppChat.AZVideoPlayer.Context) -> AVKit.AVPlayerViewController
  @_Concurrency.MainActor(unsafe) public func updateUIViewController(_ controller: AVKit.AVPlayerViewController, context: InAppChat.AZVideoPlayer.Context)
  @_Concurrency.MainActor(unsafe) public func makeCoordinator() -> InAppChat.AZVideoPlayer.Coordinator
  @objc @_hasMissingDesignatedInitializers final public class Coordinator : ObjectiveC.NSObject, AVKit.AVPlayerViewControllerDelegate {
    @objc final public func playerViewController(_ playerViewController: AVKit.AVPlayerViewController, willBeginFullScreenPresentationWithAnimationCoordinator coordinator: UIKit.UIViewControllerTransitionCoordinator)
    @objc final public func playerViewController(_ playerViewController: AVKit.AVPlayerViewController, willEndFullScreenPresentationWithAnimationCoordinator coordinator: UIKit.UIViewControllerTransitionCoordinator)
    @objc deinit
  }
  public static func continuePlayingIfPlaying(_ player: AVFoundation.AVPlayer?, _ coordinator: UIKit.UIViewControllerTransitionCoordinator)
  public typealias Body = Swift.Never
  public typealias UIViewControllerType = AVKit.AVPlayerViewController
}
public struct TenantUpdateEvent : Swift.Codable, Swift.Hashable {
  public var tenantId: Swift.String
  public init(tenantId: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case tenantId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.TenantUpdateEvent.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.TenantUpdateEvent.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.TenantUpdateEvent, b: InAppChat.TenantUpdateEvent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
@_Concurrency.MainActor(unsafe) public struct ChannelRow : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public var row: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat10ChannelRowV4bodyQrvp", 0) __
}
public struct Badge : SwiftUI.View {
  public let count: Swift.Int
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat5BadgeV4bodyQrvp", 0) __
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GroupThreads : InAppChat.Pager<InAppChat.Thread> {
  #if compiler(>=5.3) && $AsyncAwait
  override public func load(_ isRefresh: Swift.Bool) async -> [InAppChat.Thread]
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UserSharedMedia : InAppChat.Pager<InAppChat.Message> {
  public init(_ id: Swift.String)
  #if compiler(>=5.3) && $AsyncAwait
  override public func load(_ isRefresh: Swift.Bool) async -> [InAppChat.Message]
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers open class AuthAPI {
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func auth0Login(loginInput: InAppChat.LoginInput) async throws -> InAppChat.Auth
  #endif
  open class func auth0LoginWithRequestBuilder(loginInput: InAppChat.LoginInput) -> InAppChat.RequestBuilder<InAppChat.Auth>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func changePassword(loginPasswordInput: InAppChat.LoginPasswordInput) async throws
  #endif
  open class func changePasswordWithRequestBuilder(loginPasswordInput: InAppChat.LoginPasswordInput) -> InAppChat.RequestBuilder<Swift.Void>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func logout(deviceid: Swift.String) async throws
  #endif
  open class func logoutWithRequestBuilder(deviceid: Swift.String) -> InAppChat.RequestBuilder<Swift.Void>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func logoutOtherDevices() async throws
  #endif
  open class func logoutOtherDevicesWithRequestBuilder() -> InAppChat.RequestBuilder<Swift.Void>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func nftLogin(nFTLoginInput: InAppChat.NFTLoginInput) async throws -> InAppChat.Auth
  #endif
  open class func nftLoginWithRequestBuilder(nFTLoginInput: InAppChat.NFTLoginInput) -> InAppChat.RequestBuilder<InAppChat.Auth>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func resetPassword(resetPasswordInput: InAppChat.ResetPasswordInput) async throws
  #endif
  open class func resetPasswordWithRequestBuilder(resetPasswordInput: InAppChat.ResetPasswordInput) -> InAppChat.RequestBuilder<Swift.Void>
  @objc deinit
}
public enum AvailabilityStatus : Swift.String, Swift.Codable, Swift.CaseIterable {
  case online
  case away
  case invisible
  case dnd
  case offline
  public init?(rawValue: Swift.String)
  public typealias AllCases = [InAppChat.AvailabilityStatus]
  public typealias RawValue = Swift.String
  public static var allCases: [InAppChat.AvailabilityStatus] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct ContactPicker : SwiftUI.UIViewControllerRepresentable {
  public init(onContact: @escaping (Contacts.CNContact) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func makeUIViewController(context: SwiftUI.UIViewControllerRepresentableContext<InAppChat.ContactPicker>) -> ContactsUI.CNContactPickerViewController
  @_Concurrency.MainActor(unsafe) public func updateUIViewController(_ uiViewController: ContactsUI.CNContactPickerViewController, context: SwiftUI.UIViewControllerRepresentableContext<InAppChat.ContactPicker>)
  @_Concurrency.MainActor(unsafe) public func makeCoordinator() -> InAppChat.ContactPicker.Coordinator
  @objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class Coordinator : ObjectiveC.NSObject, ContactsUI.CNContactPickerDelegate, UIKit.UINavigationControllerDelegate {
    @_Concurrency.MainActor(unsafe) @objc final public func contactPicker(_ picker: ContactsUI.CNContactPickerViewController, didSelect contact: Contacts.CNContact)
    @_Concurrency.MainActor(unsafe) @objc final public func contactPickerDidCancel(_ picker: ContactsUI.CNContactPickerViewController)
    @objc deinit
  }
  public typealias Body = Swift.Never
  public typealias UIViewControllerType = ContactsUI.CNContactPickerViewController
}
public struct ChatsView : SwiftUI.View {
  public init(scrollToTop: SwiftUI.Binding<Swift.Int>)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat9ChatsViewV4bodyQrvp", 0) __
}
public enum NullEncodable<Wrapped> : Swift.Hashable where Wrapped : Swift.Hashable {
  case encodeNothing
  case encodeNull
  case encodeValue(Wrapped)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.NullEncodable<Wrapped>, b: InAppChat.NullEncodable<Wrapped>) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension InAppChat.NullEncodable : Swift.Codable where Wrapped : Swift.Decodable, Wrapped : Swift.Encodable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum ErrorResponse : Swift.Error {
  case error(Swift.Int, Foundation.Data?, Foundation.URLResponse?, Swift.Error)
}
public enum DownloadException : Swift.Error {
  case responseDataMissing
  case responseFailed
  case requestMissing
  case requestMissingPath
  case requestMissingURL
  public static func == (a: InAppChat.DownloadException, b: InAppChat.DownloadException) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum DecodableRequestBuilderError : Swift.Error {
  case emptyDataResponse
  case nilHTTPResponse
  case unsuccessfulHTTPStatusCode
  case jsonDecoding(Swift.DecodingError)
  case generalError(Swift.Error)
}
open class Response<T> {
  final public let statusCode: Swift.Int
  final public let header: [Swift.String : Swift.String]
  final public let body: T
  final public let bodyData: Foundation.Data?
  public init(statusCode: Swift.Int, header: [Swift.String : Swift.String], body: T, bodyData: Foundation.Data?)
  convenience public init(response: Foundation.HTTPURLResponse, body: T, bodyData: Foundation.Data?)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class RequestTask : @unchecked Swift.Sendable {
  final public func cancel()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MessageThreads : InAppChat.Pager<InAppChat.Thread> {
  #if compiler(>=5.3) && $AsyncAwait
  override public func load(_ isRefresh: Swift.Bool) async -> [InAppChat.Thread]
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers open class Configuration {
  @available(*, unavailable, message: "To set a different date format, use CodableHelper.dateFormatter instead.")
  public static var dateFormat: Swift.String
  public static var successfulStatusCodeRange: Swift.Range<Swift.Int>
  @objc deinit
}
public struct Token : Swift.Codable, Swift.Hashable {
  public var accessToken: Swift.String
  public var refreshToken: Swift.String
  public var expiresIn: Swift.Double
  public init(accessToken: Swift.String, refreshToken: Swift.String, expiresIn: Swift.Double)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case accessToken
    case refreshToken
    case expiresIn
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.Token.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.Token.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.Token, b: InAppChat.Token) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct ChatReportEventEvent : Swift.Codable, Swift.Hashable {
  public var eventType: Swift.String
  public var eventData: InAppChat.ChatReportEventEventEventData
  public init(eventType: Swift.String, eventData: InAppChat.ChatReportEventEventEventData)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case eventType
    case eventData
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.ChatReportEventEvent.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.ChatReportEventEvent.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.ChatReportEventEvent, b: InAppChat.ChatReportEventEvent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct ChatReportEventEventEventData : Swift.Codable, Swift.Hashable {
  public var chatReport: InAppChat.Report
  public init(chatReport: InAppChat.Report)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case chatReport
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.ChatReportEventEventEventData.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.ChatReportEventEventEventData.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.ChatReportEventEventEventData, b: InAppChat.ChatReportEventEventEventData) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct Report : Swift.Codable, Swift.Hashable {
  public var chatReportId: Swift.String?
  public var tenantId: Swift.String
  public var category: InAppChat.ReportCategory
  public var reason: Swift.String
  public var channelAdminStatus: InAppChat.ReportChannelAdminStatus
  public var tenantAdminStatus: InAppChat.ReportTenantAdminStatus
  public var reporterERTCUser: InAppChat.APIUser
  public var chat: InAppChat.APIMessage
  public init(chatReportId: Swift.String? = nil, tenantId: Swift.String, category: InAppChat.ReportCategory, reason: Swift.String, channelAdminStatus: InAppChat.ReportChannelAdminStatus, tenantAdminStatus: InAppChat.ReportTenantAdminStatus, reporterERTCUser: InAppChat.APIUser, chat: InAppChat.APIMessage)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case chatReportId
    case tenantId
    case category
    case reason
    case channelAdminStatus
    case tenantAdminStatus
    case reporterERTCUser
    case chat
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.Report.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.Report.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.Report, b: InAppChat.Report) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct APIUser : Swift.Codable, Swift.Hashable {
  public var eRTCUserId: Swift.String
  public var appUserId: Swift.String
  public var name: Swift.String?
  public var profilePic: Swift.String?
  public var profilePicThumb: Swift.String?
  public var profileStatus: Swift.String?
  public var phoneNumber: Swift.String?
  public var loginTimeStamp: Swift.Int?
  public var availabilityStatus: InAppChat.AvailabilityStatus?
  public init(eRTCUserId: Swift.String, appUserId: Swift.String, name: Swift.String? = nil, profilePic: Swift.String? = nil, profilePicThumb: Swift.String? = nil, profileStatus: Swift.String? = nil, phoneNumber: Swift.String? = nil, loginTimeStamp: Swift.Int? = nil, availabilityStatus: InAppChat.AvailabilityStatus? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case eRTCUserId
    case appUserId
    case name
    case profilePic
    case profilePicThumb
    case profileStatus
    case phoneNumber
    case loginTimeStamp
    case availabilityStatus
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.APIUser.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.APIUser.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.APIUser, b: InAppChat.APIUser) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
@_Concurrency.MainActor(unsafe) public struct PagerList<T, Header, Content, Footer, Empty> : SwiftUI.View where T : Swift.Identifiable, Header : SwiftUI.View, Content : SwiftUI.View, Footer : SwiftUI.View, Empty : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(pager: InAppChat.Pager<T>, prefix: [T]? = nil, invert: Swift.Bool = false, spacing: CoreFoundation.CGFloat? = 8.0, divider: Swift.Bool = false, topInset: CoreFoundation.CGFloat = 0.0, bottomInset: CoreFoundation.CGFloat = 0.0, header: (() -> Header)?, empty: (() -> Empty)?, footer: (() -> Footer)?, content: @escaping (T) -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat9PagerListV4bodyQrvp", 0) __<T, Header, Content, Footer, Empty>
}
extension InAppChat.PagerList where Header == SwiftUI.EmptyView {
  @_Concurrency.MainActor(unsafe) public init(pager: InAppChat.Pager<T>, prefix: [T]? = nil, invert: Swift.Bool = false, spacing: CoreFoundation.CGFloat? = nil, divider: Swift.Bool = false, topInset: CoreFoundation.CGFloat = 0.0, bottomInset: CoreFoundation.CGFloat = 0.0, @SwiftUI.ViewBuilder empty: @escaping () -> Empty, @SwiftUI.ViewBuilder footer: @escaping () -> Footer, @SwiftUI.ViewBuilder content: @escaping (T) -> Content)
}
extension InAppChat.PagerList where Footer == SwiftUI.EmptyView {
  @_Concurrency.MainActor(unsafe) public init(pager: InAppChat.Pager<T>, prefix: [T]? = nil, invert: Swift.Bool = false, spacing: CoreFoundation.CGFloat? = nil, divider: Swift.Bool = false, topInset: CoreFoundation.CGFloat = 0.0, bottomInset: CoreFoundation.CGFloat = 0.0, @SwiftUI.ViewBuilder header: @escaping () -> Header, @SwiftUI.ViewBuilder empty: @escaping () -> Empty, @SwiftUI.ViewBuilder content: @escaping (T) -> Content)
}
extension InAppChat.PagerList where Empty == SwiftUI.EmptyView {
  @_Concurrency.MainActor(unsafe) public init(pager: InAppChat.Pager<T>, prefix: [T]? = nil, invert: Swift.Bool = false, spacing: CoreFoundation.CGFloat? = nil, divider: Swift.Bool = false, topInset: CoreFoundation.CGFloat = 0.0, bottomInset: CoreFoundation.CGFloat = 0.0, @SwiftUI.ViewBuilder header: @escaping () -> Header, @SwiftUI.ViewBuilder footer: @escaping () -> Footer, @SwiftUI.ViewBuilder content: @escaping (T) -> Content)
}
extension InAppChat.PagerList where Header == SwiftUI.EmptyView, Footer == SwiftUI.EmptyView {
  @_Concurrency.MainActor(unsafe) public init(pager: InAppChat.Pager<T>, prefix: [T]? = nil, invert: Swift.Bool = false, spacing: CoreFoundation.CGFloat? = nil, divider: Swift.Bool = false, topInset: CoreFoundation.CGFloat = 0.0, bottomInset: CoreFoundation.CGFloat = 0.0, @SwiftUI.ViewBuilder empty: @escaping () -> Empty, @SwiftUI.ViewBuilder content: @escaping (T) -> Content)
}
extension InAppChat.PagerList where Header == SwiftUI.EmptyView, Empty == SwiftUI.EmptyView {
  @_Concurrency.MainActor(unsafe) public init(pager: InAppChat.Pager<T>, prefix: [T]? = nil, invert: Swift.Bool = false, spacing: CoreFoundation.CGFloat? = nil, divider: Swift.Bool = false, topInset: CoreFoundation.CGFloat = 0.0, bottomInset: CoreFoundation.CGFloat = 0.0, @SwiftUI.ViewBuilder footer: @escaping () -> Footer, @SwiftUI.ViewBuilder content: @escaping (T) -> Content)
}
extension InAppChat.PagerList where Footer == SwiftUI.EmptyView, Empty == SwiftUI.EmptyView {
  @_Concurrency.MainActor(unsafe) public init(pager: InAppChat.Pager<T>, prefix: [T]? = nil, invert: Swift.Bool = false, spacing: CoreFoundation.CGFloat? = nil, divider: Swift.Bool = false, topInset: CoreFoundation.CGFloat = 0.0, bottomInset: CoreFoundation.CGFloat = 0.0, @SwiftUI.ViewBuilder header: @escaping () -> Header, @SwiftUI.ViewBuilder content: @escaping (T) -> Content)
}
extension InAppChat.PagerList where Header == SwiftUI.EmptyView, Footer == SwiftUI.EmptyView, Empty == SwiftUI.EmptyView {
  @_Concurrency.MainActor(unsafe) public init(pager: InAppChat.Pager<T>, prefix: [T]? = nil, invert: Swift.Bool = false, spacing: CoreFoundation.CGFloat? = nil, divider: Swift.Bool = false, topInset: CoreFoundation.CGFloat = 0.0, bottomInset: CoreFoundation.CGFloat = 0.0, content: @escaping (T) -> Content)
}
public struct EncryptionKey : Swift.Codable, Swift.Hashable {
  public var keyId: Swift.String
  public var deviceId: Swift.String
  public var publicKey: Swift.String
  public var eRTCUserId: Swift.String
  public init(keyId: Swift.String, deviceId: Swift.String, publicKey: Swift.String, eRTCUserId: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case keyId
    case deviceId
    case publicKey
    case eRTCUserId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.EncryptionKey.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.EncryptionKey.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.EncryptionKey, b: InAppChat.EncryptionKey) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ContactsPager : InAppChat.Pager<InAppChat.User> {
  #if compiler(>=5.3) && $AsyncAwait
  override public func load(_ isRefresh: Swift.Bool) async throws -> [InAppChat.User]
  #endif
  @objc deinit
}
public struct LoginPasswordInput : Swift.Codable, Swift.Hashable {
  public var loginType: Swift.String
  public var appUserId: Swift.String
  public var currentPassword: Swift.String
  public var newPassword: Swift.String
  public init(loginType: Swift.String, appUserId: Swift.String, currentPassword: Swift.String, newPassword: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case loginType
    case appUserId
    case currentPassword
    case newPassword
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.LoginPasswordInput.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.LoginPasswordInput.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.LoginPasswordInput, b: InAppChat.LoginPasswordInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class FCMAPI {
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func fCMValidationPost(fCMValidationInput: InAppChat.FCMValidationInput) async throws -> InAppChat.APIThread
  #endif
  open class func fCMValidationPostWithRequestBuilder(fCMValidationInput: InAppChat.FCMValidationInput) -> InAppChat.RequestBuilder<InAppChat.APIThread>
  @objc deinit
}
@_Concurrency.MainActor(unsafe) public struct ThreadRow : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat9ThreadRowV4bodyQrvp", 0) __
}
public struct GroupCount : SwiftUI.View {
  public let count: Swift.Int
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat10GroupCountV4bodyQrvp", 0) __
}
@_hasMissingDesignatedInitializers open class Pager<T> : Foundation.ObservableObject where T : Swift.Identifiable {
  #if compiler(>=5.3) && $AsyncAwait
  public func refresh() async
  #endif
  public func loadMore()
  #if compiler(>=5.3) && $AsyncAwait
  open func load(_ isRefresh: Swift.Bool) async throws -> [T]
  #endif
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct Search : SwiftUI.View {
  public init(id: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat6SearchV4bodyQrvp", 0) __
}
public struct Forward : Swift.Codable, Swift.Hashable {
  public var originalMsgUniqueId: Swift.String?
  public var isForwarded: Swift.Bool?
  public init(originalMsgUniqueId: Swift.String? = nil, isForwarded: Swift.Bool? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case originalMsgUniqueId
    case isForwarded
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.Forward.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.Forward.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.Forward, b: InAppChat.Forward) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct Emoji : Swift.Decodable, Swift.Hashable {
  public let string: Swift.String
  public let category: Swift.String?
  public let description: Swift.String?
  public let aliases: [Swift.String]?
  public let tags: [Swift.String]
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.Emoji, b: InAppChat.Emoji) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
final public class EmojiStore {
  final public let allEmojis: [InAppChat.Emoji]
  final public let allKaomojis: [InAppChat.Emoji]
  final public let emojisByCategory: [Swift.String : [InAppChat.Emoji]]
  final public let kaomojisByTag: [Swift.String : [InAppChat.Emoji]]
  public static let shared: InAppChat.EmojiStore
  public init()
  final public func filteredEmojis(with keyword: Swift.String) -> [InAppChat.Emoji]
  @objc deinit
}
extension InAppChat.EmojiStore {
  public static func systemImageName(for section: Swift.String) -> Swift.String
  public static func saveRecentEmoji(_ item: InAppChat.Emoji)
  public static func fetchRecentList() -> [Swift.String]
}
public enum SectionType : Swift.String, Swift.CaseIterable {
  case recent
  case smileys
  case people
  case animals
  case food
  case travel
  case activities
  case objects
  case symbols
  case flags
  public static let defaultCategories: [InAppChat.SectionType]
  public init?(rawValue: Swift.String)
  public typealias AllCases = [InAppChat.SectionType]
  public typealias RawValue = Swift.String
  public static var allCases: [InAppChat.SectionType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum KaomojiTags : Swift.String, Swift.CaseIterable {
  case animals, angry, bear, bird, cat, confused, crazy, cry, dance, dead, dog, embarassed, evil, excited, fun, happy, hide, hug, hurt, kiss, laugh, love, monkey, music, pig, rabbit, run, sad, scared, sleep, sorry, smug, stare, surprised, surrender, think, troll, wave, whatever, wink, worried, write
  case seaCreatures
  case tableFlip
  public init?(rawValue: Swift.String)
  public typealias AllCases = [InAppChat.KaomojiTags]
  public typealias RawValue = Swift.String
  public static var allCases: [InAppChat.KaomojiTags] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers open class DraftAPI {
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getDrafts(deviceid: Swift.String, threadId: Swift.String? = nil, baseMsgUniqueId: Swift.String? = nil) async throws -> InAppChat.APIMessage?
  #endif
  open class func getDraftsWithRequestBuilder(deviceid: Swift.String, threadId: Swift.String? = nil, baseMsgUniqueId: Swift.String? = nil) -> InAppChat.RequestBuilder<InAppChat.APIMessage?>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func updateDraft(deviceid: Swift.String, senderTimeStampMs: Swift.Double, threadId: Swift.String? = nil, userId: Swift.String? = nil, message: Swift.String? = nil, msgType: InAppChat.MessageType? = nil, file: Foundation.URL? = nil, replyThreadFeatureData: InAppChat.Reply? = nil, location: InAppChat.Location? = nil, contact: InAppChat.Contact? = nil, gif: Swift.String? = nil, mentions: [InAppChat.Mention]? = nil, forwardChatFeatureData: InAppChat.Forward? = nil, media: InAppChat.Media? = nil, msgCorrelationId: Swift.String? = nil, encryptedChatList: [InAppChat.EncryptedMessage]? = nil) async throws -> InAppChat.APIMessage
  #endif
  open class func updateDraftWithRequestBuilder(deviceid: Swift.String, senderTimeStampMs: Swift.Double, threadId: Swift.String? = nil, userId: Swift.String? = nil, message: Swift.String? = nil, msgType: InAppChat.MessageType? = nil, file: Foundation.URL? = nil, replyThreadFeatureData: InAppChat.Reply? = nil, location: InAppChat.Location? = nil, contact: InAppChat.Contact? = nil, gif: Swift.String? = nil, mentions: [InAppChat.Mention]? = nil, forwardChatFeatureData: InAppChat.Forward? = nil, media: InAppChat.Media? = nil, msgCorrelationId: Swift.String? = nil, encryptedChatList: [InAppChat.EncryptedMessage]? = nil) -> InAppChat.RequestBuilder<InAppChat.APIMessage>
  @objc deinit
}
public struct Email : Swift.Codable, Swift.Hashable {
  public var type: Swift.String?
  public var email: Swift.String
  public init(type: Swift.String? = nil, email: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case type
    case email
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.Email.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.Email.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.Email, b: InAppChat.Email) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
@_Concurrency.MainActor(unsafe) public struct ChannelsView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(scrollToTop: SwiftUI.Binding<Swift.Int>)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat12ChannelsViewV4bodyQrvp", 0) __
}
extension InAppChat.ThreadRow {
  @_Concurrency.MainActor(unsafe) public static var sample: InAppChat.ThreadRow {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var sampleUser: InAppChat.ThreadRow {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var samplePrivateGroup: InAppChat.ThreadRow {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var samplePublicGroup: InAppChat.ThreadRow {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var sampleUnread: InAppChat.ThreadRow {
    get
  }
}
@_hasMissingDesignatedInitializers open class ChatAPI {
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func deleteChatHistory(tid: Swift.String) async throws
  #endif
  open class func deleteChatHistoryWithRequestBuilder(tid: Swift.String) -> InAppChat.RequestBuilder<Swift.Void>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func deleteMessage(mid: Swift.String) async throws
  #endif
  open class func deleteMessageWithRequestBuilder(mid: Swift.String) -> InAppChat.RequestBuilder<Swift.Void>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getFavorites(skip: Swift.Int? = nil, limit: Swift.Int? = nil) async throws -> [InAppChat.APIMessage]
  #endif
  open class func getFavoritesWithRequestBuilder(skip: Swift.Int? = nil, limit: Swift.Int? = nil) -> InAppChat.RequestBuilder<[InAppChat.APIMessage]>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getMessage(mid: Swift.String) async throws -> InAppChat.APIMessage
  #endif
  open class func getMessageWithRequestBuilder(mid: Swift.String) -> InAppChat.RequestBuilder<InAppChat.APIMessage>
  public enum Direction_getMessages : Swift.String, Swift.CaseIterable {
    case future
    case past
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.ChatAPI.Direction_getMessages]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.ChatAPI.Direction_getMessages] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getMessages(tid: Swift.String, msgType: Swift.String? = nil, currentMsgId: Swift.String? = nil, direction: InAppChat.ChatAPI.Direction_getMessages? = nil, dateFrom: Swift.String? = nil, dateTo: Swift.String? = nil, pageSize: Swift.Int? = nil, inReplyTo: Swift.String? = nil, deep: Swift.Bool? = nil) async throws -> [InAppChat.APIMessage]
  #endif
  open class func getMessagesWithRequestBuilder(tid: Swift.String, msgType: Swift.String? = nil, currentMsgId: Swift.String? = nil, direction: InAppChat.ChatAPI.Direction_getMessages? = nil, dateFrom: Swift.String? = nil, dateTo: Swift.String? = nil, pageSize: Swift.Int? = nil, inReplyTo: Swift.String? = nil, deep: Swift.Bool? = nil) -> InAppChat.RequestBuilder<[InAppChat.APIMessage]>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getReplies(mid: Swift.String, skip: Swift.Int? = nil, limit: Swift.Int? = nil) async throws -> [InAppChat.APIMessage]
  #endif
  open class func getRepliesWithRequestBuilder(mid: Swift.String, skip: Swift.Int? = nil, limit: Swift.Int? = nil) -> InAppChat.RequestBuilder<[InAppChat.APIMessage]>
  public enum Direction_getReplyThreads : Swift.String, Swift.CaseIterable {
    case future
    case past
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.ChatAPI.Direction_getReplyThreads]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.ChatAPI.Direction_getReplyThreads] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getReplyThreads(threadId: Swift.String? = nil, follow: Swift.Bool? = nil, starred: Swift.Bool? = nil, limit: Swift.Int? = nil, skip: Swift.Int? = nil, direction: InAppChat.ChatAPI.Direction_getReplyThreads? = nil, deep: Swift.Bool? = nil) async throws -> [InAppChat.APIMessage]
  #endif
  open class func getReplyThreadsWithRequestBuilder(threadId: Swift.String? = nil, follow: Swift.Bool? = nil, starred: Swift.Bool? = nil, limit: Swift.Int? = nil, skip: Swift.Int? = nil, direction: InAppChat.ChatAPI.Direction_getReplyThreads? = nil, deep: Swift.Bool? = nil) -> InAppChat.RequestBuilder<[InAppChat.APIMessage]>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func react(mid: Swift.String, emoji: Swift.String) async throws
  #endif
  open class func reactWithRequestBuilder(mid: Swift.String, emoji: Swift.String) -> InAppChat.RequestBuilder<Swift.Void>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func sendMessage(deviceid: Swift.String, senderTimeStampMs: Swift.Double, threadId: Swift.String? = nil, userId: Swift.String? = nil, message: Swift.String? = nil, msgType: InAppChat.MessageType? = nil, file: Foundation.URL? = nil, replyThreadFeatureData: InAppChat.Reply? = nil, location: InAppChat.Location? = nil, contact: InAppChat.Contact? = nil, gif: Swift.String? = nil, mentions: [InAppChat.Mention]? = nil, forwardChatFeatureData: InAppChat.Forward? = nil, media: InAppChat.Media? = nil, msgCorrelationId: Swift.String? = nil, encryptedChatList: [InAppChat.EncryptedMessage]? = nil) async throws -> InAppChat.MessageResponse
  #endif
  open class func sendMessageWithRequestBuilder(deviceid: Swift.String, senderTimeStampMs: Swift.Double, threadId: Swift.String? = nil, userId: Swift.String? = nil, message: Swift.String? = nil, msgType: InAppChat.MessageType? = nil, file: Foundation.URL? = nil, replyThreadFeatureData: InAppChat.Reply? = nil, location: InAppChat.Location? = nil, contact: InAppChat.Contact? = nil, gif: Swift.String? = nil, mentions: [InAppChat.Mention]? = nil, forwardChatFeatureData: InAppChat.Forward? = nil, media: InAppChat.Media? = nil, msgCorrelationId: Swift.String? = nil, encryptedChatList: [InAppChat.EncryptedMessage]? = nil) -> InAppChat.RequestBuilder<InAppChat.MessageResponse>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func unreact(mid: Swift.String, emoji: Swift.String) async throws
  #endif
  open class func unreactWithRequestBuilder(mid: Swift.String, emoji: Swift.String) -> InAppChat.RequestBuilder<Swift.Void>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func updateMessage(mid: Swift.String, updateMessageInput: InAppChat.UpdateMessageInput) async throws
  #endif
  open class func updateMessageWithRequestBuilder(mid: Swift.String, updateMessageInput: InAppChat.UpdateMessageInput) -> InAppChat.RequestBuilder<Swift.Void>
  @objc deinit
}
@_hasMissingDesignatedInitializers open class InAppChatAPI {
  public static var basePath: Swift.String
  public static var customHeaders: [Swift.String : Swift.String]
  public static var credential: Foundation.URLCredential?
  public static var requestBuilderFactory: InAppChat.RequestBuilderFactory
  public static var apiResponseQueue: Dispatch.DispatchQueue
  @objc deinit
}
open class RequestBuilder<T> {
  final public let parameters: [Swift.String : Any]?
  final public let method: Swift.String
  final public let URLString: Swift.String
  final public let requestTask: InAppChat.RequestTask
  final public let requiresAuthentication: Swift.Bool
  public var onProgressReady: ((Foundation.Progress) -> Swift.Void)?
  required public init(method: Swift.String, URLString: Swift.String, parameters: [Swift.String : Any]?, headers: [Swift.String : Swift.String] = [:], requiresAuthentication: Swift.Bool)
  open func addHeaders(_ aHeaders: [Swift.String : Swift.String])
  @discardableResult
  open func execute(_ apiResponseQueue: Dispatch.DispatchQueue = InAppChatAPI.apiResponseQueue, _ completion: @escaping (_ result: Swift.Result<InAppChat.Response<T>, InAppChat.ErrorResponse>) -> Swift.Void) -> InAppChat.RequestTask
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  @discardableResult
  open func execute() async throws -> InAppChat.Response<T>
  #endif
  public func addHeader(name: Swift.String, value: Swift.String) -> Self
  open func addCredential() -> Self
  @objc deinit
}
public protocol RequestBuilderFactory {
  func getNonDecodableBuilder<T>() -> InAppChat.RequestBuilder<T>.Type
  func getBuilder<T>() -> InAppChat.RequestBuilder<T>.Type where T : Swift.Decodable
}
public struct MessageResponse : Swift.Codable, Swift.Hashable {
  public var message: InAppChat.APIMessage?
  public var status: InAppChat.ChatStatus
  public init(message: InAppChat.APIMessage? = nil, status: InAppChat.ChatStatus)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case message
    case status
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.MessageResponse.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.MessageResponse.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.MessageResponse, b: InAppChat.MessageResponse) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
extension InAppChat.Group {
  public static func random() -> InAppChat.Group
  public static func gen(name: Swift.String? = nil, avatar: Swift.String? = nil, desc: Swift.String? = nil, users: [InAppChat.User]? = nil, admins: [Swift.String]? = nil, _private: Swift.Bool? = nil, invites: [InAppChat.User]? = nil) -> InAppChat.Group
}
public struct MsgReadEvent : Swift.Codable, Swift.Hashable {
  public enum MsgReadStatus : Swift.String, Swift.Codable, Swift.CaseIterable {
    case delivered
    case seen
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.MsgReadEvent.MsgReadStatus]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.MsgReadEvent.MsgReadStatus] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var msgUniqueId: Swift.String
  public var eRTCUserId: Swift.String
  public var msgReadStatus: InAppChat.MsgReadEvent.MsgReadStatus
  public init(msgUniqueId: Swift.String, eRTCUserId: Swift.String, msgReadStatus: InAppChat.MsgReadEvent.MsgReadStatus)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case msgUniqueId
    case eRTCUserId
    case msgReadStatus
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.MsgReadEvent.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.MsgReadEvent.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.MsgReadEvent, b: InAppChat.MsgReadEvent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public func base(size: CoreFoundation.CGFloat, weight: SwiftUI.Font.Weight = .regular) -> SwiftUI.Font
public struct Fonts {
  public let title: SwiftUI.Font
  public let title2: SwiftUI.Font
  public let title2Regular: SwiftUI.Font
  public let title3: SwiftUI.Font
  public let headline: SwiftUI.Font
  public let body: SwiftUI.Font
  public let caption: SwiftUI.Font
  public let username: SwiftUI.Font
  public let timestamp: SwiftUI.Font
  public let mini: SwiftUI.Font
  public init(title: SwiftUI.Font = .title, title2: SwiftUI.Font = .title2, title2Regular: SwiftUI.Font = base(size: 22), title3: SwiftUI.Font = .title3, headline: SwiftUI.Font = .headline, body: SwiftUI.Font = .body, caption: SwiftUI.Font = .caption, username: SwiftUI.Font = base(size: 12.0, weight: .heavy), timestamp: SwiftUI.Font = base(size: 12.0), mini: SwiftUI.Font = base(size: 10.0))
}
public struct Colors {
  public let primary: SwiftUI.Color
  public let button: SwiftUI.Color
  public let destructive: SwiftUI.Color
  public let text: SwiftUI.Color
  public let caption: SwiftUI.Color
  public let unread: SwiftUI.Color
  public let `public`: SwiftUI.Color
  public let `private`: SwiftUI.Color
  public let background: SwiftUI.Color
  public let softBackground: SwiftUI.Color
  public let bubble: SwiftUI.Color
  public let bubbleText: SwiftUI.Color
  public let senderBubble: SwiftUI.Color
  public let senderText: SwiftUI.Color
  public let username: SwiftUI.Color
  public let senderUsername: SwiftUI.Color
  public let timestamp: SwiftUI.Color
  public let border: SwiftUI.Color
  public init(light: Swift.Bool, primary: SwiftUI.Color? = nil, text: SwiftUI.Color? = nil, bubble: SwiftUI.Color? = nil, bubbleText: SwiftUI.Color? = nil, senderBubble: SwiftUI.Color = Color(hex: 0xE5ECFF), senderText: SwiftUI.Color? = nil, senderUsername: SwiftUI.Color? = nil, timestamp: SwiftUI.Color? = nil, button: SwiftUI.Color? = nil, destructive: SwiftUI.Color? = nil, background: SwiftUI.Color? = nil, softBackground: SwiftUI.Color? = nil, caption: SwiftUI.Color? = nil, unread: SwiftUI.Color? = nil, public: SwiftUI.Color? = nil, private: SwiftUI.Color? = nil, username: SwiftUI.Color? = nil, border: SwiftUI.Color? = nil)
}
public class Theme {
  final public let fonts: InAppChat.Fonts
  final public let light: InAppChat.Colors
  final public let dark: InAppChat.Colors
  final public let imagePreviewSize: CoreFoundation.CGSize
  final public let videoPreviewSize: CoreFoundation.CGSize
  final public let bubbleRadius: CoreFoundation.CGFloat
  final public let showAvatar: Swift.Bool
  final public let avatarSize: CoreFoundation.CGFloat
  final public let bubblePadding: SwiftUI.EdgeInsets
  final public let messageAlign: SwiftUI.HorizontalAlignment
  final public let senderAlign: SwiftUI.HorizontalAlignment
  final public let assets: InAppChat.Assets
  public var current: SwiftUI.ColorScheme
  public var colors: InAppChat.Colors {
    get
  }
  public var inverted: InAppChat.Colors {
    get
  }
  public init(light: InAppChat.Colors? = nil, dark: InAppChat.Colors? = nil, fonts: InAppChat.Fonts? = nil, showAvatar: Swift.Bool = true, avatarSize: CoreFoundation.CGFloat = 17.5, imagePreviewSize: CoreFoundation.CGSize = CGSize(width: 178.0, height: 153.0), videoPreviewSize: CoreFoundation.CGSize = CGSize(width: 248.0, height: 153.0), messageAlign: SwiftUI.HorizontalAlignment = .leading, senderAlign: SwiftUI.HorizontalAlignment = .trailing, bubbleRadius: CoreFoundation.CGFloat = 7.5, bubblePadding: SwiftUI.EdgeInsets = EdgeInsets(top: 6.0, leading: 6.0, bottom: 6.0, trailing: 6.0), assets: InAppChat.Assets = Assets())
  public static let `default`: InAppChat.Theme
  @objc deinit
}
public struct SyncContacts200Response : Swift.Codable, Swift.Hashable {
  public var result: InAppChat.APIUser?
  public init(result: InAppChat.APIUser? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case result
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.SyncContacts200Response.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.SyncContacts200Response.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.SyncContacts200Response, b: InAppChat.SyncContacts200Response) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct UpdateUserInput : Swift.Codable, Swift.Hashable {
  public enum DeviceType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case android
    case ios
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.UpdateUserInput.DeviceType]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.UpdateUserInput.DeviceType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var deviceId: Swift.String?
  public var deviceType: InAppChat.UpdateUserInput.DeviceType?
  public var fcmToken: Swift.String?
  public var fcmVersion: Swift.String?
  public var availabilityStatus: InAppChat.AvailabilityStatus?
  public var notificationSettings: InAppChat.NotificationSettings?
  public var displayName: Swift.String?
  public var username: Swift.String?
  public var phoneNumber: Swift.String?
  public init(deviceId: Swift.String? = nil, deviceType: InAppChat.UpdateUserInput.DeviceType? = nil, fcmToken: Swift.String? = nil, fcmVersion: Swift.String? = nil, availabilityStatus: InAppChat.AvailabilityStatus? = nil, notificationSettings: InAppChat.NotificationSettings? = nil, displayName: Swift.String? = nil, username: Swift.String? = nil, phoneNumber: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case deviceId
    case deviceType
    case fcmToken
    case fcmVersion
    case availabilityStatus
    case notificationSettings
    case displayName
    case username
    case phoneNumber
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.UpdateUserInput.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.UpdateUserInput.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.UpdateUserInput, b: InAppChat.UpdateUserInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class OpenISO8601DateFormatter : Foundation.DateFormatter {
  @objc override dynamic public func date(from string: Swift.String) -> Foundation.Date?
  @objc deinit
}
public struct UpdateMessageInput : Swift.Codable, Swift.Hashable {
  public var message: Swift.String?
  public var isStarred: Swift.Bool?
  public var follow: Swift.Bool?
  public init(message: Swift.String? = nil, isStarred: Swift.Bool? = nil, follow: Swift.Bool? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case message
    case isStarred
    case follow
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.UpdateMessageInput.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.UpdateMessageInput.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.UpdateMessageInput, b: InAppChat.UpdateMessageInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct Media : Swift.Codable, Swift.Hashable {
  public var path: Swift.String?
  public var thumbnail: Swift.String?
  public var name: Swift.String?
  public init(path: Swift.String? = nil, thumbnail: Swift.String? = nil, name: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case path
    case thumbnail
    case name
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.Media.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.Media.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.Media, b: InAppChat.Media) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct FavoritesView : SwiftUI.View {
  public init()
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat13FavoritesViewV4bodyQrvp", 0) __
}
public struct CTA {
  public init(icon: SwiftUI.Image? = nil, text: Swift.String, to: Swift.String, replace: Swift.Bool = false)
}
public struct EmptyListView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat13EmptyListViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct MessageView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat11MessageViewV4bodyQrvp", 0) __
}
public struct ChatSettings : Swift.Codable, Swift.Hashable {
  public var tenantId: Swift.String?
  public var profanityFilter: [InAppChat.ChatSettingsProfanityFilterInner]?
  public var domainFilter: [InAppChat.ChatSettingsDomainFilterInner]?
  public init(tenantId: Swift.String? = nil, profanityFilter: [InAppChat.ChatSettingsProfanityFilterInner]? = nil, domainFilter: [InAppChat.ChatSettingsDomainFilterInner]? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case tenantId
    case profanityFilter
    case domainFilter
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.ChatSettings.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.ChatSettings.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.ChatSettings, b: InAppChat.ChatSettings) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct BackgroundClearView : SwiftUI.UIViewRepresentable {
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: InAppChat.BackgroundClearView.Context) -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ uiView: UIKit.UIView, context: InAppChat.BackgroundClearView.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = UIKit.UIView
}
public struct Event : Swift.Codable, Swift.Hashable {
  public enum EventType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case userselfupdate
    case groupupdated
    case chatreportupdated
    case chatreaction
    case updatemessage
    case typingstatus
    case chat
    case msgreadstatus
    case availabilitystatus
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.Event.EventType]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.Event.EventType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var eventType: InAppChat.Event.EventType?
  public var message: InAppChat.EventMessage?
  public init(eventType: InAppChat.Event.EventType? = nil, message: InAppChat.EventMessage? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case eventType
    case message
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.Event.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.Event.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.Event, b: InAppChat.Event) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct Reply : Swift.Codable, Swift.Hashable {
  public var baseMsgUniqueId: Swift.String?
  public var replyMsgConfig: Swift.Double?
  public init(baseMsgUniqueId: Swift.String? = nil, replyMsgConfig: Swift.Double? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case baseMsgUniqueId
    case replyMsgConfig
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.Reply.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.Reply.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.Reply, b: InAppChat.Reply) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
@_Concurrency.MainActor(unsafe) public struct ContactsView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(scrollToTop: SwiftUI.Binding<Swift.Int>)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat12ContactsViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct ChatRoom : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(thread: InAppChat.Thread, message: InAppChat.Message?)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat0C4RoomV4bodyQrvp", 0) __
}
public enum ReportCategory : Swift.String, Swift.Codable, Swift.CaseIterable {
  case abuse
  case spam
  case other
  case inappropriate
  public init?(rawValue: Swift.String)
  public typealias AllCases = [InAppChat.ReportCategory]
  public typealias RawValue = Swift.String
  public static var allCases: [InAppChat.ReportCategory] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct ReportChannelAdminStatus : Swift.Codable, Swift.Hashable {
  public var status: InAppChat.ReportStatus?
  public var category: InAppChat.ReportCategory?
  public var createdAt: Swift.Double?
  public init(status: InAppChat.ReportStatus? = nil, category: InAppChat.ReportCategory? = nil, createdAt: Swift.Double? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case status
    case category
    case createdAt
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.ReportChannelAdminStatus.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.ReportChannelAdminStatus.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.ReportChannelAdminStatus, b: InAppChat.ReportChannelAdminStatus) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class ThreadAPI {
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func createThread(uid: Swift.String) async throws -> InAppChat.APIThread
  #endif
  open class func createThreadWithRequestBuilder(uid: Swift.String) -> InAppChat.RequestBuilder<InAppChat.APIThread>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getGroupThread(gid: Swift.String) async throws -> InAppChat.APIThread
  #endif
  open class func getGroupThreadWithRequestBuilder(gid: Swift.String) -> InAppChat.RequestBuilder<InAppChat.APIThread>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getThread(tid: Swift.String) async throws -> InAppChat.APIThread
  #endif
  open class func getThreadWithRequestBuilder(tid: Swift.String) -> InAppChat.RequestBuilder<InAppChat.APIThread>
  public enum ThreadType_getThreads : Swift.String, Swift.CaseIterable {
    case single
    case group
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.ThreadAPI.ThreadType_getThreads]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.ThreadAPI.ThreadType_getThreads] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getThreads(skip: Swift.Int? = nil, limit: Swift.Int? = nil, threadType: InAppChat.ThreadAPI.ThreadType_getThreads? = nil) async throws -> [InAppChat.APIThread]
  #endif
  open class func getThreadsWithRequestBuilder(skip: Swift.Int? = nil, limit: Swift.Int? = nil, threadType: InAppChat.ThreadAPI.ThreadType_getThreads? = nil) -> InAppChat.RequestBuilder<[InAppChat.APIThread]>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func updateThread(tid: Swift.String, updateThreadInput: InAppChat.UpdateThreadInput) async throws
  #endif
  open class func updateThreadWithRequestBuilder(tid: Swift.String, updateThreadInput: InAppChat.UpdateThreadInput) -> InAppChat.RequestBuilder<Swift.Void>
  @objc deinit
}
public struct ReturnCode : Swift.Codable, Swift.Hashable {
  public var returnCode: InAppChat.ReceiverReturnCode?
  public init(returnCode: InAppChat.ReceiverReturnCode? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case returnCode
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.ReturnCode.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.ReturnCode.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.ReturnCode, b: InAppChat.ReturnCode) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public class InAppChat : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($loaded) public var loaded: Swift.Bool {
    get
    set
    _modify
  }
  public var $loaded: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isUserLoggedIn) public var isUserLoggedIn: Swift.Bool {
    get
    set
    _modify
  }
  public var $isUserLoggedIn: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($appMeta) public var appMeta: [Swift.String : Any] {
    get
    set
    _modify
  }
  public var $appMeta: Combine.Published<[Swift.String : Any]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var config: SwiftyJSON.JSON?
  public init(namespace: Swift.String, apiKey: Swift.String)
  #if compiler(>=5.3) && $AsyncAwait
  public func load() async throws -> SwiftyJSON.JSON
  #endif
  public static func setup(namespace: Swift.String, apiKey: Swift.String, delayLoad: Swift.Bool = false)
  #if compiler(>=5.3) && $AsyncAwait
  public func login(email: Swift.String, password: Swift.String) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func nftLogin(contract: Swift.String, address: Swift.String, tokenID: Swift.String, signature: Swift.String, profilePicture: Swift.String, username: Swift.String?) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public static func load() async throws
  #endif
  public static func logout()
  public static var shared: InAppChat.InAppChat! {
    get
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct InAppChatError : Swift.Error {
}
public struct Contact : Swift.Codable, Swift.Hashable {
  public var name: Swift.String
  public var numbers: [InAppChat.PhoneNumber]?
  public var emails: [InAppChat.Email]?
  public init(name: Swift.String, numbers: [InAppChat.PhoneNumber]? = nil, emails: [InAppChat.Email]? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case name
    case numbers
    case emails
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.Contact.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.Contact.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.Contact, b: InAppChat.Contact) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
@_Concurrency.MainActor(unsafe) public struct MessageInput : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat12MessageInputV4bodyQrvp", 0) __
}
public struct Invite : Swift.Codable, Swift.Hashable {
  public var groupId: Swift.String
  public var by: Swift.String
  public var to: Swift.String
  public var date: Swift.String
  public init(groupId: Swift.String, by: Swift.String, to: Swift.String, date: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case groupId
    case by
    case to
    case date
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.Invite.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.Invite.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.Invite, b: InAppChat.Invite) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class DefaultAPI {
  public enum Direction_getUserMessages : Swift.String, Swift.CaseIterable {
    case future
    case past
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.DefaultAPI.Direction_getUserMessages]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.DefaultAPI.Direction_getUserMessages] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getUserMessages(uid: Swift.String, skip: Swift.Int? = nil, limit: Swift.Int? = nil, msgType: InAppChat.MessageType? = nil, direction: InAppChat.DefaultAPI.Direction_getUserMessages? = nil) async throws -> [InAppChat.APIMessage]
  #endif
  open class func getUserMessagesWithRequestBuilder(uid: Swift.String, skip: Swift.Int? = nil, limit: Swift.Int? = nil, msgType: InAppChat.MessageType? = nil, direction: InAppChat.DefaultAPI.Direction_getUserMessages? = nil) -> InAppChat.RequestBuilder<[InAppChat.APIMessage]>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func stub() async throws -> InAppChat.Stub
  #endif
  open class func stubWithRequestBuilder() -> InAppChat.RequestBuilder<InAppChat.Stub>
  @objc deinit
}
@_Concurrency.MainActor(unsafe) public struct Tabs : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(_ path: Swift.String)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat4TabsV4bodyQrvp", 0) __
}
public struct EmptyScreenConfig {
  public init(image: SwiftUI.Image?, caption: Swift.String?)
}
public struct Assets {
  public let group: SwiftUI.Image
  public let emptyThreads: InAppChat.EmptyScreenConfig
  public let emptyChat: InAppChat.EmptyScreenConfig
  public let emptyChannels: InAppChat.EmptyScreenConfig
  public let emptyAllChannels: InAppChat.EmptyScreenConfig
  public init(group: SwiftUI.Image? = nil, emptyChannels: InAppChat.EmptyScreenConfig? = nil, emptyChat: InAppChat.EmptyScreenConfig? = nil, emptyThreads: InAppChat.EmptyScreenConfig? = nil, emptyAllChannels: InAppChat.EmptyScreenConfig? = nil)
}
public func == (lhs: InAppChat.Message, rhs: InAppChat.Message) -> Swift.Bool
extension InAppChat.Message : Swift.Equatable {
}
public struct AutoDeleteSettings : Swift.Codable, Swift.Hashable {
  public var enabled: Swift.Bool?
  public var deleteAfterMiliSeconds: Swift.Double?
  public init(enabled: Swift.Bool? = nil, deleteAfterMiliSeconds: Swift.Double? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case enabled
    case deleteAfterMiliSeconds
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.AutoDeleteSettings.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.AutoDeleteSettings.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.AutoDeleteSettings, b: InAppChat.AutoDeleteSettings) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct SectionHeader : SwiftUI.View {
  public let title: Swift.String
  public let titleFont: SwiftUI.Font
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat13SectionHeaderV4bodyQrvp", 0) __
}
public struct CreateChatReport : Swift.Codable, Swift.Hashable {
  public var category: Swift.String?
  public var reason: Swift.String?
  public init(category: Swift.String? = nil, reason: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case category
    case reason
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.CreateChatReport.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.CreateChatReport.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.CreateChatReport, b: InAppChat.CreateChatReport) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct TypingEvent : Swift.Codable, Swift.Hashable {
  public enum TypingStatusEvent : Swift.String, Swift.Codable, Swift.CaseIterable {
    case on
    case off
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.TypingEvent.TypingStatusEvent]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.TypingEvent.TypingStatusEvent] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var appUserId: Swift.String?
  public var eRTCUserId: Swift.String
  public var groupId: Swift.String?
  public var typingStatusEvent: InAppChat.TypingEvent.TypingStatusEvent
  public init(appUserId: Swift.String? = nil, eRTCUserId: Swift.String, groupId: Swift.String? = nil, typingStatusEvent: InAppChat.TypingEvent.TypingStatusEvent)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case appUserId
    case eRTCUserId
    case groupId
    case typingStatusEvent
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.TypingEvent.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.TypingEvent.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.TypingEvent, b: InAppChat.TypingEvent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct PrivacyPill : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat11PrivacyPillV4bodyQrvp", 0) __
}
public struct MessageContent : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat14MessageContentV4bodyQrvp", 0) __
}
public struct IACMainRoutes<Routes> : SwiftUI.View where Routes : SwiftUI.View {
  public init(initialPath: Swift.String = "/chats", @SwiftUI.ViewBuilder routes: @escaping () -> Routes = {EmptyView()})
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat13IACMainRoutesV4bodyQrvp", 0) __<Routes>
}
extension InAppChat.IACMainRoutes where Routes == SwiftUI.EmptyView {
  public init(initialPath: Swift.String)
}
public struct LoginInput : Swift.Codable, Swift.Hashable {
  public enum LoginType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case email
    case mobile
    case sso
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.LoginInput.LoginType]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.LoginInput.LoginType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public enum DeviceType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case android
    case ios
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.LoginInput.DeviceType]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.LoginInput.DeviceType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var loginType: InAppChat.LoginInput.LoginType
  public var appUserId: Swift.String
  public var deviceId: Swift.String
  public var deviceType: InAppChat.LoginInput.DeviceType?
  public var fcmToken: Swift.String?
  public init(loginType: InAppChat.LoginInput.LoginType, appUserId: Swift.String, deviceId: Swift.String, deviceType: InAppChat.LoginInput.DeviceType? = nil, fcmToken: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case loginType
    case appUserId
    case deviceId
    case deviceType
    case fcmToken
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.LoginInput.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.LoginInput.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.LoginInput, b: InAppChat.LoginInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct GroupUpdateEventData : Swift.Codable, Swift.Hashable {
  public var eventTriggeredOnUserList: [InAppChat.APIUser]?
  public var changeData: InAppChat.GroupUpdatEventChangeData?
  public init(eventTriggeredOnUserList: [InAppChat.APIUser]? = nil, changeData: InAppChat.GroupUpdatEventChangeData? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case eventTriggeredOnUserList
    case changeData
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.GroupUpdateEventData.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.GroupUpdateEventData.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.GroupUpdateEventData, b: InAppChat.GroupUpdateEventData) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct SearchInput : Swift.Codable, Swift.Hashable {
  public enum ResultCategories : Swift.String, Swift.Codable, Swift.CaseIterable {
    case messages
    case files
    case channels
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.SearchInput.ResultCategories]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.SearchInput.ResultCategories] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var searchQuery: InAppChat.SearchQuery
  public var resultCategories: [InAppChat.SearchInput.ResultCategories]?
  public init(searchQuery: InAppChat.SearchQuery, resultCategories: [InAppChat.SearchInput.ResultCategories]? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case searchQuery
    case resultCategories
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.SearchInput.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.SearchInput.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.SearchInput, b: InAppChat.SearchInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct EncryptedMessage : Swift.Codable, Swift.Hashable {
  public var keyId: Swift.String
  public var deviceId: Swift.String
  public var publicKey: Swift.String?
  public var eRTCUserId: Swift.String?
  public var message: Swift.String?
  public var contact: Swift.String?
  public var location: Swift.String?
  public var gify: Swift.String?
  public var path: Swift.String?
  public var thumbnail: Swift.String?
  public init(keyId: Swift.String, deviceId: Swift.String, publicKey: Swift.String? = nil, eRTCUserId: Swift.String? = nil, message: Swift.String? = nil, contact: Swift.String? = nil, location: Swift.String? = nil, gify: Swift.String? = nil, path: Swift.String? = nil, thumbnail: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case keyId
    case deviceId
    case publicKey
    case eRTCUserId
    case message
    case contact
    case location
    case gify
    case path
    case thumbnail
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.EncryptedMessage.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.EncryptedMessage.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.EncryptedMessage, b: InAppChat.EncryptedMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct SyncContactsInput : Swift.Codable, Swift.Hashable {
  public var contacts: [Swift.String]
  public init(contacts: [Swift.String])
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case contacts
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.SyncContactsInput.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.SyncContactsInput.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.SyncContactsInput, b: InAppChat.SyncContactsInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
@_Concurrency.MainActor(unsafe) public struct Navigate : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(to path: Swift.String, replace: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat8NavigateV4bodyQrvp", 0) __
}
public struct NFTLoginInput : Swift.Codable, Swift.Hashable {
  public var address: Swift.String
  public var contract: Swift.String
  public var signature: Swift.String
  public var tokenID: Swift.String
  public var username: Swift.String?
  public var profilePicture: Swift.String?
  public init(address: Swift.String, contract: Swift.String, signature: Swift.String, tokenID: Swift.String, username: Swift.String? = nil, profilePicture: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case address
    case contract
    case signature
    case tokenID
    case username
    case profilePicture
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.NFTLoginInput.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.NFTLoginInput.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.NFTLoginInput, b: InAppChat.NFTLoginInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct JSONDataEncoding {
  public func encode(_ urlRequest: Foundation.URLRequest, with parameters: [Swift.String : Any]?) -> Foundation.URLRequest
  public static func encodingParameters(jsonData: Foundation.Data?) -> [Swift.String : Any]?
}
@_hasMissingDesignatedInitializers final public class User : Foundation.ObservableObject, Swift.Identifiable {
  final public var usernameFb: Swift.String {
    get
  }
  final public var displayNameFb: Swift.String {
    get
  }
  final public let id: Swift.String
  @Combine.Published @_projectedValueProperty($email) final public var email: Swift.String {
    get
    set
    _modify
  }
  final public var $email: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($username) final public var username: Swift.String {
    get
    set
    _modify
  }
  final public var $username: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($displayName) final public var displayName: Swift.String? {
    get
    set
    _modify
  }
  final public var $displayName: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($avatar) final public var avatar: Swift.String? {
    get
    set
    _modify
  }
  final public var $avatar: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($lastSeen) final public var lastSeen: Foundation.Date? {
    get
    set
    _modify
  }
  final public var $lastSeen: Combine.Published<Foundation.Date?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($status) final public var status: InAppChat.AvailabilityStatus {
    get
    set
    _modify
  }
  final public var $status: Combine.Published<InAppChat.AvailabilityStatus>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($blocked) final public var blocked: Swift.Bool {
    get
    set
    _modify
  }
  final public var $blocked: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($statusMessage) final public var statusMessage: Swift.String? {
    get
    set
    _modify
  }
  final public var $statusMessage: Combine.Published<Swift.String?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  final public var haveChatWith: Swift.Bool {
    get
  }
  public init(id: Swift.String, email: Swift.String, username: Swift.String, displayName: Swift.String? = nil, avatar: Swift.String? = nil, lastSeen: Foundation.Date? = nil, status: InAppChat.AvailabilityStatus = .offline, blocked: Swift.Bool = false)
  public static var current: InAppChat.User?
  final public var sharedMedia: InAppChat.UserSharedMedia {
    get
    set
  }
  public typealias ID = Swift.String
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public func == (l: InAppChat.User, r: InAppChat.User) -> Swift.Bool
extension InAppChat.User : Swift.Equatable {
}
extension InAppChat.User : Swift.Hashable {
  final public var hashValue: Swift.Int {
    get
  }
  final public func hash(into hasher: inout Swift.Hasher)
}
public struct NewMessageEvent : Swift.Codable, Swift.Hashable {
  public var message: InAppChat.APIMessage
  public init(message: InAppChat.APIMessage)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case message
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.NewMessageEvent.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.NewMessageEvent.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.NewMessageEvent, b: InAppChat.NewMessageEvent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class UserAPI {
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func blockUser(uid: Swift.String) async throws
  #endif
  open class func blockUserWithRequestBuilder(uid: Swift.String) -> InAppChat.RequestBuilder<Swift.Void>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func deleteUserAvatar(uid: Swift.String) async throws
  #endif
  open class func deleteUserAvatarWithRequestBuilder(uid: Swift.String) -> InAppChat.RequestBuilder<Swift.Void>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getBlockedUsers() async throws -> [InAppChat.APIUser]
  #endif
  open class func getBlockedUsersWithRequestBuilder() -> InAppChat.RequestBuilder<[InAppChat.APIUser]>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getPendingEvents(deviceid: Swift.String) async throws -> [InAppChat.Event]
  #endif
  open class func getPendingEventsWithRequestBuilder(deviceid: Swift.String) -> InAppChat.RequestBuilder<[InAppChat.Event]>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getUser(uid: Swift.String) async throws -> InAppChat.APIUser
  #endif
  open class func getUserWithRequestBuilder(uid: Swift.String) -> InAppChat.RequestBuilder<InAppChat.APIUser>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getUsers(lastId: Swift.String? = nil, lastCallTime: Swift.Int? = nil, updateType: Swift.String? = nil) async throws -> [InAppChat.APIUser]
  #endif
  open class func getUsersWithRequestBuilder(lastId: Swift.String? = nil, lastCallTime: Swift.Int? = nil, updateType: Swift.String? = nil) -> InAppChat.RequestBuilder<[InAppChat.APIUser]>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func me() async throws -> InAppChat.APIUser
  #endif
  open class func meWithRequestBuilder() -> InAppChat.RequestBuilder<InAppChat.APIUser>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func refreshAuthToken(uid: Swift.String) async throws -> InAppChat.Token
  #endif
  open class func refreshAuthTokenWithRequestBuilder(uid: Swift.String) -> InAppChat.RequestBuilder<InAppChat.Token>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func resetBadgeCount() async throws
  #endif
  open class func resetBadgeCountWithRequestBuilder() -> InAppChat.RequestBuilder<Swift.Void>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func syncContacts(syncContactsInput: InAppChat.SyncContactsInput? = nil) async throws -> [InAppChat.APIUser]
  #endif
  open class func syncContactsWithRequestBuilder(syncContactsInput: InAppChat.SyncContactsInput? = nil) -> InAppChat.RequestBuilder<[InAppChat.APIUser]>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func unblockUser(uid: Swift.String) async throws
  #endif
  open class func unblockUserWithRequestBuilder(uid: Swift.String) -> InAppChat.RequestBuilder<Swift.Void>
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func updateMe(updateUserInput: InAppChat.UpdateUserInput) async throws -> InAppChat.APIUser
  #endif
  open class func updateMeWithRequestBuilder(updateUserInput: InAppChat.UpdateUserInput) -> InAppChat.RequestBuilder<InAppChat.APIUser>
  @objc deinit
}
public struct APIThread : Swift.Codable, Swift.Hashable {
  public enum ThreadType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case string
    case group
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.APIThread.ThreadType]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.APIThread.ThreadType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var threadId: Swift.String
  public var threadType: InAppChat.APIThread.ThreadType
  public var createdAt: Swift.Double
  public var participants: [InAppChat.APIUser]
  public var user: InAppChat.APIUser?
  public var group: InAppChat.APIGroup?
  public var lastMessage: InAppChat.APIMessage?
  public var e2eEncryptionKeys: [InAppChat.EncryptionKey]?
  public init(threadId: Swift.String, threadType: InAppChat.APIThread.ThreadType, createdAt: Swift.Double, participants: [InAppChat.APIUser], user: InAppChat.APIUser? = nil, group: InAppChat.APIGroup? = nil, lastMessage: InAppChat.APIMessage? = nil, e2eEncryptionKeys: [InAppChat.EncryptionKey]? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case threadId
    case threadType
    case createdAt
    case participants
    case user
    case group
    case lastMessage
    case e2eEncryptionKeys
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.APIThread.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.APIThread.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.APIThread, b: InAppChat.APIThread) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class CodableHelper {
  public static var dateFormatter: Foundation.DateFormatter {
    get
    set
  }
  public static var jsonDecoder: Foundation.JSONDecoder {
    get
    set
  }
  public static var jsonEncoder: Foundation.JSONEncoder {
    get
    set
  }
  open class func decode<T>(_ type: T.Type, from data: Foundation.Data) -> Swift.Result<T, Swift.Error> where T : Swift.Decodable
  open class func encode<T>(_ value: T) -> Swift.Result<Foundation.Data, Swift.Error> where T : Swift.Encodable
  @objc deinit
}
public struct NewChat : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat03NewC0V4bodyQrvp", 0) __
}
extension Swift.String {
  public var urlEncoded: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers open class JSONEncodingHelper {
  open class func encodingParameters<T>(forEncodableObject encodableObj: T?) -> [Swift.String : Any]? where T : Swift.Encodable
  open class func encodingParameters(forEncodableObject encodableObj: Any?) -> [Swift.String : Any]?
  @objc deinit
}
public struct Stub : Swift.Codable, Swift.Hashable {
  public var senderKeyDetails: InAppChat.SenderKeyDetails?
  public init(senderKeyDetails: InAppChat.SenderKeyDetails? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case senderKeyDetails
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.Stub.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.Stub.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.Stub, b: InAppChat.Stub) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct NotificationSettings : Swift.Codable, Swift.Hashable {
  public enum AllowFrom : Swift.String, Swift.Codable, Swift.CaseIterable {
    case all
    case mentions
    case _none
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.NotificationSettings.AllowFrom]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.NotificationSettings.AllowFrom] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var allowFrom: InAppChat.NotificationSettings.AllowFrom
  public var validTill: Swift.String?
  public var validTillDisplayValue: Swift.String?
  public init(allowFrom: InAppChat.NotificationSettings.AllowFrom, validTill: Swift.String? = nil, validTillDisplayValue: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case allowFrom
    case validTill
    case validTillDisplayValue
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.NotificationSettings.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.NotificationSettings.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.NotificationSettings, b: InAppChat.NotificationSettings) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
@_Concurrency.MainActor(unsafe) public struct NavigationTransition : SwiftUI.ViewModifier {
  @_Concurrency.MainActor(unsafe) public func body(content: InAppChat.NavigationTransition.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat20NavigationTransitionV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
extension SwiftUI.View {
  public func navigationTransition() -> some SwiftUI.View
  
}
public struct GIFImage : SwiftUI.View {
  public init(data: Foundation.Data)
  public init(url: Foundation.URL)
  public init(imageName: Swift.String)
  public func loopCount(_ value: Swift.Int) -> InAppChat.GIFImage
  public func resizable() -> InAppChat.GIFImage
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat8GIFImageV4bodyQrvp", 0) __
}
public struct SearchQuery : Swift.Codable, Swift.Hashable {
  public var text: Swift.String?
  public var threadId: Swift.String?
  public var channelQuery: InAppChat.ChannelQuery?
  public init(text: Swift.String? = nil, threadId: Swift.String? = nil, channelQuery: InAppChat.ChannelQuery? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case text
    case threadId
    case channelQuery
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.SearchQuery.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.SearchQuery.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.SearchQuery, b: InAppChat.SearchQuery) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class Navigator : Foundation.ObservableObject {
  final public var path: Swift.String {
    get
  }
  final public var canGoBack: Swift.Bool {
    get
  }
  final public var canGoForward: Swift.Bool {
    get
  }
  final public var historyStackSize: Swift.Int {
    get
  }
  final public var forwardStackSize: Swift.Int {
    get
  }
  final public func navigate(_ path: Swift.String, replace: Swift.Bool = false, replaceAll: Swift.Bool = false)
  final public func goBack(total: Swift.Int = 1)
  final public func goForward(total: Swift.Int = 1)
  final public func clear()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension InAppChat.Navigator : Swift.Equatable {
  public static func == (lhs: InAppChat.Navigator, rhs: InAppChat.Navigator) -> Swift.Bool
}
public struct MyProfile : SwiftUI.View {
  public init(onBack: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat9MyProfileV4bodyQrvp", 0) __
}
public struct ChatStatusKeyListInner : Swift.Codable, Swift.Hashable {
  public var keyId: Swift.String
  public var deviceId: Swift.String
  public var publicKey: Swift.String
  public var eRTCUserId: Swift.String
  public var returnCode: InAppChat.ReceiverReturnCode?
  public init(keyId: Swift.String, deviceId: Swift.String, publicKey: Swift.String, eRTCUserId: Swift.String, returnCode: InAppChat.ReceiverReturnCode? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case keyId
    case deviceId
    case publicKey
    case eRTCUserId
    case returnCode
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.ChatStatusKeyListInner.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.ChatStatusKeyListInner.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.ChatStatusKeyListInner, b: InAppChat.ChatStatusKeyListInner) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct SendMessage200Response : Swift.Codable, Swift.Hashable {
  public enum ChatReportStatus : Swift.String, Swift.Codable, Swift.CaseIterable {
    case new
    case reportconsidered
    case reportignored
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.SendMessage200Response.ChatReportStatus]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.SendMessage200Response.ChatReportStatus] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ReturnCode : Swift.String, Swift.Codable, Swift.CaseIterable {
    case senderkeyvalidityexpiredComma
    case receiverkeyvalidationerror
    case sendernewdevicekeyavailable
    case success
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.SendMessage200Response.ReturnCode]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.SendMessage200Response.ReturnCode] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var msgUniqueId: Swift.String
  public var message: Swift.String?
  public var msgType: Swift.String?
  public var contact: InAppChat.Contact?
  public var location: InAppChat.Location?
  public var media: InAppChat.Media?
  public var gify: Swift.String?
  public var sendereRTCUserId: Swift.String
  public var createdAt: Swift.String
  public var replyThreadFeatureData: InAppChat.Reply?
  public var forwardChatFeatureData: InAppChat.Forward?
  public var reactions: [InAppChat.Reaction]?
  public var isEdited: Swift.Bool?
  public var isStarred: Swift.Bool?
  public var follow: Swift.Bool?
  public var chatReportId: Swift.String?
  public var chatReportStatus: InAppChat.SendMessage200Response.ChatReportStatus?
  public var mentions: [InAppChat.Mention]?
  public var customData: [Swift.String : AnyCodable.AnyCodable]?
  public var deleteScheduleAt: Swift.String?
  public var replyMsgCount: Swift.Int?
  public var threadId: Swift.String
  public var replies: [InAppChat.APIMessage]?
  public var encryptedChatList: [InAppChat.EncryptedMessage]?
  public var senderKeyDetails: InAppChat.SenderKeyDetails?
  public var returnCode: InAppChat.SendMessage200Response.ReturnCode
  public var retryRequired: Swift.Bool
  public var keyList: [InAppChat.ChatStatusKeyListInner]
  public init(msgUniqueId: Swift.String, message: Swift.String? = nil, msgType: Swift.String? = nil, contact: InAppChat.Contact? = nil, location: InAppChat.Location? = nil, media: InAppChat.Media? = nil, gify: Swift.String? = nil, sendereRTCUserId: Swift.String, createdAt: Swift.String, replyThreadFeatureData: InAppChat.Reply? = nil, forwardChatFeatureData: InAppChat.Forward? = nil, reactions: [InAppChat.Reaction]? = nil, isEdited: Swift.Bool? = nil, isStarred: Swift.Bool? = nil, follow: Swift.Bool? = nil, chatReportId: Swift.String? = nil, chatReportStatus: InAppChat.SendMessage200Response.ChatReportStatus? = nil, mentions: [InAppChat.Mention]? = nil, customData: [Swift.String : AnyCodable.AnyCodable]? = nil, deleteScheduleAt: Swift.String? = nil, replyMsgCount: Swift.Int? = nil, threadId: Swift.String, replies: [InAppChat.APIMessage]? = nil, encryptedChatList: [InAppChat.EncryptedMessage]? = nil, senderKeyDetails: InAppChat.SenderKeyDetails? = nil, returnCode: InAppChat.SendMessage200Response.ReturnCode, retryRequired: Swift.Bool, keyList: [InAppChat.ChatStatusKeyListInner])
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case msgUniqueId
    case message
    case msgType
    case contact
    case location
    case media
    case gify
    case sendereRTCUserId
    case createdAt
    case replyThreadFeatureData
    case forwardChatFeatureData
    case reactions
    case isEdited
    case isStarred
    case follow
    case chatReportId
    case chatReportStatus
    case mentions
    case customData
    case deleteScheduleAt
    case replyMsgCount
    case threadId
    case replies
    case encryptedChatList
    case senderKeyDetails
    case returnCode
    case retryRequired
    case keyList
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.SendMessage200Response.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.SendMessage200Response.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.SendMessage200Response, b: InAppChat.SendMessage200Response) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct UpdateMessageEvent : Swift.Codable, Swift.Hashable {
  public enum UpdateType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case delete
    case edit
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.UpdateMessageEvent.UpdateType]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.UpdateMessageEvent.UpdateType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public enum DeleteType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case _self
    case everyone
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.UpdateMessageEvent.DeleteType]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.UpdateMessageEvent.DeleteType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var eRTCUserId: Swift.String
  public var msgUniqueId: Swift.String
  public var updateType: InAppChat.UpdateMessageEvent.UpdateType
  public var deleteType: InAppChat.UpdateMessageEvent.DeleteType
  public init(eRTCUserId: Swift.String, msgUniqueId: Swift.String, updateType: InAppChat.UpdateMessageEvent.UpdateType, deleteType: InAppChat.UpdateMessageEvent.DeleteType)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case eRTCUserId
    case msgUniqueId
    case updateType
    case deleteType
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.UpdateMessageEvent.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.UpdateMessageEvent.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.UpdateMessageEvent, b: InAppChat.UpdateMessageEvent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class IACModel {
  public var mainManagedObjectContext: CoreData.NSManagedObjectContext {
    get
  }
  public func saveChanges()
  @objc deinit
}
public enum ReportStatus : Swift.String, Swift.Codable, Swift.CaseIterable {
  case new
  case reportconsidered
  case reportignored
  public init?(rawValue: Swift.String)
  public typealias AllCases = [InAppChat.ReportStatus]
  public typealias RawValue = Swift.String
  public static var allCases: [InAppChat.ReportStatus] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers open class ChatSettingAPI {
  #if compiler(>=5.3) && $AsyncAwait
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open class func getSettings() async throws -> InAppChat.ChatSettings
  #endif
  open class func getSettingsWithRequestBuilder() -> InAppChat.RequestBuilder<InAppChat.ChatSettings>
  @objc deinit
}
public struct SelfUpdateItem : Swift.Codable, Swift.Hashable {
  public enum EventType : Swift.String, Swift.Codable, Swift.CaseIterable {
    case availabilitystatuschanged
    case notificationsettingchangedglobal
    case notificationsettingschangedthread
    case userblockedstatuschanged
    public init?(rawValue: Swift.String)
    public typealias AllCases = [InAppChat.SelfUpdateItem.EventType]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.SelfUpdateItem.EventType] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public var eventType: InAppChat.SelfUpdateItem.EventType
  public var eventData: InAppChat.UserSelfUpdateEventData
  public init(eventType: InAppChat.SelfUpdateItem.EventType, eventData: InAppChat.UserSelfUpdateEventData)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case eventType
    case eventData
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.SelfUpdateItem.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.SelfUpdateItem.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.SelfUpdateItem, b: InAppChat.SelfUpdateItem) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
extension InAppChat.MessageView {
  @_Concurrency.MainActor(unsafe) public static var sample: InAppChat.MessageView {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var sampleCurrent: InAppChat.MessageView {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var sampleImage: InAppChat.MessageView {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var sampleVideo: InAppChat.MessageView {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var sampleAudio: InAppChat.MessageView {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var sampleMarkdown: InAppChat.MessageView {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var sampleMention: InAppChat.MessageView {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var sampleLink: InAppChat.MessageView {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var samplePhone: InAppChat.MessageView {
    get
  }
  @_Concurrency.MainActor(unsafe) public static var sampleGif: InAppChat.MessageView {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UsersPager : InAppChat.Pager<InAppChat.Thread> {
  #if compiler(>=5.3) && $AsyncAwait
  override public func load(_ isRefresh: Swift.Bool) async throws -> [InAppChat.Thread]
  #endif
  @objc deinit
}
public struct SquareSizeModifier : SwiftUI.ViewModifier {
  @_Concurrency.MainActor(unsafe) public func body(content: InAppChat.SquareSizeModifier.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat18SquareSizeModifierV4body7contentQr7SwiftUI05_ViewF8_ContentVyACG_tF", 0) __
}
public struct SizeModifier : SwiftUI.ViewModifier {
  @_Concurrency.MainActor(unsafe) public func body(content: InAppChat.SizeModifier.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat12SizeModifierV4body7contentQr7SwiftUI05_ViewE8_ContentVyACG_tF", 0) __
}
public struct WidthModifier : SwiftUI.ViewModifier {
  @_Concurrency.MainActor(unsafe) public func body(content: InAppChat.WidthModifier.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat13WidthModifierV4body7contentQr7SwiftUI05_ViewE8_ContentVyACG_tF", 0) __
}
public struct HeightModifier : SwiftUI.ViewModifier {
  @_Concurrency.MainActor(unsafe) public func body(content: InAppChat.HeightModifier.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat14HeightModifierV4body7contentQr7SwiftUI05_ViewE8_ContentVyACG_tF", 0) __
}
public struct GrowModifier : SwiftUI.ViewModifier {
  @_Concurrency.MainActor(unsafe) public func body(content: InAppChat.GrowModifier.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat12GrowModifierV4body7contentQr7SwiftUI05_ViewE8_ContentVyACG_tF", 0) __
}
public struct GrowXModifier : SwiftUI.ViewModifier {
  @_Concurrency.MainActor(unsafe) public func body(content: InAppChat.GrowXModifier.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat13GrowXModifierV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
public struct GrowYModifier : SwiftUI.ViewModifier {
  @_Concurrency.MainActor(unsafe) public func body(content: InAppChat.GrowYModifier.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat13GrowYModifierV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
public struct CircleModifier : SwiftUI.ViewModifier {
  @_Concurrency.MainActor(unsafe) public func body(content: InAppChat.CircleModifier.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat14CircleModifierV4body7contentQr7SwiftUI05_ViewE8_ContentVyACG_tF", 0) __
}
extension SwiftUI.View {
  public func size(_ size: CoreFoundation.CGFloat) -> some SwiftUI.View
  
  public func size(_ size: CoreFoundation.CGSize) -> some SwiftUI.View
  
  public func width(_ width: CoreFoundation.CGFloat) -> some SwiftUI.View
  
  public func height(_ height: CoreFoundation.CGFloat?) -> some SwiftUI.View
  
  public func circle(_ size: CoreFoundation.CGFloat, _ color: SwiftUI.Color) -> some SwiftUI.View
  
  public func grow() -> some SwiftUI.View
  
  public func growX() -> some SwiftUI.View
  
  public func growY() -> some SwiftUI.View
  
}
public struct UpdateThreadInput : Swift.Codable, Swift.Hashable {
  public var notificationSettings: InAppChat.NotificationSettings?
  public var autoDeleteSetting: InAppChat.AutoDeleteSettings?
  public init(notificationSettings: InAppChat.NotificationSettings? = nil, autoDeleteSetting: InAppChat.AutoDeleteSettings? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case notificationSettings
    case autoDeleteSetting
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.UpdateThreadInput.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.UpdateThreadInput.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.UpdateThreadInput, b: InAppChat.UpdateThreadInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct ChatSettingsProfanityFilterInner : Swift.Codable, Swift.Hashable {
  public var keywords: [Swift.String]?
  public var regexes: [Swift.String]?
  public var actionType: Swift.String?
  public init(keywords: [Swift.String]? = nil, regexes: [Swift.String]? = nil, actionType: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case keywords
    case regexes
    case actionType
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.ChatSettingsProfanityFilterInner.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.ChatSettingsProfanityFilterInner.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.ChatSettingsProfanityFilterInner, b: InAppChat.ChatSettingsProfanityFilterInner) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct SearchResults : Swift.Codable, Swift.Hashable {
  public var messages: [InAppChat.APIMessage]?
  public var files: [InAppChat.APIMessage]?
  public var channels: [InAppChat.APIGroup]?
  public init(messages: [InAppChat.APIMessage]? = nil, files: [InAppChat.APIMessage]? = nil, channels: [InAppChat.APIGroup]? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case messages
    case files
    case channels
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.SearchResults.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.SearchResults.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.SearchResults, b: InAppChat.SearchResults) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
extension SwiftUI.Color {
  public static var background: SwiftUI.Color {
    get
  }
}
@propertyWrapper public struct UserDefaultWrapper<Value> {
  public var wrappedValue: Value {
    get
    set
  }
}
public class HappySettings : Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($showingKaomojis) public var showingKaomojis: Swift.Bool {
    get
    set
  }
  public var $showingKaomojis: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public static let shared: InAppChat.HappySettings
  public init()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct ChatStatus : Swift.Codable, Swift.Hashable {
  public var returnCode: InAppChat.SenderReturnCode
  public var retryRequired: Swift.Bool
  public var keyList: [InAppChat.ChatStatusKeyListInner]
  public init(returnCode: InAppChat.SenderReturnCode, retryRequired: Swift.Bool, keyList: [InAppChat.ChatStatusKeyListInner])
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case returnCode
    case retryRequired
    case keyList
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.ChatStatus.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.ChatStatus.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.ChatStatus, b: InAppChat.ChatStatus) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct AvailabilityEvent : Swift.Codable, Swift.Hashable {
  public var eRTCUserId: Swift.String
  public var availabilityStatus: InAppChat.AvailabilityStatus
  public init(eRTCUserId: Swift.String, availabilityStatus: InAppChat.AvailabilityStatus)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case eRTCUserId
    case availabilityStatus
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.AvailabilityEvent.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.AvailabilityEvent.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.AvailabilityEvent, b: InAppChat.AvailabilityEvent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public struct ReportTenantAdminStatus : Swift.Codable, Swift.Hashable {
  public var status: InAppChat.ReportStatus?
  public var category: InAppChat.ReportCategory?
  public var createdAt: Swift.Double?
  public init(status: InAppChat.ReportStatus? = nil, category: InAppChat.ReportCategory? = nil, createdAt: Swift.Double? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case status
    case category
    case createdAt
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.ReportTenantAdminStatus.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.ReportTenantAdminStatus.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.ReportTenantAdminStatus, b: InAppChat.ReportTenantAdminStatus) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public enum SenderReturnCode : Swift.String, Swift.Codable, Swift.CaseIterable {
  case senderkeyvalidityexpiredComma
  case receiverkeyvalidationerror
  case sendernewdevicekeyavailable
  case success
  public init?(rawValue: Swift.String)
  public typealias AllCases = [InAppChat.SenderReturnCode]
  public typealias RawValue = Swift.String
  public static var allCases: [InAppChat.SenderReturnCode] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct Reaction : Swift.Codable, Swift.Hashable {
  public var emojiCode: Swift.String
  public var count: Swift.Int
  public var users: [Swift.String]
  public init(emojiCode: Swift.String, count: Swift.Int, users: [Swift.String])
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case emojiCode
    case count
    case users
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.Reaction.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.Reaction.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.Reaction, b: InAppChat.Reaction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
@_Concurrency.MainActor(unsafe) public struct ManageNotifications : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init()
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s9InAppChat19ManageNotificationsV4bodyQrvp", 0) __
}
public struct ResetPasswordInput : Swift.Codable, Swift.Hashable {
  public var loginType: Swift.String
  public var appUserId: Swift.String
  public init(loginType: Swift.String, appUserId: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case loginType
    case appUserId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias AllCases = [InAppChat.ResetPasswordInput.CodingKeys]
    public typealias RawValue = Swift.String
    public static var allCases: [InAppChat.ResetPasswordInput.CodingKeys] {
      get
    }
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: InAppChat.ResetPasswordInput, b: InAppChat.ResetPasswordInput) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class RepliesPager : InAppChat.Pager<InAppChat.Message> {
  public init(_ message: InAppChat.Message)
  #if compiler(>=5.3) && $AsyncAwait
  override public func load(_ isRefresh: Swift.Bool) async throws -> [InAppChat.Message]
  #endif
  @objc deinit
}
extension InAppChat.ChatReportEvent.CodingKeys : Swift.Equatable {}
extension InAppChat.ChatReportEvent.CodingKeys : Swift.Hashable {}
extension InAppChat.ChatReportEvent.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.ChatSettingsDomainFilterInner.CodingKeys : Swift.Equatable {}
extension InAppChat.ChatSettingsDomainFilterInner.CodingKeys : Swift.Hashable {}
extension InAppChat.ChatSettingsDomainFilterInner.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.PhoneNumber.CodingKeys : Swift.Equatable {}
extension InAppChat.PhoneNumber.CodingKeys : Swift.Hashable {}
extension InAppChat.PhoneNumber.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.ReceiverReturnCode : Swift.Equatable {}
extension InAppChat.ReceiverReturnCode : Swift.Hashable {}
extension InAppChat.ReceiverReturnCode : Swift.RawRepresentable {}
extension InAppChat.GroupUpdatEventChangeData.CodingKeys : Swift.Equatable {}
extension InAppChat.GroupUpdatEventChangeData.CodingKeys : Swift.Hashable {}
extension InAppChat.GroupUpdatEventChangeData.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.UpdateGroupInput.GroupType : Swift.Equatable {}
extension InAppChat.UpdateGroupInput.GroupType : Swift.Hashable {}
extension InAppChat.UpdateGroupInput.GroupType : Swift.RawRepresentable {}
extension InAppChat.UpdateGroupInput.CodingKeys : Swift.Equatable {}
extension InAppChat.UpdateGroupInput.CodingKeys : Swift.Hashable {}
extension InAppChat.UpdateGroupInput.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.StringValidationErrorKind : Swift.Equatable {}
extension InAppChat.StringValidationErrorKind : Swift.Hashable {}
extension InAppChat.NumericValidationErrorKind : Swift.Equatable {}
extension InAppChat.NumericValidationErrorKind : Swift.Hashable {}
extension InAppChat.Message.Attachment.Kind : Swift.Equatable {}
extension InAppChat.Message.Attachment.Kind : Swift.Hashable {}
extension InAppChat.Message.Attachment.Kind : Swift.RawRepresentable {}
extension InAppChat.Message.Status : Swift.Equatable {}
extension InAppChat.Message.Status : Swift.Hashable {}
extension InAppChat.Message.Status : Swift.RawRepresentable {}
extension InAppChat.FCMValidationInput.CodingKeys : Swift.Equatable {}
extension InAppChat.FCMValidationInput.CodingKeys : Swift.Hashable {}
extension InAppChat.FCMValidationInput.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.Chats.List : Swift.Equatable {}
extension InAppChat.Chats.List : Swift.Hashable {}
extension InAppChat.Chats.List : Swift.RawRepresentable {}
extension InAppChat.ReactionEvent.CodingKeys : Swift.Equatable {}
extension InAppChat.ReactionEvent.CodingKeys : Swift.Hashable {}
extension InAppChat.ReactionEvent.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.GroupUpdatEventChangeDataGroupId.CodingKeys : Swift.Equatable {}
extension InAppChat.GroupUpdatEventChangeDataGroupId.CodingKeys : Swift.Hashable {}
extension InAppChat.GroupUpdatEventChangeDataGroupId.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.UserSelfUpdateEventData.BlockedStatus : Swift.Equatable {}
extension InAppChat.UserSelfUpdateEventData.BlockedStatus : Swift.Hashable {}
extension InAppChat.UserSelfUpdateEventData.BlockedStatus : Swift.RawRepresentable {}
extension InAppChat.UserSelfUpdateEventData.CodingKeys : Swift.Equatable {}
extension InAppChat.UserSelfUpdateEventData.CodingKeys : Swift.Hashable {}
extension InAppChat.UserSelfUpdateEventData.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.APIGroup.GroupType : Swift.Equatable {}
extension InAppChat.APIGroup.GroupType : Swift.Hashable {}
extension InAppChat.APIGroup.GroupType : Swift.RawRepresentable {}
extension InAppChat.APIGroup.CodingKeys : Swift.Equatable {}
extension InAppChat.APIGroup.CodingKeys : Swift.Hashable {}
extension InAppChat.APIGroup.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.GroupUpdatEventChangeDataName.CodingKeys : Swift.Equatable {}
extension InAppChat.GroupUpdatEventChangeDataName.CodingKeys : Swift.Hashable {}
extension InAppChat.GroupUpdatEventChangeDataName.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.GroupAPI.GroupType_createGroup : Swift.Equatable {}
extension InAppChat.GroupAPI.GroupType_createGroup : Swift.Hashable {}
extension InAppChat.GroupAPI.GroupType_createGroup : Swift.RawRepresentable {}
extension InAppChat.GroupAPI.GroupType_getGroups : Swift.Equatable {}
extension InAppChat.GroupAPI.GroupType_getGroups : Swift.Hashable {}
extension InAppChat.GroupAPI.GroupType_getGroups : Swift.RawRepresentable {}
extension InAppChat.GroupAPI.Joined_getGroups : Swift.Equatable {}
extension InAppChat.GroupAPI.Joined_getGroups : Swift.Hashable {}
extension InAppChat.GroupAPI.Joined_getGroups : Swift.RawRepresentable {}
extension InAppChat.GroupUpdatEventChangeDataGroupType.Previous : Swift.Equatable {}
extension InAppChat.GroupUpdatEventChangeDataGroupType.Previous : Swift.Hashable {}
extension InAppChat.GroupUpdatEventChangeDataGroupType.Previous : Swift.RawRepresentable {}
extension InAppChat.GroupUpdatEventChangeDataGroupType.New : Swift.Equatable {}
extension InAppChat.GroupUpdatEventChangeDataGroupType.New : Swift.Hashable {}
extension InAppChat.GroupUpdatEventChangeDataGroupType.New : Swift.RawRepresentable {}
extension InAppChat.GroupUpdatEventChangeDataGroupType.CodingKeys : Swift.Equatable {}
extension InAppChat.GroupUpdatEventChangeDataGroupType.CodingKeys : Swift.Hashable {}
extension InAppChat.GroupUpdatEventChangeDataGroupType.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.GroupUpdateEventItem.EventType : Swift.Equatable {}
extension InAppChat.GroupUpdateEventItem.EventType : Swift.Hashable {}
extension InAppChat.GroupUpdateEventItem.EventType : Swift.RawRepresentable {}
extension InAppChat.GroupUpdateEventItem.CodingKeys : Swift.Equatable {}
extension InAppChat.GroupUpdateEventItem.CodingKeys : Swift.Hashable {}
extension InAppChat.GroupUpdateEventItem.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.HTTPMethod : Swift.Equatable {}
extension InAppChat.HTTPMethod : Swift.Hashable {}
extension InAppChat.HTTPMethod : Swift.RawRepresentable {}
extension InAppChat.GroupUpdateEvent.CodingKeys : Swift.Equatable {}
extension InAppChat.GroupUpdateEvent.CodingKeys : Swift.Hashable {}
extension InAppChat.GroupUpdateEvent.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.Auth.CodingKeys : Swift.Equatable {}
extension InAppChat.Auth.CodingKeys : Swift.Hashable {}
extension InAppChat.Auth.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.ChannelQuery.GroupType : Swift.Equatable {}
extension InAppChat.ChannelQuery.GroupType : Swift.Hashable {}
extension InAppChat.ChannelQuery.GroupType : Swift.RawRepresentable {}
extension InAppChat.ChannelQuery.CodingKeys : Swift.Equatable {}
extension InAppChat.ChannelQuery.CodingKeys : Swift.Hashable {}
extension InAppChat.ChannelQuery.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.APIMessage.ChatReportStatus : Swift.Equatable {}
extension InAppChat.APIMessage.ChatReportStatus : Swift.Hashable {}
extension InAppChat.APIMessage.ChatReportStatus : Swift.RawRepresentable {}
extension InAppChat.APIMessage.CodingKeys : Swift.Equatable {}
extension InAppChat.APIMessage.CodingKeys : Swift.Hashable {}
extension InAppChat.APIMessage.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.Mention.CodingKeys : Swift.Equatable {}
extension InAppChat.Mention.CodingKeys : Swift.Hashable {}
extension InAppChat.Mention.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.Participant.Role : Swift.Equatable {}
extension InAppChat.Participant.Role : Swift.Hashable {}
extension InAppChat.Participant.Role : Swift.RawRepresentable {}
extension InAppChat.Participant.CodingKeys : Swift.Equatable {}
extension InAppChat.Participant.CodingKeys : Swift.Hashable {}
extension InAppChat.Participant.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.Location.CodingKeys : Swift.Equatable {}
extension InAppChat.Location.CodingKeys : Swift.Hashable {}
extension InAppChat.Location.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.SenderKeyDetails.CodingKeys : Swift.Equatable {}
extension InAppChat.SenderKeyDetails.CodingKeys : Swift.Hashable {}
extension InAppChat.SenderKeyDetails.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.UserSelfUpdateEvent.CodingKeys : Swift.Equatable {}
extension InAppChat.UserSelfUpdateEvent.CodingKeys : Swift.Hashable {}
extension InAppChat.UserSelfUpdateEvent.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.MessageType : Swift.Equatable {}
extension InAppChat.MessageType : Swift.Hashable {}
extension InAppChat.MessageType : Swift.RawRepresentable {}
extension InAppChat.ModerateGroupInput.ModelType : Swift.Equatable {}
extension InAppChat.ModerateGroupInput.ModelType : Swift.Hashable {}
extension InAppChat.ModerateGroupInput.ModelType : Swift.RawRepresentable {}
extension InAppChat.ModerateGroupInput.CodingKeys : Swift.Equatable {}
extension InAppChat.ModerateGroupInput.CodingKeys : Swift.Hashable {}
extension InAppChat.ModerateGroupInput.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.TenantUpdateEvent.CodingKeys : Swift.Equatable {}
extension InAppChat.TenantUpdateEvent.CodingKeys : Swift.Hashable {}
extension InAppChat.TenantUpdateEvent.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.AvailabilityStatus : Swift.Equatable {}
extension InAppChat.AvailabilityStatus : Swift.Hashable {}
extension InAppChat.AvailabilityStatus : Swift.RawRepresentable {}
extension InAppChat.DownloadException : Swift.Equatable {}
extension InAppChat.DownloadException : Swift.Hashable {}
extension InAppChat.Token.CodingKeys : Swift.Equatable {}
extension InAppChat.Token.CodingKeys : Swift.Hashable {}
extension InAppChat.Token.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.ChatReportEventEvent.CodingKeys : Swift.Equatable {}
extension InAppChat.ChatReportEventEvent.CodingKeys : Swift.Hashable {}
extension InAppChat.ChatReportEventEvent.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.ChatReportEventEventEventData.CodingKeys : Swift.Equatable {}
extension InAppChat.ChatReportEventEventEventData.CodingKeys : Swift.Hashable {}
extension InAppChat.ChatReportEventEventEventData.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.Report.CodingKeys : Swift.Equatable {}
extension InAppChat.Report.CodingKeys : Swift.Hashable {}
extension InAppChat.Report.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.APIUser.CodingKeys : Swift.Equatable {}
extension InAppChat.APIUser.CodingKeys : Swift.Hashable {}
extension InAppChat.APIUser.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.EncryptionKey.CodingKeys : Swift.Equatable {}
extension InAppChat.EncryptionKey.CodingKeys : Swift.Hashable {}
extension InAppChat.EncryptionKey.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.LoginPasswordInput.CodingKeys : Swift.Equatable {}
extension InAppChat.LoginPasswordInput.CodingKeys : Swift.Hashable {}
extension InAppChat.LoginPasswordInput.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.Forward.CodingKeys : Swift.Equatable {}
extension InAppChat.Forward.CodingKeys : Swift.Hashable {}
extension InAppChat.Forward.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.SectionType : Swift.Equatable {}
extension InAppChat.SectionType : Swift.Hashable {}
extension InAppChat.SectionType : Swift.RawRepresentable {}
extension InAppChat.KaomojiTags : Swift.Equatable {}
extension InAppChat.KaomojiTags : Swift.Hashable {}
extension InAppChat.KaomojiTags : Swift.RawRepresentable {}
extension InAppChat.Email.CodingKeys : Swift.Equatable {}
extension InAppChat.Email.CodingKeys : Swift.Hashable {}
extension InAppChat.Email.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.ChatAPI.Direction_getMessages : Swift.Equatable {}
extension InAppChat.ChatAPI.Direction_getMessages : Swift.Hashable {}
extension InAppChat.ChatAPI.Direction_getMessages : Swift.RawRepresentable {}
extension InAppChat.ChatAPI.Direction_getReplyThreads : Swift.Equatable {}
extension InAppChat.ChatAPI.Direction_getReplyThreads : Swift.Hashable {}
extension InAppChat.ChatAPI.Direction_getReplyThreads : Swift.RawRepresentable {}
extension InAppChat.MessageResponse.CodingKeys : Swift.Equatable {}
extension InAppChat.MessageResponse.CodingKeys : Swift.Hashable {}
extension InAppChat.MessageResponse.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.MsgReadEvent.MsgReadStatus : Swift.Equatable {}
extension InAppChat.MsgReadEvent.MsgReadStatus : Swift.Hashable {}
extension InAppChat.MsgReadEvent.MsgReadStatus : Swift.RawRepresentable {}
extension InAppChat.MsgReadEvent.CodingKeys : Swift.Equatable {}
extension InAppChat.MsgReadEvent.CodingKeys : Swift.Hashable {}
extension InAppChat.MsgReadEvent.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.SyncContacts200Response.CodingKeys : Swift.Equatable {}
extension InAppChat.SyncContacts200Response.CodingKeys : Swift.Hashable {}
extension InAppChat.SyncContacts200Response.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.UpdateUserInput.DeviceType : Swift.Equatable {}
extension InAppChat.UpdateUserInput.DeviceType : Swift.Hashable {}
extension InAppChat.UpdateUserInput.DeviceType : Swift.RawRepresentable {}
extension InAppChat.UpdateUserInput.CodingKeys : Swift.Equatable {}
extension InAppChat.UpdateUserInput.CodingKeys : Swift.Hashable {}
extension InAppChat.UpdateUserInput.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.UpdateMessageInput.CodingKeys : Swift.Equatable {}
extension InAppChat.UpdateMessageInput.CodingKeys : Swift.Hashable {}
extension InAppChat.UpdateMessageInput.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.Media.CodingKeys : Swift.Equatable {}
extension InAppChat.Media.CodingKeys : Swift.Hashable {}
extension InAppChat.Media.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.ChatSettings.CodingKeys : Swift.Equatable {}
extension InAppChat.ChatSettings.CodingKeys : Swift.Hashable {}
extension InAppChat.ChatSettings.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.Event.EventType : Swift.Equatable {}
extension InAppChat.Event.EventType : Swift.Hashable {}
extension InAppChat.Event.EventType : Swift.RawRepresentable {}
extension InAppChat.Event.CodingKeys : Swift.Equatable {}
extension InAppChat.Event.CodingKeys : Swift.Hashable {}
extension InAppChat.Event.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.Reply.CodingKeys : Swift.Equatable {}
extension InAppChat.Reply.CodingKeys : Swift.Hashable {}
extension InAppChat.Reply.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.ReportCategory : Swift.Equatable {}
extension InAppChat.ReportCategory : Swift.Hashable {}
extension InAppChat.ReportCategory : Swift.RawRepresentable {}
extension InAppChat.ReportChannelAdminStatus.CodingKeys : Swift.Equatable {}
extension InAppChat.ReportChannelAdminStatus.CodingKeys : Swift.Hashable {}
extension InAppChat.ReportChannelAdminStatus.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.ThreadAPI.ThreadType_getThreads : Swift.Equatable {}
extension InAppChat.ThreadAPI.ThreadType_getThreads : Swift.Hashable {}
extension InAppChat.ThreadAPI.ThreadType_getThreads : Swift.RawRepresentable {}
extension InAppChat.ReturnCode.CodingKeys : Swift.Equatable {}
extension InAppChat.ReturnCode.CodingKeys : Swift.Hashable {}
extension InAppChat.ReturnCode.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.Contact.CodingKeys : Swift.Equatable {}
extension InAppChat.Contact.CodingKeys : Swift.Hashable {}
extension InAppChat.Contact.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.Invite.CodingKeys : Swift.Equatable {}
extension InAppChat.Invite.CodingKeys : Swift.Hashable {}
extension InAppChat.Invite.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.DefaultAPI.Direction_getUserMessages : Swift.Equatable {}
extension InAppChat.DefaultAPI.Direction_getUserMessages : Swift.Hashable {}
extension InAppChat.DefaultAPI.Direction_getUserMessages : Swift.RawRepresentable {}
extension InAppChat.AutoDeleteSettings.CodingKeys : Swift.Equatable {}
extension InAppChat.AutoDeleteSettings.CodingKeys : Swift.Hashable {}
extension InAppChat.AutoDeleteSettings.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.CreateChatReport.CodingKeys : Swift.Equatable {}
extension InAppChat.CreateChatReport.CodingKeys : Swift.Hashable {}
extension InAppChat.CreateChatReport.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.TypingEvent.TypingStatusEvent : Swift.Equatable {}
extension InAppChat.TypingEvent.TypingStatusEvent : Swift.Hashable {}
extension InAppChat.TypingEvent.TypingStatusEvent : Swift.RawRepresentable {}
extension InAppChat.TypingEvent.CodingKeys : Swift.Equatable {}
extension InAppChat.TypingEvent.CodingKeys : Swift.Hashable {}
extension InAppChat.TypingEvent.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.LoginInput.LoginType : Swift.Equatable {}
extension InAppChat.LoginInput.LoginType : Swift.Hashable {}
extension InAppChat.LoginInput.LoginType : Swift.RawRepresentable {}
extension InAppChat.LoginInput.DeviceType : Swift.Equatable {}
extension InAppChat.LoginInput.DeviceType : Swift.Hashable {}
extension InAppChat.LoginInput.DeviceType : Swift.RawRepresentable {}
extension InAppChat.LoginInput.CodingKeys : Swift.Equatable {}
extension InAppChat.LoginInput.CodingKeys : Swift.Hashable {}
extension InAppChat.LoginInput.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.GroupUpdateEventData.CodingKeys : Swift.Equatable {}
extension InAppChat.GroupUpdateEventData.CodingKeys : Swift.Hashable {}
extension InAppChat.GroupUpdateEventData.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.SearchInput.ResultCategories : Swift.Equatable {}
extension InAppChat.SearchInput.ResultCategories : Swift.Hashable {}
extension InAppChat.SearchInput.ResultCategories : Swift.RawRepresentable {}
extension InAppChat.SearchInput.CodingKeys : Swift.Equatable {}
extension InAppChat.SearchInput.CodingKeys : Swift.Hashable {}
extension InAppChat.SearchInput.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.EncryptedMessage.CodingKeys : Swift.Equatable {}
extension InAppChat.EncryptedMessage.CodingKeys : Swift.Hashable {}
extension InAppChat.EncryptedMessage.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.SyncContactsInput.CodingKeys : Swift.Equatable {}
extension InAppChat.SyncContactsInput.CodingKeys : Swift.Hashable {}
extension InAppChat.SyncContactsInput.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.NFTLoginInput.CodingKeys : Swift.Equatable {}
extension InAppChat.NFTLoginInput.CodingKeys : Swift.Hashable {}
extension InAppChat.NFTLoginInput.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.NewMessageEvent.CodingKeys : Swift.Equatable {}
extension InAppChat.NewMessageEvent.CodingKeys : Swift.Hashable {}
extension InAppChat.NewMessageEvent.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.APIThread.ThreadType : Swift.Equatable {}
extension InAppChat.APIThread.ThreadType : Swift.Hashable {}
extension InAppChat.APIThread.ThreadType : Swift.RawRepresentable {}
extension InAppChat.APIThread.CodingKeys : Swift.Equatable {}
extension InAppChat.APIThread.CodingKeys : Swift.Hashable {}
extension InAppChat.APIThread.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.Stub.CodingKeys : Swift.Equatable {}
extension InAppChat.Stub.CodingKeys : Swift.Hashable {}
extension InAppChat.Stub.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.NotificationSettings.AllowFrom : Swift.Equatable {}
extension InAppChat.NotificationSettings.AllowFrom : Swift.Hashable {}
extension InAppChat.NotificationSettings.AllowFrom : Swift.RawRepresentable {}
extension InAppChat.NotificationSettings.CodingKeys : Swift.Equatable {}
extension InAppChat.NotificationSettings.CodingKeys : Swift.Hashable {}
extension InAppChat.NotificationSettings.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.SearchQuery.CodingKeys : Swift.Equatable {}
extension InAppChat.SearchQuery.CodingKeys : Swift.Hashable {}
extension InAppChat.SearchQuery.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.ChatStatusKeyListInner.CodingKeys : Swift.Equatable {}
extension InAppChat.ChatStatusKeyListInner.CodingKeys : Swift.Hashable {}
extension InAppChat.ChatStatusKeyListInner.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.SendMessage200Response.ChatReportStatus : Swift.Equatable {}
extension InAppChat.SendMessage200Response.ChatReportStatus : Swift.Hashable {}
extension InAppChat.SendMessage200Response.ChatReportStatus : Swift.RawRepresentable {}
extension InAppChat.SendMessage200Response.ReturnCode : Swift.Equatable {}
extension InAppChat.SendMessage200Response.ReturnCode : Swift.Hashable {}
extension InAppChat.SendMessage200Response.ReturnCode : Swift.RawRepresentable {}
extension InAppChat.SendMessage200Response.CodingKeys : Swift.Equatable {}
extension InAppChat.SendMessage200Response.CodingKeys : Swift.Hashable {}
extension InAppChat.SendMessage200Response.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.UpdateMessageEvent.UpdateType : Swift.Equatable {}
extension InAppChat.UpdateMessageEvent.UpdateType : Swift.Hashable {}
extension InAppChat.UpdateMessageEvent.UpdateType : Swift.RawRepresentable {}
extension InAppChat.UpdateMessageEvent.DeleteType : Swift.Equatable {}
extension InAppChat.UpdateMessageEvent.DeleteType : Swift.Hashable {}
extension InAppChat.UpdateMessageEvent.DeleteType : Swift.RawRepresentable {}
extension InAppChat.UpdateMessageEvent.CodingKeys : Swift.Equatable {}
extension InAppChat.UpdateMessageEvent.CodingKeys : Swift.Hashable {}
extension InAppChat.UpdateMessageEvent.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.ReportStatus : Swift.Equatable {}
extension InAppChat.ReportStatus : Swift.Hashable {}
extension InAppChat.ReportStatus : Swift.RawRepresentable {}
extension InAppChat.SelfUpdateItem.EventType : Swift.Equatable {}
extension InAppChat.SelfUpdateItem.EventType : Swift.Hashable {}
extension InAppChat.SelfUpdateItem.EventType : Swift.RawRepresentable {}
extension InAppChat.SelfUpdateItem.CodingKeys : Swift.Equatable {}
extension InAppChat.SelfUpdateItem.CodingKeys : Swift.Hashable {}
extension InAppChat.SelfUpdateItem.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.UpdateThreadInput.CodingKeys : Swift.Equatable {}
extension InAppChat.UpdateThreadInput.CodingKeys : Swift.Hashable {}
extension InAppChat.UpdateThreadInput.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.ChatSettingsProfanityFilterInner.CodingKeys : Swift.Equatable {}
extension InAppChat.ChatSettingsProfanityFilterInner.CodingKeys : Swift.Hashable {}
extension InAppChat.ChatSettingsProfanityFilterInner.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.SearchResults.CodingKeys : Swift.Equatable {}
extension InAppChat.SearchResults.CodingKeys : Swift.Hashable {}
extension InAppChat.SearchResults.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.ChatStatus.CodingKeys : Swift.Equatable {}
extension InAppChat.ChatStatus.CodingKeys : Swift.Hashable {}
extension InAppChat.ChatStatus.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.AvailabilityEvent.CodingKeys : Swift.Equatable {}
extension InAppChat.AvailabilityEvent.CodingKeys : Swift.Hashable {}
extension InAppChat.AvailabilityEvent.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.ReportTenantAdminStatus.CodingKeys : Swift.Equatable {}
extension InAppChat.ReportTenantAdminStatus.CodingKeys : Swift.Hashable {}
extension InAppChat.ReportTenantAdminStatus.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.SenderReturnCode : Swift.Equatable {}
extension InAppChat.SenderReturnCode : Swift.Hashable {}
extension InAppChat.SenderReturnCode : Swift.RawRepresentable {}
extension InAppChat.Reaction.CodingKeys : Swift.Equatable {}
extension InAppChat.Reaction.CodingKeys : Swift.Hashable {}
extension InAppChat.Reaction.CodingKeys : Swift.RawRepresentable {}
extension InAppChat.ResetPasswordInput.CodingKeys : Swift.Equatable {}
extension InAppChat.ResetPasswordInput.CodingKeys : Swift.Hashable {}
extension InAppChat.ResetPasswordInput.CodingKeys : Swift.RawRepresentable {}
